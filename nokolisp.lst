Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-1


       1					page ,132
       2				
       3				;========================================================
       4				;
       5				; NOKOLISP josta tulee DXLISP, jos DXLISP on maaritelty.
       6				; (DXLISP pyorii DX200-keskuksen sisalla)
       7				; Tama kaantyy vain microsoftin MASM-assemblerilla
       8				;
       9				;========================================================
      10				
      11				
      12 0000				rapaseg segment para
      13				
      14				ASSUME cs:rapaseg,DS:DATASEG,SS:STACKSEG,es:codeseg
      15 0000				sikaa label far
      16 0000  8C C2				mov	dx,es
      17				
      18 0002  8C C9				mov	cx,cs
      19 0004  2E: 2B 0E 0058 R			sub	cx,cs:[raparapa]
      20 0009  2E: 8C 0E 0058 R			mov	cs:[raparapa],cs
      21				
      22 000E  2E: A1 0056 R			mov	ax,cs:[rapacode]
      23 0012  03 C1				add	ax,cx
      24 0014  8E C0				mov	es,ax
      25 0016  2E: A3 0056 R			mov	cs:[rapacode],ax
      26				
      27 001A  26: A1 3F4D R			mov	ax,es:[cs_dataseg]
      28 001E  03 C1				add	ax,cx
      29 0020  8E D8				mov	ds,ax
      30 0022  26: A3 3F4D R			mov	es:[cs_dataseg],ax
      31				
      32 0026  8C D0				mov	ax,ss
      33 0028  26: A3 3F4F R			mov	es:[cs_stackseg],ax
      34				
      35 002C  89 16 011D R			mov	[espsp],dx
      36 0030  01 0E 0100 R			add	[nodtyp],cx
      37 0034  01 0E 0102 R			add	[carlow],cx
      38 0038  01 0E 0104 R			add	[carhig],cx
      39 003C  01 0E 0106 R			add	[cdrlow],cx
      40 0040  01 0E 0108 R			add	[cdrhig],cx
      41 0044  01 0E 011F R			add	[lastmem],cx
      42 0048  01 0E 2FA9 R			add	[ds_rapaseg],cx
      43 004C  01 0E 2FA7 R			add	[ds_exeseg],cx
      44				
      45 0050  06				push	es
      46 0051  B8 3FDC R			mov	ax,offset continue_in
      47 0054  50				push	ax
      48 0055  CB				db 0cbh ; RETF  ja vittu, kun se pitaa aina kirjoittaa nain
      49				
      50 0056  ---- R				rapacode dw codeseg
      51 0058  ---- R				raparapa dw rapaseg	
      52				
      53 005A				rapaseg ends
      54				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-2


      55 0000				exeseg segment para
      56				; exe-filen headeri:
      57 0000  4D 5A				db	4DH,5AH	; 0
      58 0002  01FF				dw	1ffH	; 2 
      59 0004  0000				dw	0	; 4 size-of-exe in 512 - byte parag
      60 0006  0000				dw	0	; 6  
      61 0008  0002				dw	2	; 8  header size = 32 bytes
      62 000A  0000				dw	0	; a
      63 000C  FFFF				dw	0ffffh	; c
      64 000E  0000				dw	0	; e  SS
      65 0010  0000				dw	0	; 10 SP 
      66 0012  0000				dw	0	; 12
      67 0014  0000				dw	0	; 14
      68 0016  0000				dw	0	; 16
      69 0018  001E				dw	1eH	; 18
      70 001A  0001				dw	1	; 1a
      71				
      72 001C  0000				dw	0	; 1c
      73 001E  0000				dw	0	; 1e
      74					
      75 0020				exeseg ends
      76				
      77				; +20H
      78				
      79				
      80				
      81 0000				STACKSEG SEGMENT PARA STACK 'STACK'
      82 0000  4E20[				Db 20000 DUP(?)
      83	   ??			
      84			 ]	
      85				
      86 4E20  0000				TOPOFSTACK DW 0 ; Pinon ylivuotopaikka
      87 4E22				STACKSEG ENDS
      88				
      89				
      90 0000				DATASEG	SEGMENT PARA 'DATA'
      91				
      92 0000  0100[				DB 100H	DUP(?) ; pinon ylivuototilaa
      93	   ??			
      94			 ]	
      95				
      96				
      97				; Yks lisp-solu on viiden byten mittainen, jokainen byte omassa
      98				; segmentissaan. Segmenttien paikka ja koko lasketaan vasta
      99				; ohjelmaa kaynnistettaessa:
     100				
     101 0100  0000				nodtyp dw 0   ; solun tyyppi
     102 0102  0000				carlow dw 0   ; CAR
     103 0104  0000				carhig dw 0   ;
     104 0106  0000				cdrlow dw 0   ; CDR
     105 0108  0000				cdrhig dw 0   ;
     106				
     107				; Varattuja osoitteita:
     108 = 0000					nil	equ	0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-3


     109 = 0001					t	equ	1
     110 = 0002					QUOTE	EQU	2
     111				        ; 2 - 0FFH tyhjaa
     112					; 100H - 200H pienet numerot
     113 = 0003					ZERONUM	EQU	3	; nolla
     114 = 0300					FSTNODE	EQU	300H	; Pienin Cons-solmu 
     115 010A  FFFE				LASTNODE DW	0FFFEH  ; Ylin solmu
     116				
     117				
     118				; Tyyppikentan arvoja:
     119 = 0003					NUMBER	EQU	3
     120 = 0004					STRING	EQU	4
     121 = 0005					SYMBOL	EQU	5
     122 = 0006					FSYMBO	EQU	6
     123 = 0007					SUBRU	EQU	7
     124 = 000F					LIST	EQU	0FH
     125 = 0010					GARBA	EQU	10H
     126 = 0020					CIRCUL	EQU	20H
     127				
     128				; Muuttujia:
     129				
     130 010C  0000				OBLIST 		DW 	NIL ; Oblistin juuri
     131				
     132 010E  0000				FREELIST	DW	nil ; eka vapaa solu
     133				
     134 0110  0000				ARGSTA		DW	NIL  ; sisakkaisten lausekkeiden "hannat" -
     135								     ;   eli argumentit
     136				
     137 0112  0000				ENVIRO		DW	NIL  ; Muuttujien vanhoja arvoja -
     138				                                     ; (((Name N2 ..) Value V2 ..)((Name
     139				
     140 0114  0000				TRACE		DW	NIL  ; Eval trace
     141 0116  00FF				TRON		DW	0FFH ; Trace paalla
     142				
     143 0118  0000				MACDAT		DW	0 ; kaannettyjen datat
     144				
     145 011A  0000				theseclauses	dw	0 ; Kaantajan ihmeita?
     146				
     147 011C  00				RDATOM		DB	0 ; Readerin lippuja
     148				
     149 011D  0000				espsp		dw	0 ; Dosin antama SP-arvo?
     150				
     151 011F  0000				lastmem		dw	0
     152				
     153 0121  00				hex		db	0 ; Tulostus hexamuodossa-lippu
     154				
     155 0122  0124 R				FSYMBC		dw	FSYMBS ; Eka vapaa kaannetty muuttuja paikka
     156 0124  0BB8[				FSYMBS		dw	3000 dup (?) ; Kaannetyt muuttujat
     157	   ????			
     158			 ]	
     159				
     160				
     161 1894				DATASEG  ENDS
     162				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-4


     163				  
     164 0000				CODESEG SEGMENT para  'CODE'
     165				ASSUME cs:CODESEG,DS:DATASEG,SS:STACKSEG
     166				
     167				
     168				;============================== DXLISPIA =================================
     169				ELSE;=============================== NOKOLISPIA TAAS ========================
     170				
     171				msdos	macro	num
     172					mov	ah,num
     173					int	21h
     174					endm
     175				
     176				ENDIF;=====================================================================
     177				
     178 0000				loppu:
     179 = 0000				 NXTSBR = offset loppu
     180				
     181				; Lisp$subru - macrolla maaritellaan alkeisfunktioita, ne muodostavat
     182				; NXTSBR - muuttujien avulla ketjun, joka tulkitaan initialisointi-
     183				; vaiheessa.
     184				LISP$SUBRU MACRO NameOfSubru,howtocomp,ARG1
     185					CODEADDR = OFFSET $
     186				dataseg segment
     187					TEMPADDR = OFFSET $
     188					DW NXTSBR
     189					NXTSBR = TEMPADDR
     190					dw CODEADDR
     191					dw howtocomp
     192				  	DB NameOfSubru,0
     193				dataseg ends
     194					IFNB <ARG1>
     195					CALL	ARG1
     196					ENDIF
     197					ENDM   
     198				
     199				
     200 1894				dataseg segment
     201 1894  0000			     stackmark dw 0
     202 1896  0000			     throwtag dw 0
     203 1898				dataseg ends
     204				
     205				; Taman avulla tehdaan CATCH/THROW kehyksia
     206				FRAME	MACRO	EXIT_ADDRESS
     207					mov	di,offset EXIT_ADDRESS
     208					push	DI
     209					PUSH	[STACKMARK]
     210					MOV	[STACKMARK],SP
     211					ENDM
     212				
     213				; ================= 8080 - makroja: ===============================
     214				
     215				RZ	MACRO
     216					JNZ	$+3
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-5


     217					RET
     218					ENDM
     219				
     220				RNZ	MACRO
     221					JZ	$+3
     222					RET
     223					ENDM
     224				
     225				RC	MACRO
     226					JNC	$+3
     227					RET
     228					ENDM
     229				
     230				RNC	MACRO
     231					JC	$+3
     232					RET
     233					ENDM
     234				
     235				JMPN	MACRO TEST,ADDR
     236					J&TEST	$+5
     237					JMP	ADDR
     238					nop
     239					ENDM
     240				
     241				; === Lisp-primitiivien primitiiveja: =================================
     242				
     243 1898				dataseg segment
     244 1898  4E 6F 6B 6F 4C 69		handle_name		DB 'NokoLisp'
     245       73 70			
     246 18A0  00				EMS_ON			db 0
     247 18A1  0000				page_frame_segment	dw 0
     248 18A3  0000				emm_handle		DW 0
     249 18A5  FFFF				logical_page_number	dw 0FFFFH
     250 18A7				dataseg ends
     251				
     252 0000				ems_reset:
     253 0000  C7 06 18A5 R FFFF		mov	[logical_page_number],0FFFFH
     254 0006  C3				ret
     255 0007				mappage:
     256 0007  A3 18A5 R			MOV	[logical_page_number],AX
     257 000A  52				PUSH	DX
     258 000B  53				PUSH	BX
     259 000C  8B 16 18A3 R			MOV	DX,[emm_handle]		; load EMM handle
     260 0010  8B D8				MOV	BX,AX			; load logical page number
     261 0012  B0 00				MOV	AL,0			; load physical page number
     262 0014  B4 44				MOV	AH,44h			; load function code
     263 0016  CD 67				INT	67h			; call the memory manager
     264 0018  0A E4				OR	AH,AH			 ; check EMM status
     265					JMPN	Z,emm_err_handler	 ; jump to error handler on error
     266 001A  74 03                 1		JZ	$+5 
     267 001C  E9 01A2 R             1		JMP	emm_err_handler 
     268 001F  90                    1		nop 
     269 0020  5B				POP	BX
     270 0021  5A				POP	DX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-6


     271 0022  C3				RET
     272				
     273 0023				EMSADDR:
     274 0023  50				PUSH	AX
     275 0024  51				PUSH	CX
     276 0025  8B C7				Mov	AX,DI
     277 0027  B1 0B				MOV	CL,11
     278 0029  D3 C8				ROR	AX,CL
     279 002B  25 001F				AND	AX,1FH
     280 002E  3B 06 18A5 R			CMP	AX,[logical_page_number]
     281 0032  74 03				JZ	EMSADR2
     282 0034  E8 0007 R			CALL	MAPpage
     283 0037  B1 03			EMSADR2:MOV	CL,3
     284 0039  D3 C7				ROL	DI,CL
     285 003B  81 E7 3FF8			AND	DI,3FF8H
     286 003F  8E 06 18A1 R			MOV	ES,[page_frame_segment]
     287 0043  59				POP	CX
     288 0044  58				POP	AX
     289 0045  C3				RET
     290				
     291				;==============================
     292				EMSMAC	MACRO OFSET,REG,FROM,
     293					LOCAL	ei_ems
     294					IFDEF   FROM
     295					MOV     DI,FROM
     296					ENDIF
     297					CMP	[EMS_ON],0
     298					JZ	ei_ems
     299					IFDEF   FROM
     300					CALL	EMSADDR
     301					ENDIF
     302					MOV	REG&X,ES:[DI+OFSET]
     303					RET
     304				ei_ems:
     305					ENDM	
     306				
     307				newcrmac2 macro CR,OFSET,TO,FR
     308					local	ohi
     309					jmp	short ohi
     310				NEW&CR&TO&FR:
     311					EMSMAC	OFSET,TO,FR
     312					mov	ES,[CR&LOW]
     313					mov     TO&L,ES:[DI]
     314					mov	ES,[CR&HIG]
     315					mov	TO&H,ES:[DI]
     316					RET
     317				ohi:
     318					endm
     319				
     320				newcrmac macro CR,OFSET,TO,FR
     321					IFNDEF NEW&CR&TO&FR
     322					newcrmac2  CR,OFSET,TO,FR
     323					ELSEIF NEW&CR&TO&FR GT OFFSET $
     324					newcrmac2  CR,OFSET,TO,FR
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-7


     325					ENDIF
     326					CALL	NEW&CR&TO&FR
     327				endm
     328				
     329				CAR	MACRO   REG,FROM
     330					newcrmac CAR,4,REG,FROM	
     331					ENDM
     332				
     333				CDR	MACRO   REG,FROM
     334					newcrmac CDR,6,REG,FROM	
     335					ENDM
     336					   
     337				TYPEOF	MACRO  REG,FROM
     338					LOCAL	ei_ems,juu_ems
     339					IFDEF   FROM
     340					MOV     DI,FROM
     341					ENDIF
     342					CMP	[EMS_ON],0
     343					JZ	ei_ems
     344					IFDEF   FROM
     345					CALL	EMSADDR
     346					ENDIF
     347					jmp	short juu_ems
     348				ei_ems:
     349					mov	ES,[NODTYP]
     350				juu_ems:
     351					MOV	REG,ES:[DI]
     352					ENDM
     353				
     354				NEWRPL	MACRO   CR,REG,OFS
     355					local	ei_ems,juu_ems
     356					CMP	[EMS_ON],0
     357					JZ	ei_ems
     358					CALL	EMSADDR
     359					MOV	ES:[DI+OFS],REG&X
     360					JMP	SHORT juu_ems
     361				ei_ems:	mov	ES,[CR&LOW]
     362					mov     ES:[DI],REG&L
     363					mov	ES,[CR&HIG]
     364					mov	ES:[DI],REG&H
     365				juu_ems:
     366					ENDM
     367				
     368				RPLACA	MACRO   LISTA,REG
     369					MOV	DI,LISTA
     370					NEWRPL	CAR,REG,4
     371					ENDM
     372				
     373				RPLACD	MACRO   LISTA,REG
     374					MOV	DI,LISTA
     375					NEWRPL	CDR,REG,6
     376					ENDM
     377				
     378				SETTYPE	MACRO   OLIO,VAL
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-8


     379					LOCAL	ei_ems,juu_ems
     380					MOV     DI,OLIO
     381					MOV	DL,VAL
     382					CMP	[EMS_ON],0
     383					JZ	ei_ems
     384					CALL	EMSADDR
     385					jmp	short juu_ems
     386				ei_ems:
     387					mov	ES,[NODTYP]
     388				juu_ems:
     389					MOV     ES:[DI],DL
     390					ENDM
     391				
     392				lisp$subru 'use-EMS',cnoarg
     393 18A7                        1	dataseg segment 
     394 18A7  0000 R                1		DW NXTSBR 
     395 18A9  0046 R                1		dw CODEADDR 
     396 18AB  3B6F R                1		dw cnoarg 
     397 18AD  75 73 65 2D 45 4D     1	  	DB 'use-EMS',0 
     398 18B5                        1	dataseg ends 
     399 0046  80 3E 18A0 R 00			cmp	[EMS_ON],0
     400					JMPN	Z,TRET
     401 004B  74 03                 1		JZ	$+5 
     402 004D  E9 019E R             1		JMP	TRET 
     403 0050  90                    1		nop 
     404 0051  33 C0				XOR	AX,AX
     405 0053  8E C0				MOV	ES,AX
     406 0055  26: A1 019C			MOV	AX, ES:19CH 
     407 0059  26: 0B 06 019E			OR	AX, ES:19EH
     408					JMPN	NZ,NILRET
     409 005E  75 03                 1		JNZ	$+5 
     410 0060  E9 019A R             1		JMP	NILRET 
     411 0063  90                    1		nop 
     412 0064  B4 40				MOV	AH,40h			 ; load function code
     413 0066  CD 67				INT	67h			 ; call the memory manager
     414 0068  0A E4				OR	AH,AH			 ; check EMM status
     415					JMPN	Z,NILRET		 ; jump to error handler on error
     416 006A  74 03                 1		JZ	$+5 
     417 006C  E9 019A R             1		JMP	NILRET 
     418 006F  90                    1		nop 
     419				
     420 0070  B4 41				MOV	AH,41h			 ; load function code
     421 0072  CD 67				INT	67h			 ; call the memory manager
     422 0074  0A E4				OR	AH,AH			 ; check EMM status
     423					JMPN	Z,NILRET		 ; jump to error handler on error
     424 0076  74 03                 1		JZ	$+5 
     425 0078  E9 019A R             1		JMP	NILRET 
     426 007B  90                    1		nop 
     427 007C  89 1E 18A1 R			MOV	[page_frame_segment],BX	   ; save page frame address
     428				
     429 0080  BB 0022				MOV	BX,34			; load number of pages
     430 0083  B4 43				MOV	AH,43h			 ; load function code
     431 0085  CD 67				INT	67h			 ; call the memory manager
     432 0087  0A E4				OR	AH,AH			 ; check EMM status
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-9


     433					JMPN	Z,NILRET		 ; jump to error handler on error
     434 0089  74 03                 1		JZ	$+5 
     435 008B  E9 019A R             1		JMP	NILRET 
     436 008E  90                    1		nop 
     437 008F  89 16 18A3 R			MOV	emm_handle,DX		 ; save EMM handle
     438				
     439 0093  B9 FFFF				mov	CX,-1
     440 0096  41			SIIRTO:	INC	CX
     441 0097  51				PUSH	CX
     442 0098  C6 06 18A0 R 00			Mov	EMS_ON,0
     443					TYPEOF	dl,CX
     444 009D  8B F9                 1		MOV     DI,CX 
     445 009F  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     446 00A4  74 05                 1		JZ	??0000 
     447 00A6  E8 0023 R             1		CALL	EMSADDR 
     448 00A9  EB 04                 1		jmp	short ??0001 
     449 00AB                        1	??0000: 
     450 00AB  8E 06 0100 R          1		mov	ES,[NODTYP] 
     451 00AF                        1	??0001: 
     452 00AF  26: 8A 15             1		MOV	dl,ES:[DI] 
     453					CAR	A,CX
     454 00B2  EB 20                 3		jmp	short ??0002 
     455 00B4                        3	NEWCARACX: 
     456 00B4  8B F9                 4		MOV     DI,CX 
     457 00B6  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
     458 00BB  74 08                 4		JZ	??0003 
     459 00BD  E8 0023 R             4		CALL	EMSADDR 
     460 00C0  26: 8B 45 04          4		MOV	AX,ES:[DI+4] 
     461 00C4  C3                    4		RET 
     462 00C5                        4	??0003: 
     463 00C5  8E 06 0102 R          3		mov	ES,[CARLOW] 
     464 00C9  26: 8A 05             3		mov     AL,ES:[DI] 
     465 00CC  8E 06 0104 R          3		mov	ES,[CARHIG] 
     466 00D0  26: 8A 25             3		mov	AH,ES:[DI] 
     467 00D3  C3                    3		RET 
     468 00D4                        3	??0002: 
     469 00D4  E8 00B4 R             2		CALL	NEWCARACX 
     470					CDR	B,CX
     471 00D7  EB 20                 3		jmp	short ??0004 
     472 00D9                        3	NEWCDRBCX: 
     473 00D9  8B F9                 4		MOV     DI,CX 
     474 00DB  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
     475 00E0  74 08                 4		JZ	??0005 
     476 00E2  E8 0023 R             4		CALL	EMSADDR 
     477 00E5  26: 8B 5D 06          4		MOV	BX,ES:[DI+6] 
     478 00E9  C3                    4		RET 
     479 00EA                        4	??0005: 
     480 00EA  8E 06 0106 R          3		mov	ES,[CDRLOW] 
     481 00EE  26: 8A 1D             3		mov     BL,ES:[DI] 
     482 00F1  8E 06 0108 R          3		mov	ES,[CDRHIG] 
     483 00F5  26: 8A 3D             3		mov	BH,ES:[DI] 
     484 00F8  C3                    3		RET 
     485 00F9                        3	??0004: 
     486 00F9  E8 00D9 R             2		CALL	NEWCDRBCX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-10


     487 00FC  C6 06 18A0 R FF			MOV	EMS_ON,0FFH
     488					SETTYPE CX,dl
     489 0101  8B F9                 1		MOV     DI,CX 
     490 0103  8A D2                 1		MOV	DL,dl 
     491 0105  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     492 010A  74 05                 1		JZ	??0006 
     493 010C  E8 0023 R             1		CALL	EMSADDR 
     494 010F  EB 04                 1		jmp	short ??0007 
     495 0111                        1	??0006: 
     496 0111  8E 06 0100 R          1		mov	ES,[NODTYP] 
     497 0115                        1	??0007: 
     498 0115  26: 88 15             1		MOV     ES:[DI],DL 
     499					RPLACA	CX,A
     500 0118  8B F9                 1		MOV	DI,CX 
     501 011A  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
     502 011F  74 09                 2		JZ	??0008 
     503 0121  E8 0023 R             2		CALL	EMSADDR 
     504 0124  26: 89 45 04          2		MOV	ES:[DI+4],AX 
     505 0128  EB 0E                 2		JMP	SHORT ??0009 
     506 012A  8E 06 0102 R          2	??0008:	mov	ES,[CARLOW] 
     507 012E  26: 88 05             2		mov     ES:[DI],AL 
     508 0131  8E 06 0104 R          2		mov	ES,[CARHIG] 
     509 0135  26: 88 25             2		mov	ES:[DI],AH 
     510 0138                        2	??0009: 
     511					RPLACD	CX,B
     512 0138  8B F9                 1		MOV	DI,CX 
     513 013A  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
     514 013F  74 09                 2		JZ	??000A 
     515 0141  E8 0023 R             2		CALL	EMSADDR 
     516 0144  26: 89 5D 06          2		MOV	ES:[DI+6],BX 
     517 0148  EB 0E                 2		JMP	SHORT ??000B 
     518 014A  8E 06 0106 R          2	??000A:	mov	ES,[CDRLOW] 
     519 014E  26: 88 1D             2		mov     ES:[DI],BL 
     520 0151  8E 06 0108 R          2		mov	ES,[CDRHIG] 
     521 0155  26: 88 3D             2		mov	ES:[DI],BH 
     522 0158                        2	??000B: 
     523 0158  59				POP	CX
     524 0159  3B 0E 010A R			CMP	CX,[LASTNODE]
     525					JMPN	Z,SIIRTO
     526 015D  74 03                 1		JZ	$+5 
     527 015F  E9 0096 R             1		JMP	SIIRTO 
     528 0162  90                    1		nop 
     529				
     530 0163  C7 06 010A R FFFE		MOV	[LASTNODE],0FFFEH
     531				
     532 0169  A1 0100 R			MOV	AX,[NODTYP]
     533 016C  A3 011F R			MOV	[LASTMEM],AX
     534				
     535 016F  BE 1898 R			MOV	SI,Offset handle_name	 ; DS:SI points to handle_name
     536 0172  8B 16 18A3 R			MOV	DX,emm_handle		 ; specify EMM handle
     537 0176  B8 5301				MOV	AX,5301h		 ; load function code
     538 0179  CD 67				INT	67h			 ; call the memory manager
     539 017B  B4 4B				MOV	AH,4Bh			      ; load function code
     540 017D  CD 67				INT	67h			      ; call the memory manger
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-11


     541 017F  0A E4				OR	AH,AH			      ; check EMM status
     542					JMPN	Z,NILRET		 ; jump to error handler on error
     543 0181  74 03                 1		JZ	$+5 
     544 0183  EB 15 90              1		JMP	NILRET 
     545 0186  90                    1		nop 
     546 0187  8B C3				MOV	AX,BX	   
     547 0189  E9 05C9 R			JMP	MAKNUM
     548				
     549				CAR$CDR	MACRO	RCAR,RCDR,R2
     550					CAR	RCAR,R2
     551					CDR     RCDR
     552					ENDM
     553				
     554				J$ATOM  MACRO  REG,TO
     555					CMP	REG,FSTNODE
     556					JMPN	NC,TO
     557					TYPEOF  DL,REG
     558					CMP	DL,LIST
     559					JMPN	Z,TO
     560					ENDM
     561				
     562				R$ATOM	MACRO	REG
     563					CMP	REG,FSTNODE
     564					RC
     565					TYPEOF  DL,REG
     566					CMP	DL,LIST
     567					RNZ
     568					ENDM
     569				
     570				J$NIL	MACRO	REG,ADDR
     571					CMP	REG,0
     572					Jmpn	nZ,ADDR
     573					ENDM
     574				
     575				R$NIL	MACRO	REG
     576					CMP	REG,0
     577					RZ
     578					ENDM
     579				
     580				
     581				JN$NIL	MACRO	REG,ADDR
     582					CMP	REG,0
     583					JmpN	Z,ADDR
     584					ENDM
     585				
     586				; Suorita NZ,Z etc-testaus palauta T tai NIL
     587				TEST$RESU	macro	test
     588					mov	ax,1
     589					j&test	$+3
     590					dec	ax
     591					ret
     592					endm
     593				
     594				; Tulosta BX-osoittama merkkijono
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-12


     595 018C  8A 17			PRINTS:	MOV	DL,[BX]
     596 018E  80 FA 00				CMP	DL,0
     597					RZ
     598 0191  75 01                 1		JNZ	$+3 
     599 0193  C3                    1		RET 
     600 0194  E8 2882 R			CALL	PRINTC
     601 0197  43				INC	BX
     602 0198  EB F2				JMP	PRINTS
     603				
     604				; priths 'paata saarkee'
     605				PRITHS	MACRO	STR
     606				dataseg segment
     607					tempaddr =  $
     608					DB STR,0
     609				dataseg ends
     610					push	bx
     611					mov	bx,offset tempaddr
     612					CALL	PRINTS
     613					pop	bx
     614					ENDM 
     615				
     616 019A  B8 0000			NILRET:	MOV 	AX,NIL
     617 019D  C3				RET
     618 019E  B8 0001			TRET:	MOV	AX,T
     619 01A1  C3				RET
     620				
     621				WHEN    MACRO WHAT,ADDR
     622					CMP	DL,WHAT
     623					JMPN	NZ,ADDR
     624					ENDM
     625				
     626				; =========== Lisp Error =============================
     627 18B5				dataseg segment
     628 18B5  0000				erheen_syy dw 0
     629 18B7				dataseg ends
     630				LISP$ERROR macro str
     631					dataseg segment
     632					   tempaddr = $
     633					   db str,0
     634					dataseg ends
     635					mov	[throwtag],nil
     636					MOV	BX,OFFSET tempaddr
     637					mov	[erheen_syy],bx
     638					call	ERHE
     639					ret
     640				endm
     641 01A2				emm_err_handler:
     642					LISP$ERROR 'FATAL EMS-ERROR'
     643 18B7                        1		dataseg segment 
     644 18B7  46 41 54 41 4C 20     1		   db 'FATAL EMS-ERROR',0 
     645 18C7                        1		dataseg ends 
     646 01A2  C7 06 1896 R 0000     1		mov	[throwtag],nil 
     647 01A8  BB 18B7 R             1		MOV	BX,OFFSET tempaddr 
     648 01AB  89 1E 18B5 R          1		mov	[erheen_syy],bx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-13


     649 01AF  E8 4044 R             1		call	ERHE 
     650 01B2  C3                    1		ret 
     651				
     652				;=====================================================================
     653				;=== Compileri macrot
     654				
     655				; Generoi 'CALL'
     656				
     657				COCALL	MACRO	what,str
     658					local	skp
     659					mov	ax,offset what
     660					call	ccall 
     661					mov	dl,[codebug]
     662					cmp	dl,0
     663					jz	skp
     664					priths '	; CALL '
     665					priths	str
     666				skp:
     667					endm
     668				
     669				; Mika tahansa kama, paitsi relatiiviset jutut, voidaa kaantaa
     670				; COMPIL-makron avulla.
     671				COMPIL	MACRO	NumberOfBytes,Instruction,HowToWrite
     672					local	addr
     673					local	ohi
     674				DATASEG	SEGMENT
     675					STRA =  $
     676					DB HowToWrite,0
     677				DATASEG ENDS
     678					push	cx
     679					PUSH	BX
     680					IF	NumberOfBytes 
     681					mov	cx,NumberOfBytes
     682					ELSE
     683					MOV	CX,offset (OHI-ADDR)
     684					ENDif
     685					mov	si,offset addr
     686					MOV	BX,offset STRA
     687					call	maccod
     688					POP	BX
     689					pop	cx
     690					jmp	ohi
     691				addr:	Instruction
     692				ohi:
     693					ENDM
     694				
     695				comptext macro str
     696					local 	ohi
     697					mov	dl,[codebug]
     698					cmp	dl,0
     699					jz	ohi
     700					priths	str
     701				ohi:
     702					endm
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-14


     703				
     704				
     705				;========================================================================
     706				;============== ROSKIEN KERUU
     707				;=== "Symboli, jonka arvo NIL, ja johon kukaan ei viittaa, poistetaan."
     708				
     709				; datojen merkkaus:
     710 01B3  3D 0300			MARK:	cmp	ax,fstnode ; 
     711					rc
     712 01B6  73 01                 1		JNC	$+3 
     713 01B8  C3                    1		RET 
     714 01B9  3B 06 010A R			cmp	ax,[lastnode]
     715					rnc
     716 01BD  72 01                 1		JC	$+3 
     717 01BF  C3                    1		RET 
     718					TYPEOF	DL,AX
     719 01C0  8B F8                 1		MOV     DI,AX 
     720 01C2  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     721 01C7  74 05                 1		JZ	??000C 
     722 01C9  E8 0023 R             1		CALL	EMSADDR 
     723 01CC  EB 04                 1		jmp	short ??000D 
     724 01CE                        1	??000C: 
     725 01CE  8E 06 0100 R          1		mov	ES,[NODTYP] 
     726 01D2                        1	??000D: 
     727 01D2  26: 8A 15             1		MOV	DL,ES:[DI] 
     728 01D5  F6 C2 10				TEST	DL,GARBA
     729					RZ
     730 01D8  75 01                 1		JNZ	$+3 
     731 01DA  C3                    1		RET 
     732 01DB  80 E2 EF				AND	DL,NOT GARBA
     733 01DE  26: 88 15			MOV	ES:[DI],DL
     734					WHEN	LIST,MARKLIST
     735 01E1  80 FA 0F              1		CMP	DL,LIST 
     736 01E4  75 03                 2		JNZ	$+5 
     737 01E6  EB 40 90              2		JMP	MARKLIST 
     738 01E9  90                    2		nop 
     739					WHEN	SYMBOL,MARKTAIL
     740 01EA  80 FA 05              1		CMP	DL,SYMBOL 
     741 01ED  75 03                 2		JNZ	$+5 
     742 01EF  EB 15 90              2		JMP	MARKTAIL 
     743 01F2  90                    2		nop 
     744					WHEN	FSYMBO,MARKTAIL
     745 01F3  80 FA 06              1		CMP	DL,FSYMBO 
     746 01F6  75 03                 2		JNZ	$+5 
     747 01F8  EB 0C 90              2		JMP	MARKTAIL 
     748 01FB  90                    2		nop 
     749					WHEN	STRING,MARKTAIL
     750 01FC  80 FA 04              1		CMP	DL,STRING 
     751 01FF  75 03                 2		JNZ	$+5 
     752 0201  EB 03 90              2		JMP	MARKTAIL 
     753 0204  90                    2		nop 
     754 0205  C3				RET
     755 0206				MARKTAIL:
     756					CDR	A
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-15


     757 0206  EB 1B                 3		jmp	short ??000E 
     758 0208                        3	NEWCDRA: 
     759 0208  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
     760 020D  74 05                 4		JZ	??000F 
     761 020F  26: 8B 45 06          4		MOV	AX,ES:[DI+6] 
     762 0213  C3                    4		RET 
     763 0214                        4	??000F: 
     764 0214  8E 06 0106 R          3		mov	ES,[CDRLOW] 
     765 0218  26: 8A 05             3		mov     AL,ES:[DI] 
     766 021B  8E 06 0108 R          3		mov	ES,[CDRHIG] 
     767 021F  26: 8A 25             3		mov	AH,ES:[DI] 
     768 0222  C3                    3		RET 
     769 0223                        3	??000E: 
     770 0223  E8 0208 R             2		CALL	NEWCDRA 
     771 0226  EB 8B				JMP	MARK	
     772 0228				MARKLIST:
     773					CDR	B
     774 0228  EB 1B                 3		jmp	short ??0010 
     775 022A                        3	NEWCDRB: 
     776 022A  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
     777 022F  74 05                 4		JZ	??0011 
     778 0231  26: 8B 5D 06          4		MOV	BX,ES:[DI+6] 
     779 0235  C3                    4		RET 
     780 0236                        4	??0011: 
     781 0236  8E 06 0106 R          3		mov	ES,[CDRLOW] 
     782 023A  26: 8A 1D             3		mov     BL,ES:[DI] 
     783 023D  8E 06 0108 R          3		mov	ES,[CDRHIG] 
     784 0241  26: 8A 3D             3		mov	BH,ES:[DI] 
     785 0244  C3                    3		RET 
     786 0245                        3	??0010: 
     787 0245  E8 022A R             2		CALL	NEWCDRB 
     788 0248  53				PUSH	BX
     789					CAR	A
     790 0249  EB 1B                 3		jmp	short ??0012 
     791 024B                        3	NEWCARA: 
     792 024B  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
     793 0250  74 05                 4		JZ	??0013 
     794 0252  26: 8B 45 04          4		MOV	AX,ES:[DI+4] 
     795 0256  C3                    4		RET 
     796 0257                        4	??0013: 
     797 0257  8E 06 0102 R          3		mov	ES,[CARLOW] 
     798 025B  26: 8A 05             3		mov     AL,ES:[DI] 
     799 025E  8E 06 0104 R          3		mov	ES,[CARHIG] 
     800 0262  26: 8A 25             3		mov	AH,ES:[DI] 
     801 0265  C3                    3		RET 
     802 0266                        3	??0012: 
     803 0266  E8 024B R             2		CALL	NEWCARA 
     804 0269  E8 01B3 R			CALL	MARK
     805 026C  58				POP	aX
     806 026D  E9 01B3 R			JMP	MARK
     807				
     808				; Roskienkeruu:
     809 0270				GARCOL:
     810				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-16


     811				IFNDEF	DXLISP ; IBM:ssa tulee tammonen piippi aina roskienkeruun alussa
     812 0270  BA 0005				mov	dx,5
     813 0273  E4 61				in	al,61h
     814 0275  24 FE				and	al,11111110b
     815 0277  0C 02			peeppi:	or	al,10b
     816 0279  E6 61				out	61h,al
     817 027B  B9 0064				mov	cx,100
     818 027E  E2 FE			fh:	loop	fh
     819 0280  24 FD				and	al,11111101b
     820 0282  E6 61				out	61h,al
     821 0284  B9 0064				mov	cx,100
     822 0287  E2 FE			sh:	loop	sh
     823 0289  4A				dec	dx
     824 028A  75 EB				jnz	peeppi
     825				ENDIF
     826				
     827				; Ensiks kaikki roskiksi
     828 028C  B8 0300				mov	ax,FSTNODE
     829 028F				EMPTY:	TYPEOF	DL,AX
     830 028F  8B F8                 1		MOV     DI,AX 
     831 0291  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     832 0296  74 05                 1		JZ	??0014 
     833 0298  E8 0023 R             1		CALL	EMSADDR 
     834 029B  EB 04                 1		jmp	short ??0015 
     835 029D                        1	??0014: 
     836 029D  8E 06 0100 R          1		mov	ES,[NODTYP] 
     837 02A1                        1	??0015: 
     838 02A1  26: 8A 15             1		MOV	DL,ES:[DI] 
     839 02A4  80 CA 10				OR	DL,GARBA
     840 02A7  26: 88 15			MOV	ES:[DI],dl
     841 02AA  40				INC	ax
     842 02AB  3B 06 010A R			cmp	ax,[lastnode]
     843 02AF  75 DE				jnz	empty
     844				
     845				; Sitten aletaan etsia datoja
     846 02B1  A1 010C R			MOV	AX,[OBLIST]
     847				
     848 02B4				MARKO1:	J$NIL	AX,MOBDON
     849 02B4  3D 0000               1		CMP	AX,0 
     850 02B7  75 03                 2		JnZ	$+5 
     851 02B9  EB 22 90              2		JMP	MOBDON 
     852 02BC  90                    2		nop 
     853					TYPEOF	DL,AX
     854 02BD  8B F8                 1		MOV     DI,AX 
     855 02BF  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     856 02C4  74 05                 1		JZ	??0016 
     857 02C6  E8 0023 R             1		CALL	EMSADDR 
     858 02C9  EB 04                 1		jmp	short ??0017 
     859 02CB                        1	??0016: 
     860 02CB  8E 06 0100 R          1		mov	ES,[NODTYP] 
     861 02CF                        1	??0017: 
     862 02CF  26: 8A 15             1		MOV	DL,ES:[DI] 
     863 02D2  80 E2 EF				AND	DL,NOT GARBA
     864 02D5  26: 88 15			MOV	ES:[DI],DL
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-17


     865					CDR	A
     866 02D8  E8 0208 R             2		CALL	NEWCDRA 
     867 02DB  EB D7				JMP	MARKO1
     868				
     869 02DD  A1 010C R		MOBDON:	MOV	AX,[OBLIST]
     870 02E0				MARKO2:	J$NIL	AX,MOBDO2
     871 02E0  3D 0000               1		CMP	AX,0 
     872 02E3  75 03                 2		JnZ	$+5 
     873 02E5  EB 66 90              2		JMP	MOBDO2 
     874 02E8  90                    2		nop 
     875					CAR$CDR	A,B,AX
     876 02E9  EB 20                 4		jmp	short ??0018 
     877 02EB                        4	NEWCARAAX: 
     878 02EB  8B F8                 5		MOV     DI,AX 
     879 02ED  80 3E 18A0 R 00       5		CMP	[EMS_ON],0 
     880 02F2  74 08                 5		JZ	??0019 
     881 02F4  E8 0023 R             5		CALL	EMSADDR 
     882 02F7  26: 8B 45 04          5		MOV	AX,ES:[DI+4] 
     883 02FB  C3                    5		RET 
     884 02FC                        5	??0019: 
     885 02FC  8E 06 0102 R          4		mov	ES,[CARLOW] 
     886 0300  26: 8A 05             4		mov     AL,ES:[DI] 
     887 0303  8E 06 0104 R          4		mov	ES,[CARHIG] 
     888 0307  26: 8A 25             4		mov	AH,ES:[DI] 
     889 030A  C3                    4		RET 
     890 030B                        4	??0018: 
     891 030B  E8 02EB R             3		CALL	NEWCARAAX 
     892 030E  E8 022A R             3		CALL	NEWCDRB 
     893 0311  53				PUSH	BX
     894					CAR	A,AX
     895 0312  E8 02EB R             2		CALL	NEWCARAAX 
     896					JN$NIL	AX,DOMARK
     897 0315  3D 0000               1		CMP	AX,0 
     898 0318  74 03                 2		JZ	$+5 
     899 031A  EB 05 90              2		JMP	DOMARK 
     900 031D  90                    2		nop 
     901 031E  58			MARKO3:	POP	AX
     902 031F  EB BF				JMP	MARKO2
     903 0321				DOMARK:
     904					TYPEOF	DL
     905 0321  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     906 0326  74 02                 1		JZ	??001A 
     907 0328  EB 04                 1		jmp	short ??001B 
     908 032A                        1	??001A: 
     909 032A  8E 06 0100 R          1		mov	ES,[NODTYP] 
     910 032E                        1	??001B: 
     911 032E  26: 8A 15             1		MOV	DL,ES:[DI] 
     912 0331  80 E2 EF				AND	DL,NOT GARBA
     913 0334  26: 88 15			MOV	ES:[DI],DL
     914					CDR	B
     915 0337  E8 022A R             2		CALL	NEWCDRB 
     916 033A  53				PUSH	BX
     917 033B  80 FA 06				cmp	dl,fsymbo
     918 033E  75 04				jnz	nofsym
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-18


     919 0340  8B D8				mov	bx,ax
     920 0342  8B 07				mov	ax,[bX]
     921 0344  E8 01B3 R		nofsym:	CALL	MARK
     922 0347  58				POP	AX
     923 0348  E8 01B3 R			CALL	MARK
     924 034B  EB D1				JMP	MARKO3
     925 034D				MOBDO2:
     926 034D  8B EC				MOV	Bp,SP
     927 034F				MARKSP:
     928				
     929				ELSE
     930 034F  81 FD 4E20 R			CMP	Bp,offset topofstack
     931				ENDIF
     932				
     933 0353  74 0C				JZ	EMRKSP
     934 0355  8B 46 00			MARKS2:	MOV     AX,[bp]
     935 0358  55				PUSH	Bp
     936 0359  E8 01B3 R			CALL	MARK
     937 035C  5D				POP	Bp
     938 035D  45				INC	Bp
     939 035E  45				INC	Bp
     940 035F  EB EE				JMP	MARKSP
     941 0361				EMRKSP:
     942 0361  A1 0110 R			MOV	AX,[ARGSTA]
     943 0364  E8 01B3 R			CALL	MARK
     944 0367  A1 0112 R			MOV	AX,[ENVIRO]
     945 036A  E8 01B3 R			CALL	MARK
     946 036D  A1 0114 R			MOV	AX,[TRACE]
     947 0370  E8 01B3 R			CALL	MARK
     948 0373  A1 0118 R			MOV	AX,[MACDAT]
     949 0376  E8 01B3 R			CALL	MARK
     950 0379  A1 011A R			mov	ax,[theseclauses]
     951 037C  E8 01B3 R			call	mark
     952 037F  A1 010C R			MOV	AX,[OBLIST]
     953 0382  E8 0495 R			CALL	FREEOBL
     954 0385  A3 010C R			MOV	[OBLIST],AX
     955 0388  B9 0000				mov	cx,0
     956 038B  BB 0000				mov	bx,nil
     957 038E  B8 0300				MOV	aX,FSTNODE
     958 0391				VARMA:	TYPEOF	DL,AX
     959 0391  8B F8                 1		MOV     DI,AX 
     960 0393  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
     961 0398  74 05                 1		JZ	??001C 
     962 039A  E8 0023 R             1		CALL	EMSADDR 
     963 039D  EB 04                 1		jmp	short ??001D 
     964 039F                        1	??001C: 
     965 039F  8E 06 0100 R          1		mov	ES,[NODTYP] 
     966 03A3                        1	??001D: 
     967 03A3  26: 8A 15             1		MOV	DL,ES:[DI] 
     968 03A6  F6 C2 10				TEST	DL,GARBA
     969 03A9  74 23				JZ	VARMA2
     970					rplacd	ax,b
     971 03AB  8B F8                 1		MOV	DI,ax 
     972 03AD  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-19


     973 03B2  74 09                 2		JZ	??001E 
     974 03B4  E8 0023 R             2		CALL	EMSADDR 
     975 03B7  26: 89 5D 06          2		MOV	ES:[DI+6],bX 
     976 03BB  EB 0E                 2		JMP	SHORT ??001F 
     977 03BD  8E 06 0106 R          2	??001E:	mov	ES,[CDRLOW] 
     978 03C1  26: 88 1D             2		mov     ES:[DI],bL 
     979 03C4  8E 06 0108 R          2		mov	ES,[CDRHIG] 
     980 03C8  26: 88 3D             2		mov	ES:[DI],bH 
     981 03CB                        2	??001F: 
     982 03CB  8B D8				mov	bx,ax
     983 03CD  41				inc	cx
     984 03CE  40			varma2:	inc	ax
     985 03CF  3B 06 010A R			cmp	ax,[lastnode]
     986 03D3  75 BC				jnz	varma
     987 03D5  89 1E 010E R			mov	[freelist],bx
     988 03D9  81 F9 03E8			cmp	cx,1000
     989 03DD  72 0A				jc	outofm1
     990 03DF  C3				ret
     991				
     992				lisp$subru 'more-memory',cantcomp
     993 18C7                        1	dataseg segment 
     994 18C7  18A7 R                1		DW NXTSBR 
     995 18C9  03E0 R                1		dw CODEADDR 
     996 18CB  3B6A R                1		dw cantcomp 
     997 18CD  6D 6F 72 65 2D 6D     1	  	DB 'more-memory',0 
     998 18D9                        1	dataseg ends 
     999 03E0  E8 03E9 R			call	outofm1
    1000 03E3  A1 011F R			mov	ax,[lastmem]
    1001 03E6  E9 05C9 R			jmp	maknum
    1002				
    1003				
    1004 03E9				OUTOFM1:
    1005 03E9  A1 010A R			mov	ax,[lastnode] ; esim 16
    1006 03EC  A9 8000				test	ax,8000H
    1007					jmpn	z,outofmem
    1008 03EF  74 03                 1		Jz	$+5 
    1009 03F1  E9 0481 R             1		JMP	outofmem 
    1010 03F4  90                    1		nop 
    1011 03F5  D1 E8				shr	ax,1
    1012 03F7  D1 E8				shr	ax,1
    1013 03F9  8B D8				mov	bx,ax ; 4
    1014 03FB  D1 E8				shr	ax,1
    1015 03FD  D1 E8				shr	ax,1 ; 1
    1016 03FF  03 D8				add	bx,ax ; 5
    1017 0401  03 1E 011F R			add	bx,[lastmem]
    1018 0405  53				push	bx
    1019 0406  A1 011D R			mov	ax,[espsp]
    1020 0409  8E C0				mov	es,ax
    1021 040B  2B D8				sub	bx,ax
    1022					msdos	4ah
    1023 040D  B4 4A                 1		mov	ah,4ah 
    1024 040F  CD 21                 1		int	21h 
    1025 0411  73 0D				jnc	con2
    1026 0413  5B				pop	bx
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-20


    1027 0414  3D 0008				cmp	ax,8
    1028					jmpn	nz,outofmem
    1029 0417  75 03                 1		Jnz	$+5 
    1030 0419  EB 66 90              1		JMP	outofmem 
    1031 041C  90                    1		nop 
    1032 041D  E9 3E78 R			jmp	stbler
    1033				
    1034 0420  8F 06 011F R		con2:	pop	[lastmem]
    1035 0424  A1 010A R			mov	ax,[lastnode] ; esim 16
    1036 0427  D1 E8				shr	ax,1	; 8 
    1037 0429  D1 E8				shr	ax,1	; 4
    1038 042B  FC				cld
    1039 042C  8B 1E 0108 R			mov	bx,[cdrhig] ; source
    1040 0430  E8 0469 R			call	sipa
    1041 0433  89 1E 0108 R			mov	[cdrhig],bx
    1042 0437  D1 E8				shr	ax,1	; 2
    1043 0439  8B D0				mov	dx,ax
    1044 043B  D1 E8				shr	ax,1	; 1
    1045 043D  03 C2				add	ax,dx	; 3
    1046 043F  8B 1E 0106 R			mov	bx,[cdrlow] ; source
    1047 0443  E8 0469 R			call	sipa
    1048 0446  89 1E 0106 R			mov	[cdrlow],bx
    1049 044A  8B C2				mov	ax,dx	; 2
    1050 044C  8B 1E 0104 R			mov	bx,[carhig] ; source
    1051 0450  E8 0469 R			call	sipa
    1052 0453  89 1E 0104 R			mov	[carhig],bx
    1053 0457  D1 E8				shr	ax,1	; 1
    1054 0459  8B 1E 0102 R			mov	bx,[carlow] ; source
    1055 045D  E8 0469 R			call	sipa
    1056 0460  89 1E 0102 R			mov	[carlow],bx
    1057 0464  D1 26 010A R			shl	[lastnode],1
    1058 0468  C3				ret
    1059				
    1060 0469  8B 0E 010A R		sipa:	mov	cx,[lastnode]  ; counteri
    1061 046D  8E DB				mov	ds,bx
    1062 046F  03 D8				add	bx,ax
    1063 0471  8E C3				mov	es,bx
    1064 0473  BF 0000				mov	di,0
    1065 0476  BE 0000				mov	si,0
    1066 0479  F3/ A4				rep	movsb
    1067 047B  2E: 8E 1E 3F4D R			mov	ds,cs:[cs_dataseg]
    1068 0480  C3				ret
    1069				
    1070 0481				outofmem:
    1071					priths	<13,10,'More Memory?'>
    1072 18D9                        1	dataseg segment 
    1073 18D9  0D 0A 4D 6F 72 65     1		DB 13,10,'More Memory?',0 
    1074 18E8                        1	dataseg ends 
    1075 0481  53                    1		push	bx 
    1076 0482  BB 18D9 R             1		mov	bx,offset tempaddr 
    1077 0485  E8 018C R             1		CALL	PRINTS 
    1078 0488  5B                    1		pop	bx 
    1079 0489  B8 0000				MOV	AX,nil
    1080 048C  C3				ret
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-21


    1081				
    1082				
    1083				LISP$SUBRU	'reclaim',cnoarg
    1084 18E8                        1	dataseg segment 
    1085 18E8  18C7 R                1		DW NXTSBR 
    1086 18EA  048D R                1		dw CODEADDR 
    1087 18EC  3B6F R                1		dw cnoarg 
    1088 18EE  72 65 63 6C 61 69     1	  	DB 'reclaim',0 
    1089 18F6                        1	dataseg ends 
    1090 048D  E8 0270 R		RECLAIM:CALL	GARCOL
    1091 0490  8B C1				MOV	AX,CX
    1092 0492  E9 05C9 R			jmp	maknum
    1093				
    1094				; Tassa putsataan OBLISTi roskista
    1095 0495				FREEOBL:R$NIL	AX
    1096 0495  3D 0000               1		CMP	AX,0 
    1097 0498  75 01                 2		JNZ	$+3 
    1098 049A  C3                    2		RET 
    1099					CAR$CDR	B,C,AX
    1100 049B  EB 20                 4		jmp	short ??0020 
    1101 049D                        4	NEWCARBAX: 
    1102 049D  8B F8                 5		MOV     DI,AX 
    1103 049F  80 3E 18A0 R 00       5		CMP	[EMS_ON],0 
    1104 04A4  74 08                 5		JZ	??0021 
    1105 04A6  E8 0023 R             5		CALL	EMSADDR 
    1106 04A9  26: 8B 5D 04          5		MOV	BX,ES:[DI+4] 
    1107 04AD  C3                    5		RET 
    1108 04AE                        5	??0021: 
    1109 04AE  8E 06 0102 R          4		mov	ES,[CARLOW] 
    1110 04B2  26: 8A 1D             4		mov     BL,ES:[DI] 
    1111 04B5  8E 06 0104 R          4		mov	ES,[CARHIG] 
    1112 04B9  26: 8A 3D             4		mov	BH,ES:[DI] 
    1113 04BC  C3                    4		RET 
    1114 04BD                        4	??0020: 
    1115 04BD  E8 049D R             3		CALL	NEWCARBAX 
    1116 04C0  EB 1B                 4		jmp	short ??0022 
    1117 04C2                        4	NEWCDRC: 
    1118 04C2  80 3E 18A0 R 00       5		CMP	[EMS_ON],0 
    1119 04C7  74 05                 5		JZ	??0023 
    1120 04C9  26: 8B 4D 06          5		MOV	CX,ES:[DI+6] 
    1121 04CD  C3                    5		RET 
    1122 04CE                        5	??0023: 
    1123 04CE  8E 06 0106 R          4		mov	ES,[CDRLOW] 
    1124 04D2  26: 8A 0D             4		mov     CL,ES:[DI] 
    1125 04D5  8E 06 0108 R          4		mov	ES,[CDRHIG] 
    1126 04D9  26: 8A 2D             4		mov	CH,ES:[DI] 
    1127 04DC  C3                    4		RET 
    1128 04DD                        4	??0022: 
    1129 04DD  E8 04C2 R             3		CALL	NEWCDRC 
    1130					TYPEOF	DL,BX
    1131 04E0  8B FB                 1		MOV     DI,BX 
    1132 04E2  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1133 04E7  74 05                 1		JZ	??0024 
    1134 04E9  E8 0023 R             1		CALL	EMSADDR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-22


    1135 04EC  EB 04                 1		jmp	short ??0025 
    1136 04EE                        1	??0024: 
    1137 04EE  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1138 04F2                        1	??0025: 
    1139 04F2  26: 8A 15             1		MOV	DL,ES:[DI] 
    1140 04F5  F6 C2 10				TEST	DL,GARBA
    1141 04F8  74 04				JZ	NOSKIP
    1142 04FA  8B C1				MOV     AX,CX
    1143 04FC  EB 97				JMP	FREEOBL
    1144 04FE  50			NOSKIP:	PUSH	AX
    1145 04FF  8B C1				MOV 	AX,CX
    1146 0501  E8 0495 R			CALL	FREEOBL
    1147 0504  8B D8				MOV	BX,AX
    1148 0506  58				POP     AX
    1149					RPLACD	AX,B
    1150 0507  8B F8                 1		MOV	DI,AX 
    1151 0509  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    1152 050E  74 09                 2		JZ	??0026 
    1153 0510  E8 0023 R             2		CALL	EMSADDR 
    1154 0513  26: 89 5D 06          2		MOV	ES:[DI+6],BX 
    1155 0517  EB 0E                 2		JMP	SHORT ??0027 
    1156 0519  8E 06 0106 R          2	??0026:	mov	ES,[CDRLOW] 
    1157 051D  26: 88 1D             2		mov     ES:[DI],BL 
    1158 0520  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    1159 0524  26: 88 3D             2		mov	ES:[DI],BH 
    1160 0527                        2	??0027: 
    1161 0527  C3				RET
    1162				
    1163				;================= PerusCONSIT =====================================
    1164				
    1165 0528				ANYCONS:
    1166 0528  8B 0E 010E R			MOV	CX,[freelist]
    1167					J$NIL	CX,TOGARCOL
    1168 052C  83 F9 00              1		CMP	CX,0 
    1169 052F  75 03                 2		JnZ	$+5 
    1170 0531  EB 6E 90              2		JMP	TOGARCOL 
    1171 0534  90                    2		nop 
    1172					CDR	d,CX
    1173 0535  EB 20                 3		jmp	short ??0028 
    1174 0537                        3	NEWCDRdCX: 
    1175 0537  8B F9                 4		MOV     DI,CX 
    1176 0539  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    1177 053E  74 08                 4		JZ	??0029 
    1178 0540  E8 0023 R             4		CALL	EMSADDR 
    1179 0543  26: 8B 55 06          4		MOV	dX,ES:[DI+6] 
    1180 0547  C3                    4		RET 
    1181 0548                        4	??0029: 
    1182 0548  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    1183 054C  26: 8A 15             3		mov     dL,ES:[DI] 
    1184 054F  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    1185 0553  26: 8A 35             3		mov	dH,ES:[DI] 
    1186 0556  C3                    3		RET 
    1187 0557                        3	??0028: 
    1188 0557  E8 0537 R             2		CALL	NEWCDRdCX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-23


    1189 055A  89 16 010E R			MOV	[FREELIST],DX
    1190 055E				CONS2:	RPLACA	CX,A
    1191 055E  8B F9                 1		MOV	DI,CX 
    1192 0560  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    1193 0565  74 09                 2		JZ	??002A 
    1194 0567  E8 0023 R             2		CALL	EMSADDR 
    1195 056A  26: 89 45 04          2		MOV	ES:[DI+4],AX 
    1196 056E  EB 0E                 2		JMP	SHORT ??002B 
    1197 0570  8E 06 0102 R          2	??002A:	mov	ES,[CARLOW] 
    1198 0574  26: 88 05             2		mov     ES:[DI],AL 
    1199 0577  8E 06 0104 R          2		mov	ES,[CARHIG] 
    1200 057B  26: 88 25             2		mov	ES:[DI],AH 
    1201 057E                        2	??002B: 
    1202					RPLACD	CX,B
    1203 057E  8B F9                 1		MOV	DI,CX 
    1204 0580  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    1205 0585  74 09                 2		JZ	??002C 
    1206 0587  E8 0023 R             2		CALL	EMSADDR 
    1207 058A  26: 89 5D 06          2		MOV	ES:[DI+6],BX 
    1208 058E  EB 0E                 2		JMP	SHORT ??002D 
    1209 0590  8E 06 0106 R          2	??002C:	mov	ES,[CDRLOW] 
    1210 0594  26: 88 1D             2		mov     ES:[DI],BL 
    1211 0597  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    1212 059B  26: 88 3D             2		mov	ES:[DI],BH 
    1213 059E                        2	??002D: 
    1214 059E  8B C1				MOV	AX,CX
    1215 05A0  C3				RET
    1216 05A1				TOGARCOL:
    1217 05A1  50				PUSH	AX
    1218 05A2  53				PUSH	BX
    1219 05A3  E8 0270 R			CALL	GARCOL
    1220 05A6  5B				POP	BX
    1221 05A7  58				POP	AX
    1222 05A8  E9 0528 R			jmp	anycons
    1223				
    1224				LISP$SUBRU 'cons',ctwoarg,twoarg
    1225 18F6                        1	dataseg segment 
    1226 18F6  18E8 R                1		DW NXTSBR 
    1227 18F8  05AB R                1		dw CODEADDR 
    1228 18FA  3B94 R                1		dw ctwoarg 
    1229 18FC  63 6F 6E 73 00        1	  	DB 'cons',0 
    1230 1901                        1	dataseg ends 
    1231 05AB  E8 0ED9 R             1		CALL	twoarg 
    1232 05AE  E8 0528 R		CONS:	CALL	ANYCONS
    1233				 	SETTYPE	AX,LIST
    1234 05B1  8B F8                 1		MOV     DI,AX 
    1235 05B3  B2 0F                 1		MOV	DL,LIST 
    1236 05B5  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1237 05BA  74 05                 1		JZ	??002E 
    1238 05BC  E8 0023 R             1		CALL	EMSADDR 
    1239 05BF  EB 04                 1		jmp	short ??002F 
    1240 05C1                        1	??002E: 
    1241 05C1  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1242 05C5                        1	??002F: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-24


    1243 05C5  26: 88 15             1		MOV     ES:[DI],DL 
    1244 05C8  C3				RET
    1245				
    1246 05C9  3D 02FD			MAKNUM:	cmp	ax,(FSTNODE-ZERONUM)
    1247 05CC  72 1E				jc	smallnum
    1248 05CE  BB 0000				MOV	BX,0
    1249 05D1  E8 0528 R			CALL	ANYCONS
    1250					SETTYPE AX,NUMBER
    1251 05D4  8B F8                 1		MOV     DI,AX 
    1252 05D6  B2 03                 1		MOV	DL,NUMBER 
    1253 05D8  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1254 05DD  74 05                 1		JZ	??0030 
    1255 05DF  E8 0023 R             1		CALL	EMSADDR 
    1256 05E2  EB 04                 1		jmp	short ??0031 
    1257 05E4                        1	??0030: 
    1258 05E4  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1259 05E8                        1	??0031: 
    1260 05E8  26: 88 15             1		MOV     ES:[DI],DL 
    1261 05EB  C3				RET
    1262 05EC				smallnum:
    1263 05EC  05 0003				ADD	AX,ZERONUM
    1264 05EF  C3				ret
    1265				
    1266 05F0  E8 0528 R		MAKSBR:	CALL	ANYCONS
    1267				 	SETTYPE AX,SUBRU
    1268 05F3  8B F8                 1		MOV     DI,AX 
    1269 05F5  B2 07                 1		MOV	DL,SUBRU 
    1270 05F7  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1271 05FC  74 05                 1		JZ	??0032 
    1272 05FE  E8 0023 R             1		CALL	EMSADDR 
    1273 0601  EB 04                 1		jmp	short ??0033 
    1274 0603                        1	??0032: 
    1275 0603  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1276 0607                        1	??0033: 
    1277 0607  26: 88 15             1		MOV     ES:[DI],DL 
    1278 060A  C3				RET
    1279				
    1280				; AX~value,BX~string
    1281 060B  50			MAKNAM:	PUSH	AX
    1282 060C  E8 062D R		 	CALL	MAKSTR
    1283 060F  8B D8				MOV	BX,AX
    1284 0611  58				POP	AX
    1285 0612  E8 0528 R			CALL	ANYCONS
    1286					SETTYPE	AX,SYMBOL
    1287 0615  8B F8                 1		MOV     DI,AX 
    1288 0617  B2 05                 1		MOV	DL,SYMBOL 
    1289 0619  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1290 061E  74 05                 1		JZ	??0034 
    1291 0620  E8 0023 R             1		CALL	EMSADDR 
    1292 0623  EB 04                 1		jmp	short ??0035 
    1293 0625                        1	??0034: 
    1294 0625  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1295 0629                        1	??0035: 
    1296 0629  26: 88 15             1		MOV     ES:[DI],DL 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-25


    1297 062C  C3				RET
    1298				
    1299				
    1300 062D				MAKSTR: ;BX=JONO+0
    1301 062D  8B 17			 	MOV	DX,[BX]
    1302 062F  80 FA 00				CMP	DL,0
    1303					JMPN	NZ,NILRET
    1304 0632  75 03                 1		JNZ	$+5 
    1305 0634  E9 019A R             1		JMP	NILRET 
    1306 0637  90                    1		nop 
    1307 0638  43				INC	BX
    1308 0639  80 FE 00				CMP	DH,0
    1309 063C  75 01				JNZ	EEMAK2
    1310 063E  4B				DEC	BX
    1311 063F  43			EEMAK2:	INC	BX
    1312 0640  52				PUSH	DX
    1313 0641  E8 062D R			CALL	MAKSTR
    1314 0644  8B D8				MOV	BX,AX
    1315 0646  58				POP	AX
    1316 0647  E8 0528 R			CALL	ANYCONS
    1317					SETTYPE	AX,STRING
    1318 064A  8B F8                 1		MOV     DI,AX 
    1319 064C  B2 04                 1		MOV	DL,STRING 
    1320 064E  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1321 0653  74 05                 1		JZ	??0036 
    1322 0655  E8 0023 R             1		CALL	EMSADDR 
    1323 0658  EB 04                 1		jmp	short ??0037 
    1324 065A                        1	??0036: 
    1325 065A  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1326 065E                        1	??0037: 
    1327 065E  26: 88 15             1		MOV     ES:[DI],DL 
    1328 0661  C3				RET
    1329				
    1330				;========================== Readerit ===============================
    1331				
    1332				
    1333				NAP	MACRO	L1,L2
    1334					LOCAL	skp
    1335					CMP	DL,L1
    1336					JC	SKP
    1337					CMP	DL,L2+1
    1338					CMC
    1339				SKP:
    1340					ENDM
    1341				
    1342 0662				NUMP:	NAP	'0','9'	
    1343 0662  80 FA 30              1		CMP	DL,'0' 
    1344 0665  72 04                 1		JC	??0038 
    1345 0667  80 FA 3A              1		CMP	DL,'9'+1 
    1346 066A  F5                    1		CMC 
    1347 066B                        1	??0038: 
    1348 066B  C3				RET
    1349 066C  E8 0662 R		NUMALF:	CALL	NUMP
    1350 066F  73 1E				JNC	TRUE
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-26


    1351					NAP	'A','Z'
    1352 0671  80 FA 41              1		CMP	DL,'A' 
    1353 0674  72 04                 1		JC	??0039 
    1354 0676  80 FA 5B              1		CMP	DL,'Z'+1 
    1355 0679  F5                    1		CMC 
    1356 067A                        1	??0039: 
    1357 067A  73 13				JNC	TRUE
    1358 067C				UALFP:	NAP	'a','z'
    1359 067C  80 FA 61              1		CMP	DL,'a' 
    1360 067F  72 04                 1		JC	??003A 
    1361 0681  80 FA 7B              1		CMP	DL,'z'+1 
    1362 0684  F5                    1		CMC 
    1363 0685                        1	??003A: 
    1364 0685  C3				RET
    1365 0686  E8 067C R		UPCHA:	CALL	UALFP
    1366 0689  72 03				JC	UPOK
    1367 068B  80 EA 20				SUB	DL,'a'-'A'
    1368 068E  C3			UPOK:	RET
    1369				
    1370 068F  F8			TRUE:	CLC
    1371 0690  C3				RET
    1372 0691  F9			FALSE:	STC
    1373 0692  C3				RET
    1374				
    1375 1901				DATASEG SEGMENT
    1376 1901  45 4E 44 2D 4F 46		EOF$ST  	db 'END-OF-FILE',0
    1377       2D 46 49 4C 45 00	
    1378 190D				DATASEG ENDS
    1379				
    1380 0693  BB 1901 R		EOF$:	MOV	BX,OFFSET EOF$ST
    1381 0696  E9 071C R			JMP	RETUID
    1382				
    1383				LISP$SUBRU 'read',CNOARG
    1384 190D                        1	dataseg segment 
    1385 190D  18F6 R                1		DW NXTSBR 
    1386 190F  0699 R                1		dw CODEADDR 
    1387 1911  3B6F R                1		dw CNOARG 
    1388 1913  72 65 61 64 00        1	  	DB 'read',0 
    1389 1918                        1	dataseg ends 
    1390 0699  B2 00			READ:	mov	dl,0
    1391 069B  88 16 2693 R			MOV	[TABS],dl
    1392 069F  E8 2828 R			CALL	READC
    1393					WHEN	1AH,EOF$
    1394 06A2  80 FA 1A              1		CMP	DL,1AH 
    1395 06A5  75 03                 2		JNZ	$+5 
    1396 06A7  EB EA                 2		JMP	EOF$ 
    1397 06A9  90                    2		nop 
    1398 06AA  80 FA 21				CMP	DL,21H
    1399 06AD  72 EA				JC	READ
    1400 06AF  80 FA 3B				cmp	dl,';'
    1401 06B2  75 13				jnz	notcom
    1402 06B4  8A 36 2694 R			mov	dh,[nxtch]
    1403 06B8  80 FE 3B				cmp	dh,';'
    1404 06BB  75 0A				jnz	notcom
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-27


    1405 06BD  E8 2828 R		comment2:call	readc
    1406 06C0  80 FA 0D				cmp	dl,13
    1407 06C3  75 F8				jnz	comment2
    1408 06C5  EB D2				jmp	read
    1409 06C7  88 16 011C R		notcom:	MOV	[RDATOM],DL
    1410					WHEN	'(',RLIST
    1411 06CB  80 FA 28              1		CMP	DL,'(' 
    1412 06CE  75 03                 2		JNZ	$+5 
    1413 06D0  E9 07FB R             2		JMP	RLIST 
    1414 06D3  90                    2		nop 
    1415					WHEN	')',NILRET
    1416 06D4  80 FA 29              1		CMP	DL,')' 
    1417 06D7  75 03                 2		JNZ	$+5 
    1418 06D9  E9 019A R             2		JMP	NILRET 
    1419 06DC  90                    2		nop 
    1420					WHEN	27H,RQUOT
    1421 06DD  80 FA 27              1		CMP	DL,27H 
    1422 06E0  75 03                 2		JNZ	$+5 
    1423 06E2  E9 0835 R             2		JMP	RQUOT 
    1424 06E5  90                    2		nop 
    1425 06E6  80 FA 2E				cmp	dl,'.'
    1426 06E9  75 0B				jnz	itemr1
    1427 06EB  A0 2694 R			mov	al,nxtch
    1428 06EE  3C 21				cmp	al,21h
    1429					jmpn	nc,tret
    1430 06F0  73 03                 1		Jnc	$+5 
    1431 06F2  E9 019E R             1		JMP	tret 
    1432 06F5  90                    1		nop 
    1433 06F6  BB 2290 R		itemr1:	MOV	BX,OFFSET ITEMB
    1434 06F9  88 17			ITEMR:	MOV	[BX],DL
    1435 06FB  43				INC	BX
    1436 06FC  8A 16 2694 R			MOV	DL,[NXTCH]
    1437 0700  80 FA 21				CMP	DL,21H
    1438 0703  72 27				JC	ITEMC
    1439					WHEN	'(',ITEMC
    1440 0705  80 FA 28              1		CMP	DL,'(' 
    1441 0708  75 03                 2		JNZ	$+5 
    1442 070A  EB 20 90              2		JMP	ITEMC 
    1443 070D  90                    2		nop 
    1444					WHEN	')',ITEMC
    1445 070E  80 FA 29              1		CMP	DL,')' 
    1446 0711  75 03                 2		JNZ	$+5 
    1447 0713  EB 17 90              2		JMP	ITEMC 
    1448 0716  90                    2		nop 
    1449 0717  E8 2828 R			CALL	READC
    1450 071A  EB DD				JMP	ITEMR
    1451				
    1452					; dos -rivista ASCIIZ-RIVIKSI
    1453					
    1454 071C  BF 2290 R		RETUID:	MOV	DI,offset ITEMB ; BX :=string+0
    1455 071F  8A 17			RETUIL:	MOV	DL,[BX]
    1456 0721  88 15				MOV	[DI],DL
    1457 0723  80 FA 00				CMP	DL,0
    1458 0726  74 08				JZ	ITEMC2
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-28


    1459 0728  47				INC	DI
    1460 0729  43				INC	BX
    1461 072A  EB F3				JMP	RETUIL
    1462					
    1463				
    1464 072C  B2 00			ITEMC:	MOV	DL,0
    1465 072E  88 17				MOV	[BX],DL
    1466 0730  BB 2290 R		ITEMC2:	MOV	BX,offset itemb
    1467 0733  8A 17				MOV	DL,[bx]
    1468					when	0,nilret
    1469 0735  80 FA 00              1		CMP	DL,0 
    1470 0738  75 03                 2		JNZ	$+5 
    1471 073A  E9 019A R             2		JMP	nilret 
    1472 073D  90                    2		nop 
    1473					when	'$',rdhex
    1474 073E  80 FA 24              1		CMP	DL,'$' 
    1475 0741  75 03                 2		JNZ	$+5 
    1476 0743  EB 17 90              2		JMP	rdhex 
    1477 0746  90                    2		nop 
    1478					when	'-',RNEG
    1479 0747  80 FA 2D              1		CMP	DL,'-' 
    1480 074A  75 03                 2		JNZ	$+5 
    1481 074C  E9 07DF R             2		JMP	RNEG 
    1482 074F  90                    2		nop 
    1483 0750  E8 07A5 R			CALL	RNUM
    1484					JMPN	NC,TRALFA
    1485 0753  73 03                 1		JNC	$+5 
    1486 0755  E9 0859 R             1		JMP	TRALFA 
    1487 0758  90                    1		nop 
    1488 0759  E9 05C9 R			JMP	MAKNUM
    1489 075C  43			rdhex:	inc	bx
    1490 075D  8A 17				mov	dl,[bx]
    1491 075F  80 FA 00				cmp	dl,0
    1492					jmpn	nz,tralfa
    1493 0762  75 03                 1		Jnz	$+5 
    1494 0764  E9 0859 R             1		JMP	tralfa 
    1495 0767  90                    1		nop 
    1496 0768  B8 0000				mov	ax,0
    1497 076B  B9 0010			rdhex2:	mov	cx,16
    1498 076E  8A 17				mov	dl,[bx]
    1499 0770  43				inc	bx
    1500 0771  80 FA 00				cmp	dl,0
    1501					jmpn	nz,maknum
    1502 0774  75 03                 1		Jnz	$+5 
    1503 0776  E9 05C9 R             1		JMP	maknum 
    1504 0779  90                    1		nop 
    1505					nap	'0','9'
    1506 077A  80 FA 30              1		CMP	DL,'0' 
    1507 077D  72 04                 1		JC	??003B 
    1508 077F  80 FA 3A              1		CMP	DL,'9'+1 
    1509 0782  F5                    1		CMC 
    1510 0783                        1	??003B: 
    1511 0783  72 06				jc	alfa
    1512 0785  80 EA 30				sub	dl,'0'
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-29


    1513 0788  EB 13 90				jmp	numbi
    1514 078B				alfa:	nap	'A','F'
    1515 078B  80 FA 41              1		CMP	DL,'A' 
    1516 078E  72 04                 1		JC	??003C 
    1517 0790  80 FA 47              1		CMP	DL,'F'+1 
    1518 0793  F5                    1		CMC 
    1519 0794                        1	??003C: 
    1520					jmpn	nc,tralfa
    1521 0794  73 03                 1		Jnc	$+5 
    1522 0796  E9 0859 R             1		JMP	tralfa 
    1523 0799  90                    1		nop 
    1524 079A  80 EA 37				sub	dl,'A'-10
    1525 079D  52			numbi:	push	dx
    1526 079E  F7 E1				mul	cx
    1527 07A0  5A				pop	dx
    1528 07A1  03 C2				add	ax,dx
    1529 07A3  EB C6				jmp	rdhex2
    1530				
    1531 07A5  B8 0000			RNUM:	MOV	AX,0
    1532 07A8  B9 000A				MOV	CX,10
    1533 07AB  B6 00				MOV	DH,0
    1534 07AD  8A 17			RNUM2:	MOV	DL,[BX]
    1535 07AF  43				INC	BX
    1536 07B0  80 FA 00				CMP	DL,0
    1537					RZ
    1538 07B3  75 01                 1		JNZ	$+3 
    1539 07B5  C3                    1		RET 
    1540					NAP	'0','9'
    1541 07B6  80 FA 30              1		CMP	DL,'0' 
    1542 07B9  72 04                 1		JC	??003D 
    1543 07BB  80 FA 3A              1		CMP	DL,'9'+1 
    1544 07BE  F5                    1		CMC 
    1545 07BF                        1	??003D: 
    1546					RC
    1547 07BF  73 01                 1		JNC	$+3 
    1548 07C1  C3                    1		RET 
    1549 07C2  80 EA 30				SUB	DL,'0'
    1550 07C5  52				push	dx
    1551 07C6  F7 E1				MUL	CX
    1552 07C8  83 FA 00				cmp	dx,0 ; lisaa
    1553 07CB  5A				pop	dx
    1554					jmpn	z,false ; lisaa
    1555 07CC  74 03                 1		Jz	$+5 
    1556 07CE  E9 0691 R             1		JMP	false 
    1557 07D1  90                    1		nop 
    1558 07D2  03 C2				ADD	AX,Dx
    1559 07D4  3D 8000				cmp	ax,8000h
    1560					jmpn	c,false
    1561 07D7  72 03                 1		Jc	$+5 
    1562 07D9  E9 0691 R             1		JMP	false 
    1563 07DC  90                    1		nop 
    1564 07DD  EB CE				JMP	RNUM2
    1565				
    1566				purge	nap
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-30


    1567				
    1568 07DF  43			RNEG:	INC	BX
    1569 07E0  8A 17				MOV	DL,[BX]
    1570 07E2  80 FA 00				CMP	DL,0
    1571					JMPN	NZ,TRALFA
    1572 07E5  75 03                 1		JNZ	$+5 
    1573 07E7  EB 70 90              1		JMP	TRALFA 
    1574 07EA  90                    1		nop 
    1575 07EB  E8 07A5 R			CALL	RNUM
    1576 07EE  72 69				JC	TRALFA
    1577 07F0  F7 D8				NEG	AX
    1578 07F2  E9 05C9 R			JMP	MAKNUM
    1579					
    1580 07F5  E8 07FB R		RCONS:	CALL	RLIST
    1581 07F8  E9 25C4 R			JMP	SCAR
    1582				
    1583 07FB  E8 0699 R		RLIST:	CALL	READ
    1584 07FE  8A 16 011C R			MOV	DL,[RDATOM]
    1585 0802  80 FA 00				CMP	DL,0
    1586 0805  74 0C				JZ	UUSNIL	
    1587 0807  B2 00				mov	dl,0
    1588 0809  88 16 011C R			MOV	[RDATOM],DL
    1589					R$NIL	AX
    1590 080D  3D 0000               1		CMP	AX,0 
    1591 0810  75 01                 2		JNZ	$+3 
    1592 0812  C3                    2		RET 
    1593 0813  50			UUSNIL:	PUSH	AX
    1594 0814  8A 16 2694 R		RDCONS:	MOV	DL,[NXTCH]
    1595 0818  80 FA 21				CMP	DL,21H
    1596 081B  73 05				JNC	RDCON2
    1597 081D  E8 2828 R			CALL	READC
    1598 0820  EB F2				JMP	RDCONS
    1599 0822  52			RDCON2:	PUSH	DX
    1600 0823  E8 07FB R			CALL	RLIST
    1601 0826  5A				POP	DX
    1602 0827  80 FA 2E				CMP	DL,'.'
    1603 082A  75 03				JNZ 	EICADR
    1604 082C  E8 2620 R			CALL	CADR
    1605 082F  8B D8			EICADR:	MOV	BX,AX
    1606 0831  58				POP	AX
    1607 0832  E9 05AE R			JMP	CONS
    1608 0835  E8 0699 R		RQUOT:	CALL	READ
    1609 0838  BB 0000				MOV	BX,NIL
    1610 083B  E8 05AE R			CALL	CONS
    1611 083E  8B D8				MOV	BX,AX
    1612 0840  B8 0002				MOV	AX,QUOTE
    1613 0843  E9 05AE R			JMP	CONS	
    1614				
    1615 1918				dataseg	segment
    1616 1918  0100[				hashtable dw 100h dup (0)
    1617	   0000			
    1618			 ]	
    1619				
    1620 1B18  0000				thishash dw 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-31


    1621 1B1A				dataseg ends
    1622				
    1623 0846  BB 2290 R		makhash:mov	bx,offset itemb
    1624 0849  B8 0000				mov	ax,0
    1625 084C  8A 17			makha2:	mov	dl,[bx]
    1626 084E  80 FA 00				cmp	dl,0
    1627					rz
    1628 0851  75 01                 1		JNZ	$+3 
    1629 0853  C3                    1		RET 
    1630 0854  43				inc	bx
    1631 0855  02 C2				add	al,dl
    1632 0857  EB F3				jmp	makha2
    1633				
    1634 0859  E8 0846 R		TRALFA:	call	makhash
    1635 085C  03 C0				add	ax,ax
    1636 085E  05 1918 R			add	ax,offset hashtable
    1637 0861  A3 1B18 R			mov	[thishash],ax
    1638 0864  8B D8				mov	bx,ax
    1639 0866  8B 07				mov	ax,[bx]
    1640 0868  3D 0300				cmp	ax,fstnode
    1641 086B  72 26				jc	ralfa1
    1642					typeof	dl,ax
    1643 086D  8B F8                 1		MOV     DI,ax 
    1644 086F  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1645 0874  74 05                 1		JZ	??003E 
    1646 0876  E8 0023 R             1		CALL	EMSADDR 
    1647 0879  EB 04                 1		jmp	short ??003F 
    1648 087B                        1	??003E: 
    1649 087B  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1650 087F                        1	??003F: 
    1651 087F  26: 8A 15             1		MOV	dl,ES:[DI] 
    1652 0882  80 FA 05				cmp	dl,symbol
    1653 0885  74 05				jz	ralfa0
    1654 0887  80 FA 06				cmp	dl,fsymbo
    1655 088A  75 07				jnz	ralfa1
    1656 088C  50			ralfa0:	push	ax
    1657 088D  E8 092E R			call	alfmat
    1658 0890  58				pop	ax
    1659 0891  74 47				jz	nfoun2
    1660 0893  A1 010C R		ralfa1:	MOV	AX,[OBLIST]
    1661 0896				RALF2:	J$NIL	AX,NEWNAM
    1662 0896  3D 0000               1		CMP	AX,0 
    1663 0899  75 03                 2		JnZ	$+5 
    1664 089B  EB 52 90              2		JMP	NEWNAM 
    1665 089E  90                    2		nop 
    1666 089F  50				PUSH	AX
    1667					CAR	A,AX
    1668 08A0  E8 02EB R             2		CALL	NEWCARAAX 
    1669 08A3  E8 092E R			CALL	ALFMAT
    1670 08A6  74 28				JZ	NFOUN
    1671 08A8  58				POP	AX
    1672					CDR	A,AX
    1673 08A9  EB 20                 3		jmp	short ??0040 
    1674 08AB                        3	NEWCDRAAX: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-32


    1675 08AB  8B F8                 4		MOV     DI,AX 
    1676 08AD  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    1677 08B2  74 08                 4		JZ	??0041 
    1678 08B4  E8 0023 R             4		CALL	EMSADDR 
    1679 08B7  26: 8B 45 06          4		MOV	AX,ES:[DI+6] 
    1680 08BB  C3                    4		RET 
    1681 08BC                        4	??0041: 
    1682 08BC  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    1683 08C0  26: 8A 05             3		mov     AL,ES:[DI] 
    1684 08C3  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    1685 08C7  26: 8A 25             3		mov	AH,ES:[DI] 
    1686 08CA  C3                    3		RET 
    1687 08CB                        3	??0040: 
    1688 08CB  E8 08AB R             2		CALL	NEWCDRAAX 
    1689 08CE  EB C6				JMP	RALF2
    1690 08D0  58			NFOUN:	POP	AX	
    1691					CAR	A,AX
    1692 08D1  E8 02EB R             2		CALL	NEWCARAAX 
    1693 08D4  8B 1E 1B18 R			mov	bx,[thishash]
    1694 08D8  89 07				mov	[bx],ax
    1695 08DA  3B 06 3043 R		nfoun2:	cmp	ax,[quotes]
    1696 08DE  74 0B				jz	rdquote
    1697 08E0  3B 06 3047 R			cmp	ax,[trues]
    1698					rnz
    1699 08E4  74 01                 1		JZ	$+3 
    1700 08E6  C3                    1		RET 
    1701 08E7  B8 0001				mov	ax,t
    1702 08EA  C3				ret
    1703 08EB				rdquote:
    1704 08EB  B8 0002				mov	ax,quote
    1705 08EE  C3				RET
    1706				
    1707 08EF  BB 2290 R		NEWNAM:	MOV	BX,OFFSET ITEMB
    1708 08F2  B8 0000				MOV	AX,NIL
    1709 08F5  E8 060B R		oblnam:	CALL	MAKNAM
    1710 08F8  8B 1E 1B18 R			mov	bx,[thishash]
    1711 08FC  89 07				mov	[bx],ax
    1712 08FE  50			PUSHOB:	PUSH	ax
    1713 08FF  BB 0000				mov	bx,nil
    1714 0902  E8 05AE R			call	cons
    1715 0905  8B 1E 010C R			MOV	bX,[OBLIST]
    1716					RPLACD	ax,b
    1717 0909  8B F8                 1		MOV	DI,ax 
    1718 090B  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    1719 0910  74 09                 2		JZ	??0042 
    1720 0912  E8 0023 R             2		CALL	EMSADDR 
    1721 0915  26: 89 5D 06          2		MOV	ES:[DI+6],bX 
    1722 0919  EB 0E                 2		JMP	SHORT ??0043 
    1723 091B  8E 06 0106 R          2	??0042:	mov	ES,[CDRLOW] 
    1724 091F  26: 88 1D             2		mov     ES:[DI],bL 
    1725 0922  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    1726 0926  26: 88 3D             2		mov	ES:[DI],bH 
    1727 0929                        2	??0043: 
    1728 0929  A3 010C R			MOV	[OBLIST],AX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-33


    1729 092C  58				POP	AX
    1730 092D  C3				RET
    1731				
    1732				
    1733 092E				ALFMAT:	cdr	a,ax
    1734 092E  E8 08AB R             2		CALL	NEWCDRaax 
    1735 0931  BB 2290 R			MOV	BX,OFFSET ITEMB
    1736 0934				RNAM2:
    1737					CAR	C,AX
    1738 0934  EB 20                 3		jmp	short ??0044 
    1739 0936                        3	NEWCARCAX: 
    1740 0936  8B F8                 4		MOV     DI,AX 
    1741 0938  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    1742 093D  74 08                 4		JZ	??0045 
    1743 093F  E8 0023 R             4		CALL	EMSADDR 
    1744 0942  26: 8B 4D 04          4		MOV	CX,ES:[DI+4] 
    1745 0946  C3                    4		RET 
    1746 0947                        4	??0045: 
    1747 0947  8E 06 0102 R          3		mov	ES,[CARLOW] 
    1748 094B  26: 8A 0D             3		mov     CL,ES:[DI] 
    1749 094E  8E 06 0104 R          3		mov	ES,[CARHIG] 
    1750 0952  26: 8A 2D             3		mov	CH,ES:[DI] 
    1751 0955  C3                    3		RET 
    1752 0956                        3	??0044: 
    1753 0956  E8 0936 R             2		CALL	NEWCARCAX 
    1754 0959  38 0F				CMP	[BX],CL
    1755					Rnz
    1756 095B  74 01                 1		JZ	$+3 
    1757 095D  C3                    1		RET 
    1758 095E  43				Inc	Bx
    1759 095F  38 2F				Cmp	[BX],CH
    1760					RNZ
    1761 0961  74 01                 1		JZ	$+3 
    1762 0963  C3                    1		RET 
    1763 0964  80 FD 00				CMP	ch,0
    1764					RZ
    1765 0967  75 01                 1		JNZ	$+3 
    1766 0969  C3                    1		RET 
    1767 096A  43				INC	BX
    1768					CDR	A,AX
    1769 096B  E8 08AB R             2		CALL	NEWCDRAAX 
    1770					JN$NIL	AX,RNAM2	
    1771 096E  3D 0000               1		CMP	AX,0 
    1772 0971  74 03                 2		JZ	$+5 
    1773 0973  EB BF                 2		JMP	RNAM2 
    1774 0975  90                    2		nop 
    1775 0976  38 07				CMP	[bx],AL
    1776 0978  C3				RET	
    1777						
    1778 1B1A				dataseg segment
    1779 1B1A  0000				atulos dw 0
    1780 1B1C				dataseg ends
    1781				
    1782				lisp$subru 'apropos',cantcomp,strarg
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-34


    1783 1B1C                        1	dataseg segment 
    1784 1B1C  190D R                1		DW NXTSBR 
    1785 1B1E  0979 R                1		dw CODEADDR 
    1786 1B20  3B6A R                1		dw cantcomp 
    1787 1B22  61 70 72 6F 70 6F     1	  	DB 'apropos',0 
    1788 1B2A                        1	dataseg ends 
    1789 0979  E8 0F5A R             1		CALL	strarg 
    1790 097C  C7 06 1B1A R 0000		mov	word ptr [atulos],nil
    1791 0982  8B 1E 010C R			mov	bx,[oblist]
    1792 0986				APRLOO:	j$NIL	bx,adone
    1793 0986  83 FB 00              1		CMP	bx,0 
    1794 0989  75 03                 2		JnZ	$+5 
    1795 098B  E9 0A3A R             2		JMP	adone 
    1796 098E  90                    2		nop 
    1797					car$cdr	c,b,bx
    1798 098F  EB 20                 4		jmp	short ??0046 
    1799 0991                        4	NEWCARcbx: 
    1800 0991  8B FB                 5		MOV     DI,bx 
    1801 0993  80 3E 18A0 R 00       5		CMP	[EMS_ON],0 
    1802 0998  74 08                 5		JZ	??0047 
    1803 099A  E8 0023 R             5		CALL	EMSADDR 
    1804 099D  26: 8B 4D 04          5		MOV	cX,ES:[DI+4] 
    1805 09A1  C3                    5		RET 
    1806 09A2                        5	??0047: 
    1807 09A2  8E 06 0102 R          4		mov	ES,[CARLOW] 
    1808 09A6  26: 8A 0D             4		mov     cL,ES:[DI] 
    1809 09A9  8E 06 0104 R          4		mov	ES,[CARHIG] 
    1810 09AD  26: 8A 2D             4		mov	cH,ES:[DI] 
    1811 09B0  C3                    4		RET 
    1812 09B1                        4	??0046: 
    1813 09B1  E8 0991 R             3		CALL	NEWCARcbx 
    1814 09B4  E8 022A R             3		CALL	NEWCDRb 
    1815 09B7  50				push	ax
    1816 09B8  53				push	bx
    1817 09B9  51				push	cx
    1818					cdr	c,cx
    1819 09BA  EB 20                 3		jmp	short ??0048 
    1820 09BC                        3	NEWCDRccx: 
    1821 09BC  8B F9                 4		MOV     DI,cx 
    1822 09BE  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    1823 09C3  74 08                 4		JZ	??0049 
    1824 09C5  E8 0023 R             4		CALL	EMSADDR 
    1825 09C8  26: 8B 4D 06          4		MOV	cX,ES:[DI+6] 
    1826 09CC  C3                    4		RET 
    1827 09CD                        4	??0049: 
    1828 09CD  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    1829 09D1  26: 8A 0D             3		mov     cL,ES:[DI] 
    1830 09D4  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    1831 09D8  26: 8A 2D             3		mov	cH,ES:[DI] 
    1832 09DB  C3                    3		RET 
    1833 09DC                        3	??0048: 
    1834 09DC  E8 09BC R             2		CALL	NEWCDRccx 
    1835 09DF  3B C1			smore:	cmp	ax,cx ; 
    1836 09E1  74 45				jz	pushthis
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-35


    1837 09E3  3D 0000				cmp	ax,nil
    1838 09E6  74 40				jz	pushthis
    1839 09E8  83 F9 00				cmp	cx,nil
    1840 09EB  74 47				jz	einaa
    1841					car$cdr	b,a,ax
    1842 09ED  E8 049D R             3		CALL	NEWCARbax 
    1843 09F0  E8 0208 R             3		CALL	NEWCDRa 
    1844					car$cdr	d,c,cx
    1845 09F3  EB 20                 4		jmp	short ??004A 
    1846 09F5                        4	NEWCARdcx: 
    1847 09F5  8B F9                 5		MOV     DI,cx 
    1848 09F7  80 3E 18A0 R 00       5		CMP	[EMS_ON],0 
    1849 09FC  74 08                 5		JZ	??004B 
    1850 09FE  E8 0023 R             5		CALL	EMSADDR 
    1851 0A01  26: 8B 55 04          5		MOV	dX,ES:[DI+4] 
    1852 0A05  C3                    5		RET 
    1853 0A06                        5	??004B: 
    1854 0A06  8E 06 0102 R          4		mov	ES,[CARLOW] 
    1855 0A0A  26: 8A 15             4		mov     dL,ES:[DI] 
    1856 0A0D  8E 06 0104 R          4		mov	ES,[CARHIG] 
    1857 0A11  26: 8A 35             4		mov	dH,ES:[DI] 
    1858 0A14  C3                    4		RET 
    1859 0A15                        4	??004A: 
    1860 0A15  E8 09F5 R             3		CALL	NEWCARdcx 
    1861 0A18  E8 04C2 R             3		CALL	NEWCDRc 
    1862 0A1B  3B DA				cmp	bx,dx
    1863 0A1D  74 C0				jz	smore
    1864 0A1F  3A DA				cmp	bl,dl
    1865 0A21  75 11				jnz	einaa
    1866 0A23  80 FF 00				cmp	bh,0
    1867 0A26  75 0C				jnz	einaa
    1868 0A28				pushthis:
    1869 0A28  58				pop	ax
    1870 0A29  8B 1E 1B1A R			mov	bx,[atulos]
    1871 0A2D  E8 05AE R			call	cons
    1872 0A30  A3 1B1A R			mov	[atulos],ax
    1873 0A33  51				push	cx
    1874 0A34  59			einaa:	pop	cx
    1875 0A35  5B				pop	bx
    1876 0A36  58				pop	ax
    1877 0A37  E9 0986 R			jmp	aprloo
    1878 0A3A  A1 1B1A R		Adone:	mov	ax,[atulos]
    1879 0A3D  C3				ret
    1880					
    1881				LISP$SUBRU 'print',CONEARG,EVALARG
    1882 1B2A                        1	dataseg segment 
    1883 1B2A  1B1C R                1		DW NXTSBR 
    1884 1B2C  0A3E R                1		dw CODEADDR 
    1885 1B2E  3B76 R                1		dw CONEARG 
    1886 1B30  70 72 69 6E 74 00     1	  	DB 'print',0 
    1887 1B36                        1	dataseg ends 
    1888 0A3E  E8 0EC7 R             1		CALL	EVALARG 
    1889 0A41  50				PUSH	AX
    1890 0A42  E8 0A47 R			CALL	PRINT
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-36


    1891 0A45  58				POP	AX
    1892 0A46  C3				RET
    1893				
    1894 0A47				PRINT:	J$ATOM	AX,PATOM
    1895 0A47  3D 0300               1		CMP	AX,FSTNODE 
    1896 0A4A  73 03                 2		JNC	$+5 
    1897 0A4C  E9 0AD3 R             2		JMP	PATOM 
    1898 0A4F  90                    2		nop 
    1899 0A50  8B F8                 2		MOV     DI,AX 
    1900 0A52  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    1901 0A57  74 05                 2		JZ	??004C 
    1902 0A59  E8 0023 R             2		CALL	EMSADDR 
    1903 0A5C  EB 04                 2		jmp	short ??004D 
    1904 0A5E                        2	??004C: 
    1905 0A5E  8E 06 0100 R          2		mov	ES,[NODTYP] 
    1906 0A62                        2	??004D: 
    1907 0A62  26: 8A 15             2		MOV	DL,ES:[DI] 
    1908 0A65  80 FA 0F              1		CMP	DL,LIST 
    1909 0A68  74 03                 2		JZ	$+5 
    1910 0A6A  EB 67 90              2		JMP	PATOM 
    1911 0A6D  90                    2		nop 
    1912					CAR	B,AX
    1913 0A6E  E8 049D R             2		CALL	NEWCARBAX 
    1914 0A71  83 FB 02				CMP	BX,QUOTE
    1915					JMPN	NZ,PQUOT2
    1916 0A74  75 03                 1		JNZ	$+5 
    1917 0A76  E9 0B6B R             1		JMP	PQUOT2 
    1918 0A79  90                    1		nop 
    1919 0A7A  B2 28			PRLIS:	MOV	DL,'('
    1920 0A7C  E8 2882 R			CALL	PRINTC
    1921 0A7F  50			PRLIS2:	PUSH	AX
    1922					CAR	A,AX
    1923 0A80  E8 02EB R             2		CALL	NEWCARAAX 
    1924 0A83  E8 0A47 R			CALL	PRINT
    1925 0A86  58				POP	AX
    1926					CDR	A,AX
    1927 0A87  E8 08AB R             2		CALL	NEWCDRAAX 
    1928					J$ATOM	AX,PDOT
    1929 0A8A  3D 0300               1		CMP	AX,FSTNODE 
    1930 0A8D  73 03                 2		JNC	$+5 
    1931 0A8F  EB 27 90              2		JMP	PDOT 
    1932 0A92  90                    2		nop 
    1933 0A93  8B F8                 2		MOV     DI,AX 
    1934 0A95  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    1935 0A9A  74 05                 2		JZ	??004E 
    1936 0A9C  E8 0023 R             2		CALL	EMSADDR 
    1937 0A9F  EB 04                 2		jmp	short ??004F 
    1938 0AA1                        2	??004E: 
    1939 0AA1  8E 06 0100 R          2		mov	ES,[NODTYP] 
    1940 0AA5                        2	??004F: 
    1941 0AA5  26: 8A 15             2		MOV	DL,ES:[DI] 
    1942 0AA8  80 FA 0F              1		CMP	DL,LIST 
    1943 0AAB  74 03                 2		JZ	$+5 
    1944 0AAD  EB 09 90              2		JMP	PDOT 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-37


    1945 0AB0  90                    2		nop 
    1946 0AB1  B2 20				MOV	DL,20H
    1947 0AB3  E8 2882 R			CALL	PRINTC
    1948 0AB6  EB C7				JMP	PRLIS2
    1949 0AB8				PDOT:	J$NIL	AX,EPRL
    1950 0AB8  3D 0000               1		CMP	AX,0 
    1951 0ABB  75 03                 2		JnZ	$+5 
    1952 0ABD  EB 0F 90              2		JMP	EPRL 
    1953 0AC0  90                    2		nop 
    1954 0AC1  50				PUSH	AX
    1955					PRITHS	' . '
    1956 1B36                        1	dataseg segment 
    1957 1B36  20 2E 20 00           1		DB ' . ',0 
    1958 1B3A                        1	dataseg ends 
    1959 0AC2  53                    1		push	bx 
    1960 0AC3  BB 1B36 R             1		mov	bx,offset tempaddr 
    1961 0AC6  E8 018C R             1		CALL	PRINTS 
    1962 0AC9  5B                    1		pop	bx 
    1963 0ACA  58				POP	AX
    1964 0ACB  E8 0AD3 R			CALL	PATOM
    1965 0ACE  B2 29			EPRL:	MOV	DL,')'
    1966 0AD0  E9 2882 R			JMP	PRINTC
    1967				
    1968				
    1969 0AD3				PATOM:	TYPEOF	DL,AX
    1970 0AD3  8B F8                 1		MOV     DI,AX 
    1971 0AD5  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    1972 0ADA  74 05                 1		JZ	??0050 
    1973 0ADC  E8 0023 R             1		CALL	EMSADDR 
    1974 0ADF  EB 04                 1		jmp	short ??0051 
    1975 0AE1                        1	??0050: 
    1976 0AE1  8E 06 0100 R          1		mov	ES,[NODTYP] 
    1977 0AE5                        1	??0051: 
    1978 0AE5  26: 8A 15             1		MOV	DL,ES:[DI] 
    1979					WHEN	symbol,PNAME
    1980 0AE8  80 FA 05              1		CMP	DL,symbol 
    1981 0AEB  75 03                 2		JNZ	$+5 
    1982 0AED  EB 6C 90              2		JMP	PNAME 
    1983 0AF0  90                    2		nop 
    1984					when	fsymbo,pname
    1985 0AF1  80 FA 06              1		CMP	DL,fsymbo 
    1986 0AF4  75 03                 2		JNZ	$+5 
    1987 0AF6  EB 63 90              2		JMP	pname 
    1988 0AF9  90                    2		nop 
    1989					WHEN	SUBRU,PSUBR
    1990 0AFA  80 FA 07              1		CMP	DL,SUBRU 
    1991 0AFD  75 03                 2		JNZ	$+5 
    1992 0AFF  EB 7D 90              2		JMP	PSUBR 
    1993 0B02  90                    2		nop 
    1994					WHEN	NUMBER,PNUMB
    1995 0B03  80 FA 03              1		CMP	DL,NUMBER 
    1996 0B06  75 03                 2		JNZ	$+5 
    1997 0B08  E9 0BA7 R             2		JMP	PNUMB 
    1998 0B0B  90                    2		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-38


    1999					WHEN	STRING,PRSTR2
    2000 0B0C  80 FA 04              1		CMP	DL,STRING 
    2001 0B0F  75 03                 2		JNZ	$+5 
    2002 0B11  E9 0BEB R             2		JMP	PRSTR2 
    2003 0B14  90                    2		nop 
    2004					WHEN	T,PT
    2005 0B15  80 FA 01              1		CMP	DL,T 
    2006 0B18  75 03                 2		JNZ	$+5 
    2007 0B1A  EB 36 90              2		JMP	PT 
    2008 0B1D  90                    2		nop 
    2009					WHEN	QUOTE,PQUOT
    2010 0B1E  80 FA 02              1		CMP	DL,QUOTE 
    2011 0B21  75 03                 2		JNZ	$+5 
    2012 0B23  EB 3D 90              2		JMP	PQUOT 
    2013 0B26  90                    2		nop 
    2014					WHEN	NIL,PNIL
    2015 0B27  80 FA 00              1		CMP	DL,NIL 
    2016 0B2A  75 03                 2		JNZ	$+5 
    2017 0B2C  EB 1B 90              2		JMP	PNIL 
    2018 0B2F  90                    2		nop 
    2019 0B30  B6 00				MOV	DH,0
    2020 0B32  52				PUSH	DX
    2021 0B33  50				PUSH	AX
    2022					PRITHS	'?'
    2023 1B3A                        1	dataseg segment 
    2024 1B3A  3F 00                 1		DB '?',0 
    2025 1B3C                        1	dataseg ends 
    2026 0B34  53                    1		push	bx 
    2027 0B35  BB 1B3A R             1		mov	bx,offset tempaddr 
    2028 0B38  E8 018C R             1		CALL	PRINTS 
    2029 0B3B  5B                    1		pop	bx 
    2030 0B3C  58				POP	AX
    2031 0B3D  E8 0C00 R			CALL	PNUM
    2032 0B40  B2 3A				MOV	DL,':'
    2033 0B42  E8 2882 R			CALL	PRINTC
    2034 0B45  58				POP	AX
    2035 0B46  E9 0C00 R			JMP	PNUM
    2036				
    2037				
    2038 0B49				PNIL:	PRITHS	'()'
    2039 1B3C                        1	dataseg segment 
    2040 1B3C  28 29 00              1		DB '()',0 
    2041 1B3F                        1	dataseg ends 
    2042 0B49  53                    1		push	bx 
    2043 0B4A  BB 1B3C R             1		mov	bx,offset tempaddr 
    2044 0B4D  E8 018C R             1		CALL	PRINTS 
    2045 0B50  5B                    1		pop	bx 
    2046 0B51  C3				RET
    2047 0B52				PT:	PRITHS	't'
    2048 1B3F                        1	dataseg segment 
    2049 1B3F  74 00                 1		DB 't',0 
    2050 1B41                        1	dataseg ends 
    2051 0B52  53                    1		push	bx 
    2052 0B53  BB 1B3F R             1		mov	bx,offset tempaddr 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-39


    2053 0B56  E8 018C R             1		CALL	PRINTS 
    2054 0B59  5B                    1		pop	bx 
    2055 0B5A  C3				RET
    2056 0B5B				PNAME:	CDR	A,AX
    2057 0B5B  E8 08AB R             2		CALL	NEWCDRAAX 
    2058 0B5E  E8 0BAD R			CALL	PRSTRI
    2059 0B61  C3				RET
    2060 0B62				PQUOT:	PRITHS 	'quote'
    2061 1B41                        1	dataseg segment 
    2062 1B41  71 75 6F 74 65 00     1		DB 'quote',0 
    2063 1B47                        1	dataseg ends 
    2064 0B62  53                    1		push	bx 
    2065 0B63  BB 1B41 R             1		mov	bx,offset tempaddr 
    2066 0B66  E8 018C R             1		CALL	PRINTS 
    2067 0B69  5B                    1		pop	bx 
    2068 0B6A  C3				RET
    2069 0B6B  50			PQUOT2:	PUSH	AX
    2070					PRITHS 27H
    2071 1B47                        1	dataseg segment 
    2072 1B47  27 00                 1		DB 27H,0 
    2073 1B49                        1	dataseg ends 
    2074 0B6C  53                    1		push	bx 
    2075 0B6D  BB 1B47 R             1		mov	bx,offset tempaddr 
    2076 0B70  E8 018C R             1		CALL	PRINTS 
    2077 0B73  5B                    1		pop	bx 
    2078 0B74  58				POP	AX
    2079					CDR	A,AX
    2080 0B75  E8 08AB R             2		CALL	NEWCDRAAX 
    2081					CAR	A,AX
    2082 0B78  E8 02EB R             2		CALL	NEWCARAAX 
    2083 0B7B  E9 0A47 R			JmP	PRINT
    2084 0B7E  50			PSUBR:	PUSH	AX
    2085					PRITHS	'  (subru: eval='
    2086 1B49                        1	dataseg segment 
    2087 1B49  20 20 28 73 75 62     1		DB '  (subru: eval=',0 
    2088 1B59                        1	dataseg ends 
    2089 0B7F  53                    1		push	bx 
    2090 0B80  BB 1B49 R             1		mov	bx,offset tempaddr 
    2091 0B83  E8 018C R             1		CALL	PRINTS 
    2092 0B86  5B                    1		pop	bx 
    2093 0B87  58				POP	AX
    2094					CAR$cdr	A,b,AX
    2095 0B88  E8 02EB R             3		CALL	NEWCARAAX 
    2096 0B8B  E8 022A R             3		CALL	NEWCDRb 
    2097 0B8E  53				push	bx
    2098 0B8F  E8 3D86 R			call	hexword
    2099					priths ', compile='
    2100 1B59                        1	dataseg segment 
    2101 1B59  2C 20 63 6F 6D 70     1		DB ', compile=',0 
    2102 1B64                        1	dataseg ends 
    2103 0B92  53                    1		push	bx 
    2104 0B93  BB 1B59 R             1		mov	bx,offset tempaddr 
    2105 0B96  E8 018C R             1		CALL	PRINTS 
    2106 0B99  5B                    1		pop	bx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-40


    2107 0B9A  58				pop	ax
    2108 0B9B  E8 3D86 R			call	hexword
    2109					priths  ')'
    2110 1B64                        1	dataseg segment 
    2111 1B64  29 00                 1		DB ')',0 
    2112 1B66                        1	dataseg ends 
    2113 0B9E  53                    1		push	bx 
    2114 0B9F  BB 1B64 R             1		mov	bx,offset tempaddr 
    2115 0BA2  E8 018C R             1		CALL	PRINTS 
    2116 0BA5  5B                    1		pop	bx 
    2117 0BA6  C3				ret
    2118 0BA7				PNUMB:	CAR	A,AX
    2119 0BA7  E8 02EB R             2		CALL	NEWCARAAX 
    2120 0BAA  EB 54 90				JMP	PNUM2
    2121				
    2122 0BAD				PRSTRI:	R$NIL	AX
    2123 0BAD  3D 0000               1		CMP	AX,0 
    2124 0BB0  75 01                 2		JNZ	$+3 
    2125 0BB2  C3                    2		RET 
    2126					CAR$CDR	D,A,AX
    2127 0BB3  EB 20                 4		jmp	short ??0052 
    2128 0BB5                        4	NEWCARDAX: 
    2129 0BB5  8B F8                 5		MOV     DI,AX 
    2130 0BB7  80 3E 18A0 R 00       5		CMP	[EMS_ON],0 
    2131 0BBC  74 08                 5		JZ	??0053 
    2132 0BBE  E8 0023 R             5		CALL	EMSADDR 
    2133 0BC1  26: 8B 55 04          5		MOV	DX,ES:[DI+4] 
    2134 0BC5  C3                    5		RET 
    2135 0BC6                        5	??0053: 
    2136 0BC6  8E 06 0102 R          4		mov	ES,[CARLOW] 
    2137 0BCA  26: 8A 15             4		mov     DL,ES:[DI] 
    2138 0BCD  8E 06 0104 R          4		mov	ES,[CARHIG] 
    2139 0BD1  26: 8A 35             4		mov	DH,ES:[DI] 
    2140 0BD4  C3                    4		RET 
    2141 0BD5                        4	??0052: 
    2142 0BD5  E8 0BB5 R             3		CALL	NEWCARDAX 
    2143 0BD8  E8 0208 R             3		CALL	NEWCDRA 
    2144 0BDB  E8 2882 R			CALL	PRINTC
    2145 0BDE  80 FE 00				CMP	DH,0
    2146					RZ
    2147 0BE1  75 01                 1		JNZ	$+3 
    2148 0BE3  C3                    1		RET 
    2149 0BE4  8A D6				MOV	DL,DH
    2150 0BE6  E8 2882 R			CALL	PRINTC
    2151 0BE9  EB C2				JMP	PRSTRI
    2152				
    2153 0BEB  B2 22			PRSTR2:	MOV	DL,'"'
    2154 0BED  E8 2882 R			CALL	PRINTC
    2155 0BF0  E8 0BAD R			CALL	PRSTRI
    2156 0BF3  B2 22				MOV	DL,'"'
    2157 0BF5  E8 2882 R			CALL	PRINTC
    2158 0BF8  C3				RET
    2159				
    2160 1B66				dataseg segment
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-41


    2161 1B66  00				zeroflag db 0
    2162 1B67				dataseg ends
    2163				
    2164				lisp$subru 'hex',conearg,evalarg
    2165 1B67                        1	dataseg segment 
    2166 1B67  1B2A R                1		DW NXTSBR 
    2167 1B69  0BF9 R                1		dw CODEADDR 
    2168 1B6B  3B76 R                1		dw conearg 
    2169 1B6D  68 65 78 00           1	  	DB 'hex',0 
    2170 1B71                        1	dataseg ends 
    2171 0BF9  E8 0EC7 R             1		CALL	evalarg 
    2172 0BFC  A2 0121 R			mov	hex,al
    2173 0BFF  C3				ret
    2174 0C00				pnum:
    2175 0C00  8A 16 0121 R		pnum2:	mov	dl,[hex]
    2176 0C04  80 FA 00				cmp	dl,0
    2177					jmpn	z,hexword
    2178 0C07  74 03                 1		Jz	$+5 
    2179 0C09  E9 3D86 R             1		JMP	hexword 
    2180 0C0C  90                    1		nop 
    2181 0C0D  E8 0C17 R			CALL	EXPLNU
    2182 0C10  BB 2290 R			MOV	BX, OFFSET ITEMB
    2183 0C13  E8 018C R			CALL	PRINTS
    2184 0C16  C3				RET
    2185				
    2186 0C17  BF 2290 R		EXPLNU:	MOV	DI,OFFSET ITEMB
    2187 0C1A  E8 0C27 R			CALL	EXPLN2
    2188 0C1D  B2 00				MOV	DL,0
    2189 0C1F  88 15			expnCH:	MOV	[DI],DL
    2190 0C21  47				INC	Di
    2191 0C22  C3				RET
    2192				
    2193 0C23  B2 30			pelnol:	MOV	DL,'0'
    2194 0C25  EB F8				JMP	EXPNCH
    2195				
    2196 0C27  3D 0000			EXPLN2:	cmp	ax,0
    2197 0C2A  74 F7				jz	pelnol
    2198 0C2C  B2 00				mov	dl,0
    2199 0C2E  88 16 1B66 R			mov	[zeroflag],dl
    2200 0C32  F6 C4 80				TEST	AH,80H
    2201 0C35  74 07				JZ	PNUM3
    2202 0C37  B2 2D				MOV	DL,'-'
    2203 0C39  E8 0C1F R			CALL	EXPNCH
    2204 0C3C  F7 D8				NEG	AX
    2205 0C3E  BB 2710			PNUM3:	MOV	BX,10000
    2206 0C41  B9 000A				MOV	CX,10
    2207 0C44  83 FB 00			PNUM4:	CMP	BX,0
    2208					RZ
    2209 0C47  75 01                 1		JNZ	$+3 
    2210 0C49  C3                    1		RET 
    2211 0C4A  3B C3				CMP	AX,BX
    2212 0C4C  73 12				JNC	JOOJOO
    2213 0C4E  50				PUSH	AX
    2214 0C4F  8A 16 1B66 R			mov	dl,[zeroflag]
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-42


    2215 0C53  80 FA 00				cmp	dl,0
    2216 0C56  74 1A				jz	pnum5
    2217 0C58  B2 30				MOV	DL,'0'
    2218 0C5A  E8 0C1F R			CALL	EXPNCH
    2219 0C5D  EB 13 90				JMP	PNUM5
    2220 0C60  BA 0000			JOOJOO:	mov	dx,0
    2221 0C63  F7 F3				DIV	BX
    2222 0C65  52				PUSH	DX
    2223 0C66  05 0030				ADD	AX,'0'
    2224 0C69  8A D0				MOV	DL,AL
    2225 0C6B  88 16 1B66 R			mov	[zeroflag],dl
    2226 0C6F  E8 0C1F R			CALL	EXPNCH
    2227 0C72  8B C3			PNUM5:	MOV	AX,BX
    2228 0C74  BA 0000				MOV	dx,0
    2229 0C77  F7 F1				DIV	Cx
    2230 0C79  8B D8				MOV	BX,AX
    2231 0C7B  58				POP	AX
    2232 0C7C  EB C6				JMP	PNUM4
    2233				
    2234				LISP$SUBRU 'cr',cNOARG
    2235 1B71                        1	dataseg segment 
    2236 1B71  1B67 R                1		DW NXTSBR 
    2237 1B73  0C7E R                1		dw CODEADDR 
    2238 1B75  3B6F R                1		dw cNOARG 
    2239 1B77  63 72 00              1	  	DB 'cr',0 
    2240 1B7A                        1	dataseg ends 
    2241 0C7E  B2 0D			CRLF:	mov	dl,13
    2242 0C80  E8 2882 R			call	printc
    2243 0C83  B2 0A				mov	dl,10
    2244 0C85  E8 2882 R			CALL	printc
    2245 0C88  E9 019A R			JMP	NILRET
    2246				
    2247 0C8B				TOODEEP:
    2248 0C8B  B8 0000				mov	ax,nil
    2249 0C8E  A3 0114 R			mov	[trace],ax
    2250					lisp$error 'TOO DEEP NESTED'
    2251 1B7A                        1		dataseg segment 
    2252 1B7A  54 4F 4F 20 44 45     1		   db 'TOO DEEP NESTED',0 
    2253 1B8A                        1		dataseg ends 
    2254 0C91  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    2255 0C97  BB 1B7A R             1		MOV	BX,OFFSET tempaddr 
    2256 0C9A  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    2257 0C9E  E8 4044 R             1		call	ERHE 
    2258 0CA1  C3                    1		ret 
    2259				
    2260				LISP$SUBRU 'eval',CONEARG,ONEARG
    2261 1B8A                        1	dataseg segment 
    2262 1B8A  1B71 R                1		DW NXTSBR 
    2263 1B8C  0CA2 R                1		dw CODEADDR 
    2264 1B8E  3B76 R                1		dw CONEARG 
    2265 1B90  65 76 61 6C 00        1	  	DB 'eval',0 
    2266 1B95                        1	dataseg ends 
    2267 0CA2  E8 0ECD R             1		CALL	ONEARG 
    2268 0CA5				EVAL:
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-43


    2269				;IFDEF	SCROLL_TEST
    2270 0CA5  BB 0040				mov	bx,40h
    2271 0CA8  8E C3				mov	es,bx
    2272 0CAA  26: 8B 1E 0018			mov	bx,es:[18h]
    2273 0CAF  F7 C3 0010			test	bx,10h
    2274 0CB3  74 10				jz	eiind
    2275 0CB5  50				push	ax
    2276					priths	<13,10,'Scroll = '>
    2277 1B95                        1	dataseg segment 
    2278 1B95  0D 0A 53 63 72 6F     1		DB 13,10,'Scroll = ',0 
    2279 1BA1                        1	dataseg ends 
    2280 0CB6  53                    1		push	bx 
    2281 0CB7  BB 1B95 R             1		mov	bx,offset tempaddr 
    2282 0CBA  E8 018C R             1		CALL	PRINTS 
    2283 0CBD  5B                    1		pop	bx 
    2284 0CBE  E8 1A07 R			call	pprint
    2285 0CC1  E8 0000 R			call	ems_reset
    2286 0CC4  58				pop	ax
    2287				;ENDIF
    2288 0CC5				eiind:
    2289 0CC5  8B DC				mov	bx,sp
    2290				ELSE
    2291 0CC7  81 FB 1000			cmp	bx,1000H
    2292 0CCB  72 BE				jc	toodeep
    2293				ENDIF
    2294					J$ATOM	AX,EATOM
    2295 0CCD  3D 0300               1		CMP	AX,FSTNODE 
    2296 0CD0  73 03                 2		JNC	$+5 
    2297 0CD2  E9 0E0C R             2		JMP	EATOM 
    2298 0CD5  90                    2		nop 
    2299 0CD6  8B F8                 2		MOV     DI,AX 
    2300 0CD8  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    2301 0CDD  74 05                 2		JZ	??0054 
    2302 0CDF  E8 0023 R             2		CALL	EMSADDR 
    2303 0CE2  EB 04                 2		jmp	short ??0055 
    2304 0CE4                        2	??0054: 
    2305 0CE4  8E 06 0100 R          2		mov	ES,[NODTYP] 
    2306 0CE8                        2	??0055: 
    2307 0CE8  26: 8A 15             2		MOV	DL,ES:[DI] 
    2308 0CEB  80 FA 0F              1		CMP	DL,LIST 
    2309 0CEE  74 03                 2		JZ	$+5 
    2310 0CF0  E9 0E0C R             2		JMP	EATOM 
    2311 0CF3  90                    2		nop 
    2312					CAR	B
    2313 0CF4  EB 1B                 3		jmp	short ??0056 
    2314 0CF6                        3	NEWCARB: 
    2315 0CF6  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    2316 0CFB  74 05                 4		JZ	??0057 
    2317 0CFD  26: 8B 5D 04          4		MOV	BX,ES:[DI+4] 
    2318 0D01  C3                    4		RET 
    2319 0D02                        4	??0057: 
    2320 0D02  8E 06 0102 R          3		mov	ES,[CARLOW] 
    2321 0D06  26: 8A 1D             3		mov     BL,ES:[DI] 
    2322 0D09  8E 06 0104 R          3		mov	ES,[CARHIG] 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-44


    2323 0D0D  26: 8A 3D             3		mov	BH,ES:[DI] 
    2324 0D10  C3                    3		RET 
    2325 0D11                        3	??0056: 
    2326 0D11  E8 0CF6 R             2		CALL	NEWCARB 
    2327 0D14  83 FB 02				CMP	BX,QUOTE
    2328					JMPN	NZ,EQUOT
    2329 0D17  75 03                 1		JNZ	$+5 
    2330 0D19  E9 0E3D R             1		JMP	EQUOT 
    2331 0D1C  90                    1		nop 
    2332 0D1D  53				PUSH	BX
    2333					CDR	A
    2334 0D1E  E8 0208 R             2		CALL	NEWCDRA 
    2335 0D21  8B 1E 0110 R			MOV	BX,[ARGSTA]
    2336 0D25  E8 05AE R			CALL	CONS
    2337 0D28  A3 0110 R			MOV	[ARGSTA],AX
    2338 0D2B  58				POP	AX
    2339 0D2C  50				push	ax
    2340 0D2D  8B 1E 0114 R			MOV	BX,[trace]
    2341 0D31  E8 0D94 R			call	atomize
    2342 0D34  E8 05AE R			CALL	CONS
    2343 0D37  A3 0114 R			MOV	[trace],AX
    2344 0D3A  58				pop	ax
    2345					frame	evalrest
    2346 0D3B  BF 0D59 R             1		mov	di,offset evalrest 
    2347 0D3E  57                    1		push	DI 
    2348 0D3F  FF 36 1894 R          1		PUSH	[STACKMARK] 
    2349 0D43  89 26 1894 R          1		MOV	[STACKMARK],SP 
    2350 0D47  E8 0CA5 R			CALL	EVAL
    2351					J$nil	ax,evaerr
    2352 0D4A  3D 0000               1		CMP	ax,0 
    2353 0D4D  75 03                 2		JnZ	$+5 
    2354 0D4F  EB 69 90              2		JMP	evaerr 
    2355 0D52  90                    2		nop 
    2356 0D53  E8 0CA5 R		evacon:	CALL	EVAL
    2357 0D56  E9 2080 R			jmp	framexit
    2358 0D59				evalrest:
    2359 0D59  8B 1E 0114 R			MOV	BX,[trace]
    2360					CDR	B,BX
    2361 0D5D  EB 20                 3		jmp	short ??0058 
    2362 0D5F                        3	NEWCDRBBX: 
    2363 0D5F  8B FB                 4		MOV     DI,BX 
    2364 0D61  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    2365 0D66  74 08                 4		JZ	??0059 
    2366 0D68  E8 0023 R             4		CALL	EMSADDR 
    2367 0D6B  26: 8B 5D 06          4		MOV	BX,ES:[DI+6] 
    2368 0D6F  C3                    4		RET 
    2369 0D70                        4	??0059: 
    2370 0D70  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    2371 0D74  26: 8A 1D             3		mov     BL,ES:[DI] 
    2372 0D77  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    2373 0D7B  26: 8A 3D             3		mov	BH,ES:[DI] 
    2374 0D7E  C3                    3		RET 
    2375 0D7F                        3	??0058: 
    2376 0D7F  E8 0D5F R             2		CALL	NEWCDRBBX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-45


    2377 0D82  89 1E 0114 R			MOV	[trace],BX
    2378 0D86  8B 0E 0110 R		DROPARG:MOV	CX,[ARGSTA]
    2379					CDR	C,CX
    2380 0D8A  E8 09BC R             2		CALL	NEWCDRCCX 
    2381 0D8D  89 0E 0110 R			MOV	[ARGSTA],CX
    2382 0D91  E9 1DA7 R			jmp	frame_ret
    2383 0D94				atomize:r$atom	ax
    2384 0D94  3D 0300               1		CMP	ax,FSTNODE 
    2385 0D97  73 01                 2		JNC	$+3 
    2386 0D99  C3                    2		RET 
    2387 0D9A  8B F8                 2		MOV     DI,ax 
    2388 0D9C  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    2389 0DA1  74 05                 2		JZ	??005A 
    2390 0DA3  E8 0023 R             2		CALL	EMSADDR 
    2391 0DA6  EB 04                 2		jmp	short ??005B 
    2392 0DA8                        2	??005A: 
    2393 0DA8  8E 06 0100 R          2		mov	ES,[NODTYP] 
    2394 0DAC                        2	??005B: 
    2395 0DAC  26: 8A 15             2		MOV	DL,ES:[DI] 
    2396 0DAF  80 FA 0F              1		CMP	DL,LIST 
    2397 0DB2  74 01                 2		JZ	$+3 
    2398 0DB4  C3                    2		RET 
    2399					car	a
    2400 0DB5  E8 024B R             2		CALL	NEWCARa 
    2401 0DB8  EB DA				jmp	atomize
    2402				
    2403 0DBA  E8 0C7E R		evaerr:	call	crlf
    2404					priths 'function not defined='
    2405 1BA1                        1	dataseg segment 
    2406 1BA1  66 75 6E 63 74 69     1		DB 'function not defined=',0 
    2407 1BB7                        1	dataseg ends 
    2408 0DBD  53                    1		push	bx 
    2409 0DBE  BB 1BA1 R             1		mov	bx,offset tempaddr 
    2410 0DC1  E8 018C R             1		CALL	PRINTS 
    2411 0DC4  5B                    1		pop	bx 
    2412 0DC5  8B 1E 0114 R			mov	bx,[trace]
    2413					car	a,bx
    2414 0DC9  EB 20                 3		jmp	short ??005C 
    2415 0DCB                        3	NEWCARabx: 
    2416 0DCB  8B FB                 4		MOV     DI,bx 
    2417 0DCD  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    2418 0DD2  74 08                 4		JZ	??005D 
    2419 0DD4  E8 0023 R             4		CALL	EMSADDR 
    2420 0DD7  26: 8B 45 04          4		MOV	aX,ES:[DI+4] 
    2421 0DDB  C3                    4		RET 
    2422 0DDC                        4	??005D: 
    2423 0DDC  8E 06 0102 R          3		mov	ES,[CARLOW] 
    2424 0DE0  26: 8A 05             3		mov     aL,ES:[DI] 
    2425 0DE3  8E 06 0104 R          3		mov	ES,[CARHIG] 
    2426 0DE7  26: 8A 25             3		mov	aH,ES:[DI] 
    2427 0DEA  C3                    3		RET 
    2428 0DEB                        3	??005C: 
    2429 0DEB  E8 0DCB R             2		CALL	NEWCARabx 
    2430 0DEE  E8 0A47 R			call	print
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-46


    2431 0DF1  E8 0C7E R			call	crlf
    2432					priths '		args='
    2433 1BB7                        1	dataseg segment 
    2434 1BB7  09 09 61 72 67 73     1		DB '		args=',0 
    2435 1BBF                        1	dataseg ends 
    2436 0DF4  53                    1		push	bx 
    2437 0DF5  BB 1BB7 R             1		mov	bx,offset tempaddr 
    2438 0DF8  E8 018C R             1		CALL	PRINTS 
    2439 0DFB  5B                    1		pop	bx 
    2440 0DFC  8B 1E 0110 R			mov	bx,[argsta]
    2441					car	a,bx
    2442 0E00  E8 0DCB R             2		CALL	NEWCARabx 
    2443 0E03  E8 0A47 R			call	print
    2444 0E06  B8 0000				mov	ax,nil
    2445 0E09  E9 0D53 R			jmp	evacon
    2446				
    2447 0E0C				EATOM:	TYPEOF	DL,AX
    2448 0E0C  8B F8                 1		MOV     DI,AX 
    2449 0E0E  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    2450 0E13  74 05                 1		JZ	??005E 
    2451 0E15  E8 0023 R             1		CALL	EMSADDR 
    2452 0E18  EB 04                 1		jmp	short ??005F 
    2453 0E1A                        1	??005E: 
    2454 0E1A  8E 06 0100 R          1		mov	ES,[NODTYP] 
    2455 0E1E                        1	??005F: 
    2456 0E1E  26: 8A 15             1		MOV	DL,ES:[DI] 
    2457					WHEN	SYMBOL,ENAME
    2458 0E21  80 FA 05              1		CMP	DL,SYMBOL 
    2459 0E24  75 03                 2		JNZ	$+5 
    2460 0E26  EB 1C 90              2		JMP	ENAME 
    2461 0E29  90                    2		nop 
    2462					when	FSYMBO,EFSYM
    2463 0E2A  80 FA 06              1		CMP	DL,FSYMBO 
    2464 0E2D  75 03                 2		JNZ	$+5 
    2465 0E2F  EB 17 90              2		JMP	EFSYM 
    2466 0E32  90                    2		nop 
    2467					WHEN	SUBRU,ESUBRU	
    2468 0E33  80 FA 07              1		CMP	DL,SUBRU 
    2469 0E36  75 03                 2		JNZ	$+5 
    2470 0E38  EB 14 90              2		JMP	ESUBRU 
    2471 0E3B  90                    2		nop 
    2472 0E3C  C3				RET
    2473 0E3D				EQUOT:	CDR	A
    2474 0E3D  E8 0208 R             2		CALL	NEWCDRA 
    2475					CAR	A,AX
    2476 0E40  E8 02EB R             2		CALL	NEWCARAAX 
    2477 0E43  C3				RET
    2478 0E44				ENAME:	CAR	A
    2479 0E44  E8 024B R             2		CALL	NEWCARA 
    2480 0E47  C3				RET
    2481 0E48				EFSYM:	CAR	B
    2482 0E48  E8 0CF6 R             2		CALL	NEWCARB 
    2483 0E4B  8B 07				MOV	AX,[BX]
    2484 0E4D  C3				RET
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-47


    2485				
    2486				
    2487 0E4E				ESUBRU:	CAR	A
    2488 0E4E  E8 024B R             2		CALL	NEWCARA 
    2489 0E51  50				PUSH	AX
    2490 0E52  C3				RET
    2491				
    2492 0E53  A1 0110 R		ARG:	MOV	AX,[ARGSTA]
    2493					R$NIL	AX
    2494 0E56  3D 0000               1		CMP	AX,0 
    2495 0E59  75 01                 2		JNZ	$+3 
    2496 0E5B  C3                    2		RET 
    2497					CAR	A,AX
    2498 0E5C  E8 02EB R             2		CALL	NEWCARAAX 
    2499					R$NIL	AX
    2500 0E5F  3D 0000               1		CMP	AX,0 
    2501 0E62  75 01                 2		JNZ	$+3 
    2502 0E64  C3                    2		RET 
    2503					J$ATOM	AX,OUTOA
    2504 0E65  3D 0300               1		CMP	AX,FSTNODE 
    2505 0E68  73 03                 2		JNC	$+5 
    2506 0E6A  EB 49 90              2		JMP	OUTOA 
    2507 0E6D  90                    2		nop 
    2508 0E6E  8B F8                 2		MOV     DI,AX 
    2509 0E70  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    2510 0E75  74 05                 2		JZ	??0060 
    2511 0E77  E8 0023 R             2		CALL	EMSADDR 
    2512 0E7A  EB 04                 2		jmp	short ??0061 
    2513 0E7C                        2	??0060: 
    2514 0E7C  8E 06 0100 R          2		mov	ES,[NODTYP] 
    2515 0E80                        2	??0061: 
    2516 0E80  26: 8A 15             2		MOV	DL,ES:[DI] 
    2517 0E83  80 FA 0F              1		CMP	DL,LIST 
    2518 0E86  74 03                 2		JZ	$+5 
    2519 0E88  EB 2B 90              2		JMP	OUTOA 
    2520 0E8B  90                    2		nop 
    2521 0E8C				NOUTO:	CDR	B
    2522 0E8C  E8 022A R             2		CALL	NEWCDRB 
    2523					CAR	A
    2524 0E8F  E8 024B R             2		CALL	NEWCARA 
    2525					RPLACA	[ARGSTA],B
    2526 0E92  8B 3E 0110 R          1		MOV	DI,[ARGSTA] 
    2527 0E96  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    2528 0E9B  74 09                 2		JZ	??0062 
    2529 0E9D  E8 0023 R             2		CALL	EMSADDR 
    2530 0EA0  26: 89 5D 04          2		MOV	ES:[DI+4],BX 
    2531 0EA4  EB 0E                 2		JMP	SHORT ??0063 
    2532 0EA6  8E 06 0102 R          2	??0062:	mov	ES,[CARLOW] 
    2533 0EAA  26: 88 1D             2		mov     ES:[DI],BL 
    2534 0EAD  8E 06 0104 R          2		mov	ES,[CARHIG] 
    2535 0EB1  26: 88 3D             2		mov	ES:[DI],BH 
    2536 0EB4                        2	??0063: 
    2537 0EB4  C3				RET
    2538 0EB5  E8 0CA5 R		OUTOA:	CALL	EVAL
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-48


    2539					CAR	A,AX
    2540 0EB8  E8 02EB R             2		CALL	NEWCARAAX 
    2541 0EBB  EB CF				JMP	NOUTO
    2542				
    2543 0EBD  A1 0110 R		EOFARG:	MOV	AX,[ARGSTA]
    2544					CAR	A,AX
    2545 0EC0  E8 02EB R             2		CALL	NEWCARAAX 
    2546 0EC3  3D 0000				CMP	AX,0
    2547 0EC6  C3				RET
    2548				
    2549 0EC7  E8 0E53 R		EVALARG: CALL	ARG
    2550 0ECA  E9 0CA5 R			JMP	EVAL
    2551				
    2552 0ECD  A1 0110 R		ONEARG:	MOV	AX,[ARGSTA]
    2553					CAR	A,AX
    2554 0ED0  E8 02EB R             2		CALL	NEWCARAAX 
    2555					CAR	A,AX
    2556 0ED3  E8 02EB R             2		CALL	NEWCARAAX 
    2557 0ED6  E9 0CA5 R			JMP	EVAL
    2558					
    2559 0ED9  E8 0EC7 R		TWOARG:	CALL	EVALARG
    2560 0EDC  50				PUSH	AX
    2561 0EDD  E8 0EC7 R			CALL	EVALARG
    2562 0EE0  8B D8				MOV	BX,AX
    2563 0EE2  58				POP	AX
    2564 0EE3  C3				RET
    2565 0EE4  E8 0EC7 R		TREARG:	CALL	EVALARG
    2566 0EE7  50				PUSH	AX
    2567 0EE8  E8 0EC7 R			CALL	EVALARG
    2568 0EEB  50				PUSH	AX
    2569 0EEC  E8 0EC7 R			CALL	EVALARG
    2570 0EEF  50				PUSH	AX
    2571 0EF0  59				POP	CX
    2572 0EF1  5B				POP	BX
    2573 0EF2  58				POP	AX
    2574 0EF3  C3				RET
    2575 0EF4  E8 0EC7 R		FOUARG:	CALL	EVALARG
    2576 0EF7  50				PUSH	AX
    2577 0EF8  E8 0EC7 R			CALL	EVALARG
    2578 0EFB  50				PUSH	AX
    2579 0EFC  E8 0EC7 R			CALL	EVALARG
    2580 0EFF  50				PUSH	AX
    2581 0F00  E8 0EC7 R			CALL	EVALARG
    2582 0F03  50				PUSH	AX
    2583 0F04  5A				POP	DX
    2584 0F05  59				POP	CX
    2585 0F06  5B				POP	BX
    2586 0F07  58				POP	AX
    2587 0F08  C3				RET
    2588				
    2589 0F09				NUMERR:	lisp$error 'NOT NUMBER = '
    2590 1BBF                        1		dataseg segment 
    2591 1BBF  4E 4F 54 20 4E 55     1		   db 'NOT NUMBER = ',0 
    2592 1BCD                        1		dataseg ends 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-49


    2593 0F09  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    2594 0F0F  BB 1BBF R             1		MOV	BX,OFFSET tempaddr 
    2595 0F12  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    2596 0F16  E8 4044 R             1		call	ERHE 
    2597 0F19  C3                    1		ret 
    2598				
    2599 0F1A  E8 0EC7 R		NUMARG:	CALL	EVALARG
    2600 0F1D  3D 0300			NUMVAL:	CMP	AX,FSTNODE
    2601 0F20  72 20				jC	numvalim
    2602					TYPEOF	DL,AX
    2603 0F22  8B F8                 1		MOV     DI,AX 
    2604 0F24  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    2605 0F29  74 05                 1		JZ	??0064 
    2606 0F2B  E8 0023 R             1		CALL	EMSADDR 
    2607 0F2E  EB 04                 1		jmp	short ??0065 
    2608 0F30                        1	??0064: 
    2609 0F30  8E 06 0100 R          1		mov	ES,[NODTYP] 
    2610 0F34                        1	??0065: 
    2611 0F34  26: 8A 15             1		MOV	DL,ES:[DI] 
    2612 0F37  80 FA 03				CMP	DL,NUMBER
    2613 0F3A  74 02				jz	numvalcar
    2614 0F3C  EB CB				jmp	numerr
    2615 0F3E				numvalcar:
    2616					CAR	A
    2617 0F3E  E8 024B R             2		CALL	NEWCARA 
    2618 0F41  C3				RET
    2619 0F42				numvalim:
    2620 0F42  3D 0003				CMP	AX,ZERONUM
    2621 0F45  72 C2				JC	NUMERR
    2622 0F47  2D 0003				sub	AX,ZERONUM
    2623 0F4A  C3				ret
    2624 0F4B  E8 0F1A R		TWONUM:	CALL	NUMARG
    2625 0F4E  50				PUSH	AX
    2626 0F4F  E8 0F1A R			CALL	NUMARG
    2627 0F52  8B D8				MOV	BX,AX
    2628 0F54  58				POP	AX
    2629 0F55  C3				RET
    2630				
    2631				lisp$subru 'symbol-string',cantcomp,strarg
    2632 1BCD                        1	dataseg segment 
    2633 1BCD  1B8A R                1		DW NXTSBR 
    2634 1BCF  0F56 R                1		dw CODEADDR 
    2635 1BD1  3B6A R                1		dw cantcomp 
    2636 1BD3  73 79 6D 62 6F 6C     1	  	DB 'symbol-string',0 
    2637 1BE1                        1	dataseg ends 
    2638 0F56  E8 0F5A R             1		CALL	strarg 
    2639 0F59  C3				ret
    2640				
    2641 0F5A  E8 0EC7 R		STRARG:	CALL	EVALARG
    2642 0F5D				getstr:	typeof	DL,AX
    2643 0F5D  8B F8                 1		MOV     DI,AX 
    2644 0F5F  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    2645 0F64  74 05                 1		JZ	??0066 
    2646 0F66  E8 0023 R             1		CALL	EMSADDR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-50


    2647 0F69  EB 04                 1		jmp	short ??0067 
    2648 0F6B                        1	??0066: 
    2649 0F6B  8E 06 0100 R          1		mov	ES,[NODTYP] 
    2650 0F6F                        1	??0067: 
    2651 0F6F  26: 8A 15             1		MOV	DL,ES:[DI] 
    2652 0F72  80 FA 04				CMP	DL,STRING
    2653					RZ
    2654 0F75  75 01                 1		JNZ	$+3 
    2655 0F77  C3                    1		RET 
    2656 0F78  80 FA 06				cmp	dl,fsymbo
    2657 0F7B  74 05				jz	getst2
    2658 0F7D  80 FA 05				CMP	DL,SYMBOL
    2659 0F80  75 04				JNZ	USTRER
    2660 0F82				getst2:	CDR	A,AX
    2661 0F82  E8 08AB R             2		CALL	NEWCDRAAX 
    2662 0F85  C3				RET
    2663 0F86				USTRER: LISP$ERROR 'NOT STRING ='
    2664 1BE1                        1		dataseg segment 
    2665 1BE1  4E 4F 54 20 53 54     1		   db 'NOT STRING =',0 
    2666 1BEE                        1		dataseg ends 
    2667 0F86  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    2668 0F8C  BB 1BE1 R             1		MOV	BX,OFFSET tempaddr 
    2669 0F8F  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    2670 0F93  E8 4044 R             1		call	ERHE 
    2671 0F96  C3                    1		ret 
    2672				
    2673 0F97  E8 0E53 R		QNAMARg:CALL	ARG
    2674 0F9A				tstnam:	typeof	DL,AX
    2675 0F9A  8B F8                 1		MOV     DI,AX 
    2676 0F9C  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    2677 0FA1  74 05                 1		JZ	??0068 
    2678 0FA3  E8 0023 R             1		CALL	EMSADDR 
    2679 0FA6  EB 04                 1		jmp	short ??0069 
    2680 0FA8                        1	??0068: 
    2681 0FA8  8E 06 0100 R          1		mov	ES,[NODTYP] 
    2682 0FAC                        1	??0069: 
    2683 0FAC  26: 8A 15             1		MOV	DL,ES:[DI] 
    2684 0FAF  80 FA 05				CmP	DL,SYMBOL
    2685					rz
    2686 0FB2  75 01                 1		JNZ	$+3 
    2687 0FB4  C3                    1		RET 
    2688 0FB5  80 FA 06				CMP	DL,FSYMBO
    2689					RZ
    2690 0FB8  75 01                 1		JNZ	$+3 
    2691 0FBA  C3                    1		RET 
    2692 0FBB				NAMERR:	LISP$ERROR 'NOT IDENT ='
    2693 1BEE                        1		dataseg segment 
    2694 1BEE  4E 4F 54 20 49 44     1		   db 'NOT IDENT =',0 
    2695 1BFA                        1		dataseg ends 
    2696 0FBB  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    2697 0FC1  BB 1BEE R             1		MOV	BX,OFFSET tempaddr 
    2698 0FC4  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    2699 0FC8  E8 4044 R             1		call	ERHE 
    2700 0FCB  C3                    1		ret 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-51


    2701				
    2702 0FCC  E8 0EC7 R		NAMARG:	CALL	EVALARG
    2703 0FCF  EB C9				JMP	tstnam
    2704				
    2705				LISP$SUBRU 'setq',csetq
    2706 1BFA                        1	dataseg segment 
    2707 1BFA  1BCD R                1		DW NXTSBR 
    2708 1BFC  0FD1 R                1		dw CODEADDR 
    2709 1BFE  102C R                1		dw csetq 
    2710 1C00  73 65 74 71 00        1	  	DB 'setq',0 
    2711 1C05                        1	dataseg ends 
    2712 0FD1  E8 0F97 R		SETQ:	CALL	QNAMARG
    2713 0FD4  80 FA 06				CMP	DL,FSYMBO
    2714 0FD7  74 26				jz	SETFSY
    2715 0FD9  50			SET1:	PUSH	AX
    2716 0FDA  E8 0EC7 R			CALL	EVALARG
    2717 0FDD  5B				POP	BX
    2718					RPLACA	BX,A
    2719 0FDE  8B FB                 1		MOV	DI,BX 
    2720 0FE0  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    2721 0FE5  74 09                 2		JZ	??006A 
    2722 0FE7  E8 0023 R             2		CALL	EMSADDR 
    2723 0FEA  26: 89 45 04          2		MOV	ES:[DI+4],AX 
    2724 0FEE  EB 0E                 2		JMP	SHORT ??006B 
    2725 0FF0  8E 06 0102 R          2	??006A:	mov	ES,[CARLOW] 
    2726 0FF4  26: 88 05             2		mov     ES:[DI],AL 
    2727 0FF7  8E 06 0104 R          2		mov	ES,[CARHIG] 
    2728 0FFB  26: 88 25             2		mov	ES:[DI],AH 
    2729 0FFE                        2	??006B: 
    2730 0FFE  C3				RET
    2731 0FFF  50			SETFSY:	PUSH	AX
    2732 1000  E8 0EC7 R			CALL	EVALARG
    2733 1003  5B				POP	BX
    2734					CAR	B,BX
    2735 1004  EB 20                 3		jmp	short ??006C 
    2736 1006                        3	NEWCARBBX: 
    2737 1006  8B FB                 4		MOV     DI,BX 
    2738 1008  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    2739 100D  74 08                 4		JZ	??006D 
    2740 100F  E8 0023 R             4		CALL	EMSADDR 
    2741 1012  26: 8B 5D 04          4		MOV	BX,ES:[DI+4] 
    2742 1016  C3                    4		RET 
    2743 1017                        4	??006D: 
    2744 1017  8E 06 0102 R          3		mov	ES,[CARLOW] 
    2745 101B  26: 8A 1D             3		mov     BL,ES:[DI] 
    2746 101E  8E 06 0104 R          3		mov	ES,[CARHIG] 
    2747 1022  26: 8A 3D             3		mov	BH,ES:[DI] 
    2748 1025  C3                    3		RET 
    2749 1026                        3	??006C: 
    2750 1026  E8 1006 R             2		CALL	NEWCARBBX 
    2751 1029  89 07				MOV	[BX],AX
    2752 102B  C3				RET
    2753				
    2754				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-52


    2755				
    2756 102C				csetq:	car$cdr	a,b,bx
    2757 102C  E8 0DCB R             3		CALL	NEWCARabx 
    2758 102F  E8 022A R             3		CALL	NEWCDRb 
    2759					car	b,bx
    2760 1032  E8 1006 R             2		CALL	NEWCARbbx 
    2761 1035  E8 330A R		ccsetq:	call	makefsym
    2762					car	a
    2763 1038  E8 024B R             2		CALL	NEWCARa 
    2764 103B  50				push	ax
    2765 103C  8B C3				mov	ax,bx
    2766 103E  E8 3844 R			CALL	NCOMPI
    2767 1041  58				pop	ax
    2768 1042  E9 3A63 R			jmp	mvtoim
    2769				
    2770				
    2771				LISP$SUBRU 'set',ctwoarg,twoarg
    2772 1C05                        1	dataseg segment 
    2773 1C05  1BFA R                1		DW NXTSBR 
    2774 1C07  1045 R                1		dw CODEADDR 
    2775 1C09  3B94 R                1		dw ctwoarg 
    2776 1C0B  73 65 74 00           1	  	DB 'set',0 
    2777 1C0F                        1	dataseg ends 
    2778 1045  E8 0ED9 R             1		CALL	twoarg 
    2779 1048				sett:	typeof	dl,ax
    2780 1048  8B F8                 1		MOV     DI,ax 
    2781 104A  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    2782 104F  74 05                 1		JZ	??006E 
    2783 1051  E8 0023 R             1		CALL	EMSADDR 
    2784 1054  EB 04                 1		jmp	short ??006F 
    2785 1056                        1	??006E: 
    2786 1056  8E 06 0100 R          1		mov	ES,[NODTYP] 
    2787 105A                        1	??006F: 
    2788 105A  26: 8A 15             1		MOV	dl,ES:[DI] 
    2789 105D  80 FA 06				cmp	dl,fsymbo
    2790 1060  74 2B				jz	cstfym
    2791 1062  80 FA 05				cmp	dl,symbol
    2792					jmpn	z,namerr
    2793 1065  74 03                 1		Jz	$+5 
    2794 1067  E9 0FBB R             1		JMP	namerr 
    2795 106A  90                    1		nop 
    2796 106B  93				xchg	ax,bx
    2797 106C				SETBXAX:rplaca bx,a
    2798 106C  8B FB                 1		MOV	DI,bx 
    2799 106E  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    2800 1073  74 09                 2		JZ	??0070 
    2801 1075  E8 0023 R             2		CALL	EMSADDR 
    2802 1078  26: 89 45 04          2		MOV	ES:[DI+4],aX 
    2803 107C  EB 0E                 2		JMP	SHORT ??0071 
    2804 107E  8E 06 0102 R          2	??0070:	mov	ES,[CARLOW] 
    2805 1082  26: 88 05             2		mov     ES:[DI],aL 
    2806 1085  8E 06 0104 R          2		mov	ES,[CARHIG] 
    2807 1089  26: 88 25             2		mov	ES:[DI],aH 
    2808 108C                        2	??0071: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-53


    2809 108C  C3				ret
    2810 108D				cstFym:	car	a,ax
    2811 108D  E8 02EB R             2		CALL	NEWCARaax 
    2812 1090  93				xchg	ax,bx
    2813 1091  89 07				mov	[bx],ax
    2814 1093  C3				ret
    2815				
    2816				
    2817				
    2818				LISP$SUBRU 'defq',cdefq,QNAMARG
    2819 1C0F                        1	dataseg segment 
    2820 1C0F  1C05 R                1		DW NXTSBR 
    2821 1C11  1094 R                1		dw CODEADDR 
    2822 1C13  10A3 R                1		dw cdefq 
    2823 1C15  64 65 66 71 00        1	  	DB 'defq',0 
    2824 1C1A                        1	dataseg ends 
    2825 1094  E8 0F97 R             1		CALL	QNAMARG 
    2826 1097  50			DEF1:	PUSH	AX
    2827 1098  E8 0E53 R			CALL	ARG
    2828 109B  5B				POP	BX
    2829 109C  93				XCHG	AX,BX
    2830 109D  50				push	ax
    2831 109E  E8 1048 R			call	SETT
    2832 10A1  58				pop	ax
    2833 10A2  C3				RET
    2834 10A3				cdefq:	car$cdr	a,b,bx
    2835 10A3  E8 0DCB R             3		CALL	NEWCARabx 
    2836 10A6  E8 022A R             3		CALL	NEWCDRb 
    2837 10A9  50				push	ax
    2838					car	a,bx
    2839 10AA  E8 0DCB R             2		CALL	NEWCARabx 
    2840 10AD  E8 39E4 R			call	csex
    2841 10B0  E8 3D70 R			call	mov_bx_ax
    2842 10B3  58				pop	ax
    2843 10B4  E8 39E4 R			call	csex
    2844					COCALL	SETT,'SET AX,BX'
    2845 10B7  B8 1048 R             1		mov	ax,offset SETT 
    2846 10BA  E8 35FD R             1		call	ccall 
    2847 10BD  8A 16 2CFE R          1		mov	dl,[codebug] 
    2848 10C1  80 FA 00              1		cmp	dl,0 
    2849 10C4  74 10                 1		jz	??0072 
    2850 1C1A                        2	dataseg segment 
    2851 1C1A  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    2852 1C23                        2	dataseg ends 
    2853 10C6  53                    2		push	bx 
    2854 10C7  BB 1C1A R             2		mov	bx,offset tempaddr 
    2855 10CA  E8 018C R             2		CALL	PRINTS 
    2856 10CD  5B                    2		pop	bx 
    2857 1C23                        2	dataseg segment 
    2858 1C23  53 45 54 20 41 58     2		DB 'SET AX,BX',0 
    2859 1C2D                        2	dataseg ends 
    2860 10CE  53                    2		push	bx 
    2861 10CF  BB 1C23 R             2		mov	bx,offset tempaddr 
    2862 10D2  E8 018C R             2		CALL	PRINTS 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-54


    2863 10D5  5B                    2		pop	bx 
    2864 10D6                        1	??0072: 
    2865 10D6  C3				ret
    2866				
    2867				LISP$SUBRU 'abs',cabs,numarg
    2868 1C2D                        1	dataseg segment 
    2869 1C2D  1C0F R                1		DW NXTSBR 
    2870 1C2F  10D7 R                1		dw CODEADDR 
    2871 1C31  10E8 R                1		dw cabs 
    2872 1C33  61 62 73 00           1	  	DB 'abs',0 
    2873 1C37                        1	dataseg ends 
    2874 10D7  E8 0F1A R             1		CALL	numarg 
    2875 10DA  F6 C4 80				test	AH,80H
    2876					jmpn	nz,maknum
    2877 10DD  75 03                 1		Jnz	$+5 
    2878 10DF  E9 05C9 R             1		JMP	maknum 
    2879 10E2  90                    1		nop 
    2880 10E3  F7 D8				neg	ax
    2881 10E5  E9 05C9 R			jmp	maknum
    2882 10E8  E8 3C59 R		cabs:	call	cnumar1
    2883					compil	0,<TEST AH,80H>,'TEST AH,80H'
    2884 1C37                        1	DATASEG	SEGMENT 
    2885 1C37  54 45 53 54 20 41     1		DB 'TEST AH,80H',0 
    2886 1C43                        1	DATASEG ENDS 
    2887 10EB  51                    1		push	cx 
    2888 10EC  53                    1		PUSH	BX 
    2889 10ED  B9 0003               1		MOV	CX,offset (??0074-??0073) 
    2890 10F0  BE 10FE R             1		mov	si,offset ??0073 
    2891 10F3  BB 1C37 R             1		MOV	BX,offset STRA 
    2892 10F6  E8 34DE R             1		call	maccod 
    2893 10F9  5B                    1		POP	BX 
    2894 10FA  59                    1		pop	cx 
    2895 10FB  EB 04 90              1		jmp	??0074 
    2896 10FE  F6 C4 80              1	??0073:	TEST AH,80H 
    2897 1101                        1	??0074: 
    2898					compil	0,<JZ   $+4>,'JZ   $+4'
    2899 1C43                        1	DATASEG	SEGMENT 
    2900 1C43  4A 5A 20 20 20 24     1		DB 'JZ   $+4',0 
    2901 1C4C                        1	DATASEG ENDS 
    2902 1101  51                    1		push	cx 
    2903 1102  53                    1		PUSH	BX 
    2904 1103  B9 0002               1		MOV	CX,offset (??0076-??0075) 
    2905 1106  BE 1114 R             1		mov	si,offset ??0075 
    2906 1109  BB 1C43 R             1		MOV	BX,offset STRA 
    2907 110C  E8 34DE R             1		call	maccod 
    2908 110F  5B                    1		POP	BX 
    2909 1110  59                    1		pop	cx 
    2910 1111  EB 03 90              1		jmp	??0076 
    2911 1114  74 02                 1	??0075:	JZ   $+4 
    2912 1116                        1	??0076: 
    2913 1116  EB 0C 90				jmp	cneg
    2914				
    2915				LISP$SUBRU 'minus',CMINUS,NUMARG
    2916 1C4C                        1	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-55


    2917 1C4C  1C2D R                1		DW NXTSBR 
    2918 1C4E  1119 R                1		dw CODEADDR 
    2919 1C50  1121 R                1		dw CMINUS 
    2920 1C52  6D 69 6E 75 73 00     1	  	DB 'minus',0 
    2921 1C58                        1	dataseg ends 
    2922 1119  E8 0F1A R             1		CALL	NUMARG 
    2923 111C  F7 D8				neg	ax
    2924 111E  E9 05C9 R			jmp	maknum
    2925				
    2926 1121  E8 3C59 R		CMINUS:	CALL	CNUMAR1
    2927 1124				CNEG:	compil	0,<NEG AX>,'NEG  AX'
    2928 1C58                        1	DATASEG	SEGMENT 
    2929 1C58  4E 45 47 20 20 41     1		DB 'NEG  AX',0 
    2930 1C60                        1	DATASEG ENDS 
    2931 1124  51                    1		push	cx 
    2932 1125  53                    1		PUSH	BX 
    2933 1126  B9 0002               1		MOV	CX,offset (??0078-??0077) 
    2934 1129  BE 1137 R             1		mov	si,offset ??0077 
    2935 112C  BB 1C58 R             1		MOV	BX,offset STRA 
    2936 112F  E8 34DE R             1		call	maccod 
    2937 1132  5B                    1		POP	BX 
    2938 1133  59                    1		pop	cx 
    2939 1134  EB 03 90              1		jmp	??0078 
    2940 1137  F7 D8                 1	??0077:	NEG AX 
    2941 1139                        1	??0078: 
    2942 1139  EB 21 90				jmp	cmaknum
    2943				
    2944				LISP$SUBRU 'plus',CPLUS,TWONUM
    2945 1C60                        1	dataseg segment 
    2946 1C60  1C4C R                1		DW NXTSBR 
    2947 1C62  113C R                1		dw CODEADDR 
    2948 1C64  1144 R                1		dw CPLUS 
    2949 1C66  70 6C 75 73 00        1	  	DB 'plus',0 
    2950 1C6B                        1	dataseg ends 
    2951 113C  E8 0F4B R             1		CALL	TWONUM 
    2952 113F  03 C3				add	ax,bx
    2953 1141  E9 05C9 R			jmp	maknum
    2954 1144  E8 3C6F R		CPLUS:	CALL	CTWONU1
    2955					COMPIL	0,<ADD AX,BX>,'ADD  AX,BX'
    2956 1C6B                        1	DATASEG	SEGMENT 
    2957 1C6B  41 44 44 20 20 41     1		DB 'ADD  AX,BX',0 
    2958 1C76                        1	DATASEG ENDS 
    2959 1147  51                    1		push	cx 
    2960 1148  53                    1		PUSH	BX 
    2961 1149  B9 0002               1		MOV	CX,offset (??007A-??0079) 
    2962 114C  BE 115A R             1		mov	si,offset ??0079 
    2963 114F  BB 1C6B R             1		MOV	BX,offset STRA 
    2964 1152  E8 34DE R             1		call	maccod 
    2965 1155  5B                    1		POP	BX 
    2966 1156  59                    1		pop	cx 
    2967 1157  EB 03 90              1		jmp	??007A 
    2968 115A  03 C3                 1	??0079:	ADD AX,BX 
    2969 115C                        1	??007A: 
    2970 115C  C6 06 2CFF R FF 90	CMAKNUM:mov	[retnumber],0FFH
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-56


    2971 1162  C3				RET
    2972				
    2973				LISP$SUBRU 'difference',CDIFF,TWONUM
    2974 1C76                        1	dataseg segment 
    2975 1C76  1C60 R                1		DW NXTSBR 
    2976 1C78  1163 R                1		dw CODEADDR 
    2977 1C7A  116B R                1		dw CDIFF 
    2978 1C7C  64 69 66 66 65 72     1	  	DB 'difference',0 
    2979 1C87                        1	dataseg ends 
    2980 1163  E8 0F4B R             1		CALL	TWONUM 
    2981 1166  2B C3				sub	ax,bx
    2982 1168  E9 05C9 R			jmp	maknum
    2983 116B  E8 3C6F R		CDIFF:	CALL	CTWONU1
    2984					COMPIL	0,<SUB AX,BX>,'SUB  AX,BX'
    2985 1C87                        1	DATASEG	SEGMENT 
    2986 1C87  53 55 42 20 20 41     1		DB 'SUB  AX,BX',0 
    2987 1C92                        1	DATASEG ENDS 
    2988 116E  51                    1		push	cx 
    2989 116F  53                    1		PUSH	BX 
    2990 1170  B9 0002               1		MOV	CX,offset (??007C-??007B) 
    2991 1173  BE 1181 R             1		mov	si,offset ??007B 
    2992 1176  BB 1C87 R             1		MOV	BX,offset STRA 
    2993 1179  E8 34DE R             1		call	maccod 
    2994 117C  5B                    1		POP	BX 
    2995 117D  59                    1		pop	cx 
    2996 117E  EB 03 90              1		jmp	??007C 
    2997 1181  2B C3                 1	??007B:	SUB AX,BX 
    2998 1183                        1	??007C: 
    2999 1183  EB D7				JMP	CMAKNUM
    3000				
    3001				LISP$SUBRU 'times',CTIMES,TWONUM
    3002 1C92                        1	dataseg segment 
    3003 1C92  1C76 R                1		DW NXTSBR 
    3004 1C94  1185 R                1		dw CODEADDR 
    3005 1C96  118D R                1		dw CTIMES 
    3006 1C98  74 69 6D 65 73 00     1	  	DB 'times',0 
    3007 1C9E                        1	dataseg ends 
    3008 1185  E8 0F4B R             1		CALL	TWONUM 
    3009 1188  F7 EB				imul	bx
    3010 118A  E9 05C9 R			jmp	maknum
    3011 118D  E8 3C6F R		CTIMES:	CALL	CTWONU1
    3012					COMPIL	0,<IMUL BX>,'IMUL BX'
    3013 1C9E                        1	DATASEG	SEGMENT 
    3014 1C9E  49 4D 55 4C 20 42     1		DB 'IMUL BX',0 
    3015 1CA6                        1	DATASEG ENDS 
    3016 1190  51                    1		push	cx 
    3017 1191  53                    1		PUSH	BX 
    3018 1192  B9 0002               1		MOV	CX,offset (??007E-??007D) 
    3019 1195  BE 11A3 R             1		mov	si,offset ??007D 
    3020 1198  BB 1C9E R             1		MOV	BX,offset STRA 
    3021 119B  E8 34DE R             1		call	maccod 
    3022 119E  5B                    1		POP	BX 
    3023 119F  59                    1		pop	cx 
    3024 11A0  EB 03 90              1		jmp	??007E 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-57


    3025 11A3  F7 EB                 1	??007D:	IMUL BX 
    3026 11A5                        1	??007E: 
    3027 11A5  EB B5				JMP	CMAKNUM
    3028				
    3029				LISP$SUBRU 'quotient',CTWONUM,TWONUM
    3030 1CA6                        1	dataseg segment 
    3031 1CA6  1C92 R                1		DW NXTSBR 
    3032 1CA8  11A7 R                1		dw CODEADDR 
    3033 1CAA  3D69 R                1		dw CTWONUM 
    3034 1CAC  71 75 6F 74 69 65     1	  	DB 'quotient',0 
    3035 1CB5                        1	dataseg ends 
    3036 11A7  E8 0F4B R             1		CALL	TWONUM 
    3037 11AA  BA 0000				mov	dx,0
    3038 11AD  A9 8000				test	ax,8000h
    3039 11B0  74 01				jz	qposi
    3040 11B2  4A				dec	dx
    3041 11B3  F7 FB			qposi:	idiv	bx
    3042 11B5  E9 05C9 R			jmp	maknum
    3043				
    3044				LISP$SUBRU 'remainder',CTWONUM,TWONUM
    3045 1CB5                        1	dataseg segment 
    3046 1CB5  1CA6 R                1		DW NXTSBR 
    3047 1CB7  11B8 R                1		dw CODEADDR 
    3048 1CB9  3D69 R                1		dw CTWONUM 
    3049 1CBB  72 65 6D 61 69 6E     1	  	DB 'remainder',0 
    3050 1CC5                        1	dataseg ends 
    3051 11B8  E8 0F4B R             1		CALL	TWONUM 
    3052 11BB  BA 0000				mov	dx,0
    3053 11BE  A9 8000				test	ax,8000h
    3054 11C1  74 01				jz	rposi
    3055 11C3  4A				dec	dx
    3056 11C4  F7 FB			rposi:	idiv	bx
    3057 11C6  8B C2				mov	ax,dx
    3058 11C8  E9 05C9 R			jmp	maknum
    3059				 
    3060				LISP$SUBRU '*&/10000',CTWONUM,TWONUM
    3061 1CC5                        1	dataseg segment 
    3062 1CC5  1CB5 R                1		DW NXTSBR 
    3063 1CC7  11CB R                1		dw CODEADDR 
    3064 1CC9  3D69 R                1		dw CTWONUM 
    3065 1CCB  2A 26 2F 31 30 30     1	  	DB '*&/10000',0 
    3066 1CD4                        1	dataseg ends 
    3067 11CB  E8 0F4B R             1		CALL	TWONUM 
    3068 11CE  F7 EB				imul	bx
    3069 11D0  B9 2710				mov	cx,10000
    3070 11D3  F7 F9				idiv	cx
    3071 11D5  E9 05C9 R			jmp	maknum
    3072				
    3073				LISP$SUBRU '/&*10000',CTWONUM,TWONUM
    3074 1CD4                        1	dataseg segment 
    3075 1CD4  1CC5 R                1		DW NXTSBR 
    3076 1CD6  11D8 R                1		dw CODEADDR 
    3077 1CD8  3D69 R                1		dw CTWONUM 
    3078 1CDA  2F 26 2A 31 30 30     1	  	DB '/&*10000',0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-58


    3079 1CE3                        1	dataseg ends 
    3080 11D8  E8 0F4B R             1		CALL	TWONUM 
    3081 11DB  53				push	bx
    3082 11DC  B9 2710				mov	cx,10000
    3083 11DF  F7 E9				imul	cx
    3084 11E1  5B				pop	bx
    3085 11E2  F7 FB				idiv	bx
    3086 11E4  E9 05C9 R			jmp	maknum
    3087					
    3088				LISP$SUBRU 'add1',CADD1,NUMARG
    3089 1CE3                        1	dataseg segment 
    3090 1CE3  1CD4 R                1		DW NXTSBR 
    3091 1CE5  11E7 R                1		dw CODEADDR 
    3092 1CE7  11EE R                1		dw CADD1 
    3093 1CE9  61 64 64 31 00        1	  	DB 'add1',0 
    3094 1CEE                        1	dataseg ends 
    3095 11E7  E8 0F1A R             1		CALL	NUMARG 
    3096 11EA  40				INC	AX
    3097 11EB  E9 05C9 R			JMP	MAKNUM
    3098 11EE  E8 3C59 R		CADD1:	CALL	CNUMAR1
    3099					COMPIL	0,<INC AX>,'INC  AX'
    3100 1CEE                        1	DATASEG	SEGMENT 
    3101 1CEE  49 4E 43 20 20 41     1		DB 'INC  AX',0 
    3102 1CF6                        1	DATASEG ENDS 
    3103 11F1  51                    1		push	cx 
    3104 11F2  53                    1		PUSH	BX 
    3105 11F3  B9 0001               1		MOV	CX,offset (??0080-??007F) 
    3106 11F6  BE 1204 R             1		mov	si,offset ??007F 
    3107 11F9  BB 1CEE R             1		MOV	BX,offset STRA 
    3108 11FC  E8 34DE R             1		call	maccod 
    3109 11FF  5B                    1		POP	BX 
    3110 1200  59                    1		pop	cx 
    3111 1201  EB 02 90              1		jmp	??0080 
    3112 1204  40                    1	??007F:	INC AX 
    3113 1205                        1	??0080: 
    3114 1205  E9 115C R			JMP	CMAKNUM
    3115				
    3116				LISP$SUBRU 'sub1',CSUB1,NUMARG
    3117 1CF6                        1	dataseg segment 
    3118 1CF6  1CE3 R                1		DW NXTSBR 
    3119 1CF8  1208 R                1		dw CODEADDR 
    3120 1CFA  120F R                1		dw CSUB1 
    3121 1CFC  73 75 62 31 00        1	  	DB 'sub1',0 
    3122 1D01                        1	dataseg ends 
    3123 1208  E8 0F1A R             1		CALL	NUMARG 
    3124 120B  48				DEC	AX
    3125 120C  E9 05C9 R			JMP	MAKNUM
    3126 120F  E8 3C59 R		CSUB1:	CALL	CNUMAR1
    3127					COMPIL	0,<DEC AX>,'DEC  AX'
    3128 1D01                        1	DATASEG	SEGMENT 
    3129 1D01  44 45 43 20 20 41     1		DB 'DEC  AX',0 
    3130 1D09                        1	DATASEG ENDS 
    3131 1212  51                    1		push	cx 
    3132 1213  53                    1		PUSH	BX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-59


    3133 1214  B9 0001               1		MOV	CX,offset (??0082-??0081) 
    3134 1217  BE 1225 R             1		mov	si,offset ??0081 
    3135 121A  BB 1D01 R             1		MOV	BX,offset STRA 
    3136 121D  E8 34DE R             1		call	maccod 
    3137 1220  5B                    1		POP	BX 
    3138 1221  59                    1		pop	cx 
    3139 1222  EB 02 90              1		jmp	??0082 
    3140 1225  48                    1	??0081:	DEC AX 
    3141 1226                        1	??0082: 
    3142 1226  E9 115C R			JMP	CMAKNUM
    3143				
    3144				
    3145				LISP$SUBRU 'zerop',Czerop,ONEARG
    3146 1D09                        1	dataseg segment 
    3147 1D09  1CF6 R                1		DW NXTSBR 
    3148 1D0B  1229 R                1		dw CODEADDR 
    3149 1D0D  1236 R                1		dw Czerop 
    3150 1D0F  7A 65 72 6F 70 00     1	  	DB 'zerop',0 
    3151 1D15                        1	dataseg ends 
    3152 1229  E8 0ECD R             1		CALL	ONEARG 
    3153 122C  3D 0003				cmp	ax,ZERONUM
    3154					test$resu	z
    3155 122F  B8 0001               1		mov	ax,1 
    3156 1232  74 01                 1		jz	$+3 
    3157 1234  48                    1		dec	ax 
    3158 1235  C3                    1		ret 
    3159 1236				czerop:	car	a,bx
    3160 1236  E8 0DCB R             2		CALL	NEWCARabx 
    3161 1239  E8 38C0 R			call	ncompi_type
    3162 123C  80 3E 2CFF R 00			cmp	[retnumber],0
    3163 1241  74 23				jz	czero2
    3164 1243  C6 06 2CFF R 00 90		mov	[retnumber],0
    3165					compil	0,<cmp ax,0>,'CMP  AX,0'
    3166 1D15                        1	DATASEG	SEGMENT 
    3167 1D15  43 4D 50 20 20 41     1		DB 'CMP  AX,0',0 
    3168 1D1F                        1	DATASEG ENDS 
    3169 1249  51                    1		push	cx 
    3170 124A  53                    1		PUSH	BX 
    3171 124B  B9 0003               1		MOV	CX,offset (??0084-??0083) 
    3172 124E  BE 125C R             1		mov	si,offset ??0083 
    3173 1251  BB 1D15 R             1		MOV	BX,offset STRA 
    3174 1254  E8 34DE R             1		call	maccod 
    3175 1257  5B                    1		POP	BX 
    3176 1258  59                    1		pop	cx 
    3177 1259  EB 04 90              1		jmp	??0084 
    3178 125C  3D 0000               1	??0083:	cmp ax,0 
    3179 125F                        1	??0084: 
    3180 125F  C6 06 2D00 R 01 90		mov	[retzero],t
    3181 1265  C3				ret
    3182 1266				czero2:	compil	0,<cmp ax,ZERONUM>,'CMP  AX,ZERO'
    3183 1D1F                        1	DATASEG	SEGMENT 
    3184 1D1F  43 4D 50 20 20 41     1		DB 'CMP  AX,ZERO',0 
    3185 1D2C                        1	DATASEG ENDS 
    3186 1266  51                    1		push	cx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-60


    3187 1267  53                    1		PUSH	BX 
    3188 1268  B9 0003               1		MOV	CX,offset (??0086-??0085) 
    3189 126B  BE 1279 R             1		mov	si,offset ??0085 
    3190 126E  BB 1D1F R             1		MOV	BX,offset STRA 
    3191 1271  E8 34DE R             1		call	maccod 
    3192 1274  5B                    1		POP	BX 
    3193 1275  59                    1		pop	cx 
    3194 1276  EB 04 90              1		jmp	??0086 
    3195 1279  3D 0003               1	??0085:	cmp ax,ZERONUM 
    3196 127C                        1	??0086: 
    3197 127C  C6 06 2D00 R 01 90		mov	[retzero],t
    3198 1282  C3				ret
    3199				
    3200				LISP$SUBRU 'greaterp',CTWONUM,TWONUM
    3201 1D2C                        1	dataseg segment 
    3202 1D2C  1D09 R                1		DW NXTSBR 
    3203 1D2E  1283 R                1		dw CODEADDR 
    3204 1D30  3D69 R                1		dw CTWONUM 
    3205 1D32  67 72 65 61 74 65     1	  	DB 'greaterp',0 
    3206 1D3B                        1	dataseg ends 
    3207 1283  E8 0F4B R             1		CALL	TWONUM 
    3208 1286  05 8000				add	ax,8000h
    3209 1289  81 C3 8000			add	bx,8000h
    3210 128D  3B D8				cmp	bx,ax
    3211					test$resu	c
    3212 128F  B8 0001               1		mov	ax,1 
    3213 1292  72 01                 1		jc	$+3 
    3214 1294  48                    1		dec	ax 
    3215 1295  C3                    1		ret 
    3216				
    3217				LISP$SUBRU 'lessp',CTWONUM,TWONUM
    3218 1D3B                        1	dataseg segment 
    3219 1D3B  1D2C R                1		DW NXTSBR 
    3220 1D3D  1296 R                1		dw CODEADDR 
    3221 1D3F  3D69 R                1		dw CTWONUM 
    3222 1D41  6C 65 73 73 70 00     1	  	DB 'lessp',0 
    3223 1D47                        1	dataseg ends 
    3224 1296  E8 0F4B R             1		CALL	TWONUM 
    3225 1299  05 8000				add	ax,8000h
    3226 129C  81 C3 8000			add	bx,8000h
    3227 12A0  3B C3				cmp	ax,bx
    3228					test$resu	c
    3229 12A2  B8 0001               1		mov	ax,1 
    3230 12A5  72 01                 1		jc	$+3 
    3231 12A7  48                    1		dec	ax 
    3232 12A8  C3                    1		ret 
    3233				
    3234				LISP$SUBRU 'eqn',CEQN,TWONUM
    3235 1D47                        1	dataseg segment 
    3236 1D47  1D3B R                1		DW NXTSBR 
    3237 1D49  12A9 R                1		dw CODEADDR 
    3238 1D4B  12B5 R                1		dw CEQN 
    3239 1D4D  65 71 6E 00           1	  	DB 'eqn',0 
    3240 1D51                        1	dataseg ends 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-61


    3241 12A9  E8 0F4B R             1		CALL	TWONUM 
    3242 12AC  3B C3				cmp	ax,bx
    3243					test$resu	z
    3244 12AE  B8 0001               1		mov	ax,1 
    3245 12B1  74 01                 1		jz	$+3 
    3246 12B3  48                    1		dec	ax 
    3247 12B4  C3                    1		ret 
    3248 12B5  E8 3C6F R		CEQN:	CALL	CTWONU1
    3249					COMPIL	0,<CMP AX,BX>,'CMP  AX,BX'
    3250 1D51                        1	DATASEG	SEGMENT 
    3251 1D51  43 4D 50 20 20 41     1		DB 'CMP  AX,BX',0 
    3252 1D5C                        1	DATASEG ENDS 
    3253 12B8  51                    1		push	cx 
    3254 12B9  53                    1		PUSH	BX 
    3255 12BA  B9 0002               1		MOV	CX,offset (??0088-??0087) 
    3256 12BD  BE 12CB R             1		mov	si,offset ??0087 
    3257 12C0  BB 1D51 R             1		MOV	BX,offset STRA 
    3258 12C3  E8 34DE R             1		call	maccod 
    3259 12C6  5B                    1		POP	BX 
    3260 12C7  59                    1		pop	cx 
    3261 12C8  EB 03 90              1		jmp	??0088 
    3262 12CB  3B C3                 1	??0087:	CMP AX,BX 
    3263 12CD                        1	??0088: 
    3264 12CD  C6 06 2D00 R 01 90		mov	[retzero],t
    3265 12D3  C3				RET
    3266				
    3267				LISP$SUBRU 'last',CONEARG,ONEARG
    3268 1D5C                        1	dataseg segment 
    3269 1D5C  1D47 R                1		DW NXTSBR 
    3270 1D5E  12D4 R                1		dw CODEADDR 
    3271 1D60  3B76 R                1		dw CONEARG 
    3272 1D62  6C 61 73 74 00        1	  	DB 'last',0 
    3273 1D67                        1	dataseg ends 
    3274 12D4  E8 0ECD R             1		CALL	ONEARG 
    3275 12D7				LAST:	R$ATOM	AX
    3276 12D7  3D 0300               1		CMP	AX,FSTNODE 
    3277 12DA  73 01                 2		JNC	$+3 
    3278 12DC  C3                    2		RET 
    3279 12DD  8B F8                 2		MOV     DI,AX 
    3280 12DF  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3281 12E4  74 05                 2		JZ	??0089 
    3282 12E6  E8 0023 R             2		CALL	EMSADDR 
    3283 12E9  EB 04                 2		jmp	short ??008A 
    3284 12EB                        2	??0089: 
    3285 12EB  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3286 12EF                        2	??008A: 
    3287 12EF  26: 8A 15             2		MOV	DL,ES:[DI] 
    3288 12F2  80 FA 0F              1		CMP	DL,LIST 
    3289 12F5  74 01                 2		JZ	$+3 
    3290 12F7  C3                    2		RET 
    3291					cdr	b
    3292 12F8  E8 022A R             2		CALL	NEWCDRb 
    3293					R$ATOM	BX
    3294 12FB  81 FB 0300            1		CMP	BX,FSTNODE 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-62


    3295 12FF  73 01                 2		JNC	$+3 
    3296 1301  C3                    2		RET 
    3297 1302  8B FB                 2		MOV     DI,BX 
    3298 1304  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3299 1309  74 05                 2		JZ	??008B 
    3300 130B  E8 0023 R             2		CALL	EMSADDR 
    3301 130E  EB 04                 2		jmp	short ??008C 
    3302 1310                        2	??008B: 
    3303 1310  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3304 1314                        2	??008C: 
    3305 1314  26: 8A 15             2		MOV	DL,ES:[DI] 
    3306 1317  80 FA 0F              1		CMP	DL,LIST 
    3307 131A  74 01                 2		JZ	$+3 
    3308 131C  C3                    2		RET 
    3309 131D  8B C3				mov	ax,bx
    3310 131F  EB B6				Jmp	LAST
    3311				
    3312				LISP$SUBRU 'list',clist
    3313 1D67                        1	dataseg segment 
    3314 1D67  1D5C R                1		DW NXTSBR 
    3315 1D69  1321 R                1		dw CODEADDR 
    3316 1D6B  1365 R                1		dw clist 
    3317 1D6D  6C 69 73 74 00        1	  	DB 'list',0 
    3318 1D72                        1	dataseg ends 
    3319 1321  A1 0110 R		argLIST:MOV	AX,[ARGSTA]
    3320					car	a,ax
    3321 1324  E8 02EB R             2		CALL	NEWCARaax 
    3322 1327				ALIST:	J$ATOM	AX,EVAL
    3323 1327  3D 0300               1		CMP	AX,FSTNODE 
    3324 132A  73 03                 2		JNC	$+5 
    3325 132C  E9 0CA5 R             2		JMP	EVAL 
    3326 132F  90                    2		nop 
    3327 1330  8B F8                 2		MOV     DI,AX 
    3328 1332  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3329 1337  74 05                 2		JZ	??008D 
    3330 1339  E8 0023 R             2		CALL	EMSADDR 
    3331 133C  EB 04                 2		jmp	short ??008E 
    3332 133E                        2	??008D: 
    3333 133E  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3334 1342                        2	??008E: 
    3335 1342  26: 8A 15             2		MOV	DL,ES:[DI] 
    3336 1345  80 FA 0F              1		CMP	DL,LIST 
    3337 1348  74 03                 2		JZ	$+5 
    3338 134A  E9 0CA5 R             2		JMP	EVAL 
    3339 134D  90                    2		nop 
    3340					car	a
    3341 134E  E8 024B R             2		CALL	NEWCARa 
    3342					cdr	b
    3343 1351  E8 022A R             2		CALL	NEWCDRb 
    3344 1354  53				PUSH	BX
    3345 1355  E8 0CA5 R			CALL	EVAL
    3346 1358  8B EC				mov	bp,sp
    3347 135A  87 46 00				xchg	AX,[bp]
    3348 135D  E8 1327 R			CALL	ALIST
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-63


    3349 1360  5B				POP	BX	
    3350 1361  93				xchg	BX,AX
    3351 1362  E9 05AE R			jmp	CONS
    3352 1365				clist:	j$atom	bx,clist3
    3353 1365  81 FB 0300            1		CMP	bx,FSTNODE 
    3354 1369  73 03                 2		JNC	$+5 
    3355 136B  EB 5D 90              2		JMP	clist3 
    3356 136E  90                    2		nop 
    3357 136F  8B FB                 2		MOV     DI,bx 
    3358 1371  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3359 1376  74 05                 2		JZ	??008F 
    3360 1378  E8 0023 R             2		CALL	EMSADDR 
    3361 137B  EB 04                 2		jmp	short ??0090 
    3362 137D                        2	??008F: 
    3363 137D  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3364 1381                        2	??0090: 
    3365 1381  26: 8A 15             2		MOV	DL,ES:[DI] 
    3366 1384  80 FA 0F              1		CMP	DL,LIST 
    3367 1387  74 03                 2		JZ	$+5 
    3368 1389  EB 3F 90              2		JMP	clist3 
    3369 138C  90                    2		nop 
    3370					car$cdr	a,b,bx
    3371 138D  E8 0DCB R             3		CALL	NEWCARabx 
    3372 1390  E8 022A R             3		CALL	NEWCDRb 
    3373					j$nil	bx,clist2
    3374 1393  83 FB 00              1		CMP	bx,0 
    3375 1396  75 03                 2		JnZ	$+5 
    3376 1398  EB 35 90              2		JMP	clist2 
    3377 139B  90                    2		nop 
    3378 139C  53				push	bx
    3379 139D  E8 380E R			call	stackarg
    3380 13A0  5B				pop	bx
    3381 13A1  E8 1365 R			call	clist
    3382 13A4  E8 3D70 R			call	mov_bx_ax
    3383 13A7  E8 3BAF R			call	POP_AX
    3384					cocall	cons,'CONS'
    3385 13AA  B8 05AE R             1		mov	ax,offset cons 
    3386 13AD  E8 35FD R             1		call	ccall 
    3387 13B0  8A 16 2CFE R          1		mov	dl,[codebug] 
    3388 13B4  80 FA 00              1		cmp	dl,0 
    3389 13B7  74 10                 1		jz	??0091 
    3390 1D72                        2	dataseg segment 
    3391 1D72  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    3392 1D7B                        2	dataseg ends 
    3393 13B9  53                    2		push	bx 
    3394 13BA  BB 1D72 R             2		mov	bx,offset tempaddr 
    3395 13BD  E8 018C R             2		CALL	PRINTS 
    3396 13C0  5B                    2		pop	bx 
    3397 1D7B                        2	dataseg segment 
    3398 1D7B  43 4F 4E 53 00        2		DB 'CONS',0 
    3399 1D80                        2	dataseg ends 
    3400 13C1  53                    2		push	bx 
    3401 13C2  BB 1D7B R             2		mov	bx,offset tempaddr 
    3402 13C5  E8 018C R             2		CALL	PRINTS 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-64


    3403 13C8  5B                    2		pop	bx 
    3404 13C9                        1	??0091: 
    3405 13C9  C3				ret
    3406 13CA  8B C3			clist3:	mov	ax,bx
    3407 13CC  E9 3844 R			jmp	ncompi
    3408				
    3409 13CF  E8 3844 R		clist2:	call	ncompi
    3410					compil	0,<MOV BX,NIL>,'MOV  BX,NIL'
    3411 1D80                        1	DATASEG	SEGMENT 
    3412 1D80  4D 4F 56 20 20 42     1		DB 'MOV  BX,NIL',0 
    3413 1D8C                        1	DATASEG ENDS 
    3414 13D2  51                    1		push	cx 
    3415 13D3  53                    1		PUSH	BX 
    3416 13D4  B9 0003               1		MOV	CX,offset (??0093-??0092) 
    3417 13D7  BE 13E5 R             1		mov	si,offset ??0092 
    3418 13DA  BB 1D80 R             1		MOV	BX,offset STRA 
    3419 13DD  E8 34DE R             1		call	maccod 
    3420 13E0  5B                    1		POP	BX 
    3421 13E1  59                    1		pop	cx 
    3422 13E2  EB 04 90              1		jmp	??0093 
    3423 13E5  BB 0000               1	??0092:	MOV BX,NIL 
    3424 13E8                        1	??0093: 
    3425					cocall	cons,'CONS'
    3426 13E8  B8 05AE R             1		mov	ax,offset cons 
    3427 13EB  E8 35FD R             1		call	ccall 
    3428 13EE  8A 16 2CFE R          1		mov	dl,[codebug] 
    3429 13F2  80 FA 00              1		cmp	dl,0 
    3430 13F5  74 10                 1		jz	??0094 
    3431 1D8C                        2	dataseg segment 
    3432 1D8C  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    3433 1D95                        2	dataseg ends 
    3434 13F7  53                    2		push	bx 
    3435 13F8  BB 1D8C R             2		mov	bx,offset tempaddr 
    3436 13FB  E8 018C R             2		CALL	PRINTS 
    3437 13FE  5B                    2		pop	bx 
    3438 1D95                        2	dataseg segment 
    3439 1D95  43 4F 4E 53 00        2		DB 'CONS',0 
    3440 1D9A                        2	dataseg ends 
    3441 13FF  53                    2		push	bx 
    3442 1400  BB 1D95 R             2		mov	bx,offset tempaddr 
    3443 1403  E8 018C R             2		CALL	PRINTS 
    3444 1406  5B                    2		pop	bx 
    3445 1407                        1	??0094: 
    3446 1407  C3				ret
    3447				
    3448				LISP$SUBRU 'reverse',cONEARG,ONEARG
    3449 1D9A                        1	dataseg segment 
    3450 1D9A  1D67 R                1		DW NXTSBR 
    3451 1D9C  1408 R                1		dw CODEADDR 
    3452 1D9E  3B76 R                1		dw cONEARG 
    3453 1DA0  72 65 76 65 72 73     1	  	DB 'reverse',0 
    3454 1DA8                        1	dataseg ends 
    3455 1408  E8 0ECD R             1		CALL	ONEARG 
    3456 140B  B9 0000			REVERSE:MOV	CX,NIL
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-65


    3457 140E				REVERS:	J$ATOM	AX,REVEZ
    3458 140E  3D 0300               1		CMP	AX,FSTNODE 
    3459 1411  73 03                 2		JNC	$+5 
    3460 1413  EB 31 90              2		JMP	REVEZ 
    3461 1416  90                    2		nop 
    3462 1417  8B F8                 2		MOV     DI,AX 
    3463 1419  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3464 141E  74 05                 2		JZ	??0095 
    3465 1420  E8 0023 R             2		CALL	EMSADDR 
    3466 1423  EB 04                 2		jmp	short ??0096 
    3467 1425                        2	??0095: 
    3468 1425  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3469 1429                        2	??0096: 
    3470 1429  26: 8A 15             2		MOV	DL,ES:[DI] 
    3471 142C  80 FA 0F              1		CMP	DL,LIST 
    3472 142F  74 03                 2		JZ	$+5 
    3473 1431  EB 13 90              2		JMP	REVEZ 
    3474 1434  90                    2		nop 
    3475					CAR	A
    3476 1435  E8 024B R             2		CALL	NEWCARA 
    3477					CDR	b
    3478 1438  E8 022A R             2		CALL	NEWCDRb 
    3479 143B  53				PUSH	BX
    3480 143C  8B D9				MOV	BX,CX
    3481 143E  E8 05AE R			CALL	CONS
    3482 1441  8B C8				MOV	cx,ax
    3483 1443  58				POP	AX
    3484 1444  EB C8				Jmp	REVERS
    3485 1446  8B C1			REVEZ:	mov	ax,cx
    3486 1448  C3				RET
    3487				
    3488				
    3489				LISP$SUBRU 'nreverse',CONEARG,ONEARG
    3490 1DA8                        1	dataseg segment 
    3491 1DA8  1D9A R                1		DW NXTSBR 
    3492 1DAA  1449 R                1		dw CODEADDR 
    3493 1DAC  3B76 R                1		dw CONEARG 
    3494 1DAE  6E 72 65 76 65 72     1	  	DB 'nreverse',0 
    3495 1DB7                        1	dataseg ends 
    3496 1449  E8 0ECD R             1		CALL	ONEARG 
    3497					R$ATOM	AX
    3498 144C  3D 0300               1		CMP	AX,FSTNODE 
    3499 144F  73 01                 2		JNC	$+3 
    3500 1451  C3                    2		RET 
    3501 1452  8B F8                 2		MOV     DI,AX 
    3502 1454  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3503 1459  74 05                 2		JZ	??0097 
    3504 145B  E8 0023 R             2		CALL	EMSADDR 
    3505 145E  EB 04                 2		jmp	short ??0098 
    3506 1460                        2	??0097: 
    3507 1460  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3508 1464                        2	??0098: 
    3509 1464  26: 8A 15             2		MOV	DL,ES:[DI] 
    3510 1467  80 FA 0F              1		CMP	DL,LIST 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-66


    3511 146A  74 01                 2		JZ	$+3 
    3512 146C  C3                    2		RET 
    3513 146D  B9 0000				MOV	CX,NIL
    3514 1470  50			NREVER: PUSH	AX
    3515					CDR	B,AX
    3516 1471  EB 20                 3		jmp	short ??0099 
    3517 1473                        3	NEWCDRBAX: 
    3518 1473  8B F8                 4		MOV     DI,AX 
    3519 1475  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    3520 147A  74 08                 4		JZ	??009A 
    3521 147C  E8 0023 R             4		CALL	EMSADDR 
    3522 147F  26: 8B 5D 06          4		MOV	BX,ES:[DI+6] 
    3523 1483  C3                    4		RET 
    3524 1484                        4	??009A: 
    3525 1484  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    3526 1488  26: 8A 1D             3		mov     BL,ES:[DI] 
    3527 148B  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    3528 148F  26: 8A 3D             3		mov	BH,ES:[DI] 
    3529 1492  C3                    3		RET 
    3530 1493                        3	??0099: 
    3531 1493  E8 1473 R             2		CALL	NEWCDRBAX 
    3532					rplacd	AX,C
    3533 1496  8B F8                 1		MOV	DI,AX 
    3534 1498  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3535 149D  74 09                 2		JZ	??009B 
    3536 149F  E8 0023 R             2		CALL	EMSADDR 
    3537 14A2  26: 89 4D 06          2		MOV	ES:[DI+6],CX 
    3538 14A6  EB 0E                 2		JMP	SHORT ??009C 
    3539 14A8  8E 06 0106 R          2	??009B:	mov	ES,[CDRLOW] 
    3540 14AC  26: 88 0D             2		mov     ES:[DI],CL 
    3541 14AF  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    3542 14B3  26: 88 2D             2		mov	ES:[DI],CH 
    3543 14B6                        2	??009C: 
    3544 14B6  93				xchg	BX,AX
    3545					J$ATOM	AX,NREVZ
    3546 14B7  3D 0300               1		CMP	AX,FSTNODE 
    3547 14BA  73 03                 2		JNC	$+5 
    3548 14BC  EB 23 90              2		JMP	NREVZ 
    3549 14BF  90                    2		nop 
    3550 14C0  8B F8                 2		MOV     DI,AX 
    3551 14C2  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3552 14C7  74 05                 2		JZ	??009D 
    3553 14C9  E8 0023 R             2		CALL	EMSADDR 
    3554 14CC  EB 04                 2		jmp	short ??009E 
    3555 14CE                        2	??009D: 
    3556 14CE  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3557 14D2                        2	??009E: 
    3558 14D2  26: 8A 15             2		MOV	DL,ES:[DI] 
    3559 14D5  80 FA 0F              1		CMP	DL,LIST 
    3560 14D8  74 03                 2		JZ	$+5 
    3561 14DA  EB 05 90              2		JMP	NREVZ 
    3562 14DD  90                    2		nop 
    3563 14DE  59				POP	CX
    3564 14DF  EB 8F				Jmp	NREVER
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-67


    3565 14E1  58			NREVZ:	POP	AX
    3566 14E2  C3				RET
    3567				
    3568				
    3569				LISP$SUBRU 'rplaca',cTWOARG,TWOARG
    3570 1DB7                        1	dataseg segment 
    3571 1DB7  1DA8 R                1		DW NXTSBR 
    3572 1DB9  14E3 R                1		dw CODEADDR 
    3573 1DBB  3B94 R                1		dw cTWOARG 
    3574 1DBD  72 70 6C 61 63 61     1	  	DB 'rplaca',0 
    3575 1DC4                        1	dataseg ends 
    3576 14E3  E8 0ED9 R             1		CALL	TWOARG 
    3577					r$atom	ax
    3578 14E6  3D 0300               1		CMP	ax,FSTNODE 
    3579 14E9  73 01                 2		JNC	$+3 
    3580 14EB  C3                    2		RET 
    3581 14EC  8B F8                 2		MOV     DI,ax 
    3582 14EE  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3583 14F3  74 05                 2		JZ	??009F 
    3584 14F5  E8 0023 R             2		CALL	EMSADDR 
    3585 14F8  EB 04                 2		jmp	short ??00A0 
    3586 14FA                        2	??009F: 
    3587 14FA  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3588 14FE                        2	??00A0: 
    3589 14FE  26: 8A 15             2		MOV	DL,ES:[DI] 
    3590 1501  80 FA 0F              1		CMP	DL,LIST 
    3591 1504  74 01                 2		JZ	$+3 
    3592 1506  C3                    2		RET 
    3593					RPLACA	AX,B
    3594 1507  8B F8                 1		MOV	DI,AX 
    3595 1509  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3596 150E  74 09                 2		JZ	??00A1 
    3597 1510  E8 0023 R             2		CALL	EMSADDR 
    3598 1513  26: 89 5D 04          2		MOV	ES:[DI+4],BX 
    3599 1517  EB 0E                 2		JMP	SHORT ??00A2 
    3600 1519  8E 06 0102 R          2	??00A1:	mov	ES,[CARLOW] 
    3601 151D  26: 88 1D             2		mov     ES:[DI],BL 
    3602 1520  8E 06 0104 R          2		mov	ES,[CARHIG] 
    3603 1524  26: 88 3D             2		mov	ES:[DI],BH 
    3604 1527                        2	??00A2: 
    3605 1527  C3				RET
    3606				
    3607				LISP$SUBRU 'rplacd',cTWOARG,TWOARG
    3608 1DC4                        1	dataseg segment 
    3609 1DC4  1DB7 R                1		DW NXTSBR 
    3610 1DC6  1528 R                1		dw CODEADDR 
    3611 1DC8  3B94 R                1		dw cTWOARG 
    3612 1DCA  72 70 6C 61 63 64     1	  	DB 'rplacd',0 
    3613 1DD1                        1	dataseg ends 
    3614 1528  E8 0ED9 R             1		CALL	TWOARG 
    3615					R$ATOM	AX
    3616 152B  3D 0300               1		CMP	AX,FSTNODE 
    3617 152E  73 01                 2		JNC	$+3 
    3618 1530  C3                    2		RET 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-68


    3619 1531  8B F8                 2		MOV     DI,AX 
    3620 1533  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3621 1538  74 05                 2		JZ	??00A3 
    3622 153A  E8 0023 R             2		CALL	EMSADDR 
    3623 153D  EB 04                 2		jmp	short ??00A4 
    3624 153F                        2	??00A3: 
    3625 153F  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3626 1543                        2	??00A4: 
    3627 1543  26: 8A 15             2		MOV	DL,ES:[DI] 
    3628 1546  80 FA 0F              1		CMP	DL,LIST 
    3629 1549  74 01                 2		JZ	$+3 
    3630 154B  C3                    2		RET 
    3631					rplacd	ax,b
    3632 154C  8B F8                 1		MOV	DI,ax 
    3633 154E  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3634 1553  74 09                 2		JZ	??00A5 
    3635 1555  E8 0023 R             2		CALL	EMSADDR 
    3636 1558  26: 89 5D 06          2		MOV	ES:[DI+6],bX 
    3637 155C  EB 0E                 2		JMP	SHORT ??00A6 
    3638 155E  8E 06 0106 R          2	??00A5:	mov	ES,[CDRLOW] 
    3639 1562  26: 88 1D             2		mov     ES:[DI],bL 
    3640 1565  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    3641 1569  26: 88 3D             2		mov	ES:[DI],bH 
    3642 156C                        2	??00A6: 
    3643 156C  C3				RET
    3644				
    3645				LISP$SUBRU 'and',cand
    3646 1DD1                        1	dataseg segment 
    3647 1DD1  1DC4 R                1		DW NXTSBR 
    3648 1DD3  156D R                1		dw CODEADDR 
    3649 1DD5  158C R                1		dw cand 
    3650 1DD7  61 6E 64 00           1	  	DB 'and',0 
    3651 1DDB                        1	dataseg ends 
    3652 156D  A1 0110 R			MOV	AX,[ARGSTA]
    3653					CAR	B,AX	
    3654 1570  E8 049D R             2		CALL	NEWCARBAX 
    3655 1573				ANDI:	R$NIL	bx
    3656 1573  83 FB 00              1		CMP	bx,0 
    3657 1576  75 01                 2		JNZ	$+3 
    3658 1578  C3                    2		RET 
    3659					CAR	A,BX
    3660 1579  E8 0DCB R             2		CALL	NEWCARABX 
    3661					CDR	B
    3662 157C  E8 022A R             2		CALL	NEWCDRB 
    3663 157F  53				PUSH	BX
    3664 1580  E8 0CA5 R			CALL	EVAL
    3665 1583  5B				POP	BX
    3666					R$NIL	ax
    3667 1584  3D 0000               1		CMP	ax,0 
    3668 1587  75 01                 2		JNZ	$+3 
    3669 1589  C3                    2		RET 
    3670 158A  EB E7				JMP	ANDI
    3671 158C  53			CAND:	PUSH	BX
    3672 158D  A1 2CF8 R			MOV	AX,[PCLOC]
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-69


    3673 1590  05 0003				ADD	AX,3
    3674 1593  50				PUSH	AX
    3675 1594  05 0003				ADD	AX,3
    3676 1597  50				push	ax
    3677 1598  E8 3632 R			call	cjmp
    3678 159B  58				pop	ax
    3679 159C  A3 2CF8 R			MOV	[pcloc],ax
    3680 159F  8B EC			CANDL:	mov	bp,sp
    3681 15A1  8B 5E 02				MOV	bx,[BP+2]
    3682					car$cdr	a,b,bx
    3683 15A4  E8 0DCB R             3		CALL	NEWCARabx 
    3684 15A7  E8 022A R             3		CALL	NEWCDRb 
    3685					J$NIL	BX,CANDE
    3686 15AA  83 FB 00              1		CMP	BX,0 
    3687 15AD  75 03                 2		JnZ	$+5 
    3688 15AF  EB 3E 90              2		JMP	CANDE 
    3689 15B2  90                    2		nop 
    3690 15B3  89 5E 02				MOV	[BP+2],BX
    3691 15B6  E8 38C0 R			call	ncompi_type
    3692 15B9  A0 2D00 R			mov	al,[retzero]
    3693 15BC  C6 06 2D00 R 00 90		mov	[retzero],0
    3694 15C2  3C 00				cmp	al,0
    3695 15C4  74 1C				jz	cand3
    3696					compil	0,<mov ax,0>,'MOV  AX,NIL'
    3697 1DDB                        1	DATASEG	SEGMENT 
    3698 1DDB  4D 4F 56 20 20 41     1		DB 'MOV  AX,NIL',0 
    3699 1DE7                        1	DATASEG ENDS 
    3700 15C6  51                    1		push	cx 
    3701 15C7  53                    1		PUSH	BX 
    3702 15C8  B9 0003               1		MOV	CX,offset (??00A8-??00A7) 
    3703 15CB  BE 15D9 R             1		mov	si,offset ??00A7 
    3704 15CE  BB 1DDB R             1		MOV	BX,offset STRA 
    3705 15D1  E8 34DE R             1		call	maccod 
    3706 15D4  5B                    1		POP	BX 
    3707 15D5  59                    1		pop	cx 
    3708 15D6  EB 04 90              1		jmp	??00A8 
    3709 15D9  B8 0000               1	??00A7:	mov ax,0 
    3710 15DC                        1	??00A8: 
    3711 15DC  E8 3666 R			call	skpnil
    3712 15DF  EB 07 90				jmp	cand4
    3713 15E2  E8 3650 R		cand3:	call	testnil
    3714 15E5  E8 367C R			call	skpt
    3715 15E8  58			cand4:	pop	ax
    3716 15E9  50				push	ax
    3717 15EA  E8 3632 R			CALL	CJMP
    3718 15ED  EB B0				JMP	CANDL
    3719 15EF  E8 3844 R		CANDE:	CALL	NCOMPI
    3720 15F2  59				POP	CX
    3721 15F3  E8 36D8 R			CALL	JMPFRCXHERE
    3722 15F6  5B				POP	BX
    3723 15F7  C3				RET
    3724				
    3725				LISP$SUBRU 'or',cor
    3726 1DE7                        1	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-70


    3727 1DE7  1DD1 R                1		DW NXTSBR 
    3728 1DE9  15F8 R                1		dw CODEADDR 
    3729 1DEB  160D R                1		dw cor 
    3730 1DED  6F 72 00              1	  	DB 'or',0 
    3731 1DF0                        1	dataseg ends 
    3732 15F8  E8 0EBD R		ORR:	CALL	EOFARG
    3733					JmpN	NZ,NILRET
    3734 15FB  75 03                 1		JNZ	$+5 
    3735 15FD  E9 019A R             1		JMP	NILRET 
    3736 1600  90                    1		nop 
    3737 1601  E8 0EC7 R			CALL	EVALARG
    3738					J$NIL	ax,ORR
    3739 1604  3D 0000               1		CMP	ax,0 
    3740 1607  75 03                 2		JnZ	$+5 
    3741 1609  EB ED                 2		JMP	ORR 
    3742 160B  90                    2		nop 
    3743 160C  C3				RET
    3744 160D  53			COR:	PUSH	BX
    3745 160E  A1 2CF8 R			MOV	AX,[PCLOC]
    3746 1611  05 0003				ADD	AX,3
    3747 1614  50				PUSH	AX
    3748 1615  05 0003				ADD	AX,3
    3749 1618  50				push	ax
    3750 1619  E8 3632 R			call	cjmp
    3751 161C  58				pop	ax
    3752 161D  A3 2CF8 R			MOV	[pcloc],ax
    3753 1620  8B EC			CORL:	mov	bp,sp
    3754 1622  8B 5E 02				MOV	bx,[BP+2]
    3755					car$cdr	a,b,bx
    3756 1625  E8 0DCB R             3		CALL	NEWCARabx 
    3757 1628  E8 022A R             3		CALL	NEWCDRb 
    3758					J$NIL	BX,CORE
    3759 162B  83 FB 00              1		CMP	BX,0 
    3760 162E  75 03                 2		JnZ	$+5 
    3761 1630  EB 15 90              2		JMP	CORE 
    3762 1633  90                    2		nop 
    3763 1634  89 5E 02				MOV	[BP+2],BX
    3764 1637  E8 3844 R			call	ncompi
    3765 163A  E8 3650 R			call	testnil
    3766 163D  E8 3666 R			call	skpnil
    3767 1640  58				pop	ax
    3768 1641  50				push	ax
    3769 1642  E8 3632 R			CALL	CJMP
    3770 1645  EB D9				JMP	CORL
    3771 1647  E8 3844 R		CORE:	CALL	NCOMPI
    3772 164A  59				POP	CX
    3773 164B  E8 36D8 R			CALL	JMPFRCXHERE
    3774 164E  5B				POP	BX
    3775 164F  C3				RET
    3776				
    3777				LISP$SUBRU 'nconc',CTWOARG,TWOARG
    3778 1DF0                        1	dataseg segment 
    3779 1DF0  1DE7 R                1		DW NXTSBR 
    3780 1DF2  1650 R                1		dw CODEADDR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-71


    3781 1DF4  3B94 R                1		dw CTWOARG 
    3782 1DF6  6E 63 6F 6E 63 00     1	  	DB 'nconc',0 
    3783 1DFC                        1	dataseg ends 
    3784 1650  E8 0ED9 R             1		CALL	TWOARG 
    3785 1653				NCONC:	J$ATOM	AX,NCONC2
    3786 1653  3D 0300               1		CMP	AX,FSTNODE 
    3787 1656  73 03                 2		JNC	$+5 
    3788 1658  EB 48 90              2		JMP	NCONC2 
    3789 165B  90                    2		nop 
    3790 165C  8B F8                 2		MOV     DI,AX 
    3791 165E  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3792 1663  74 05                 2		JZ	??00A9 
    3793 1665  E8 0023 R             2		CALL	EMSADDR 
    3794 1668  EB 04                 2		jmp	short ??00AA 
    3795 166A                        2	??00A9: 
    3796 166A  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3797 166E                        2	??00AA: 
    3798 166E  26: 8A 15             2		MOV	DL,ES:[DI] 
    3799 1671  80 FA 0F              1		CMP	DL,LIST 
    3800 1674  74 03                 2		JZ	$+5 
    3801 1676  EB 2A 90              2		JMP	NCONC2 
    3802 1679  90                    2		nop 
    3803 167A  50				PUSH	AX
    3804 167B  53				PUSH	BX
    3805 167C  E8 12D7 R			CALL	LAST
    3806 167F  5B				POP	BX
    3807					RPLACD	AX,B
    3808 1680  8B F8                 1		MOV	DI,AX 
    3809 1682  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3810 1687  74 09                 2		JZ	??00AB 
    3811 1689  E8 0023 R             2		CALL	EMSADDR 
    3812 168C  26: 89 5D 06          2		MOV	ES:[DI+6],BX 
    3813 1690  EB 0E                 2		JMP	SHORT ??00AC 
    3814 1692  8E 06 0106 R          2	??00AB:	mov	ES,[CDRLOW] 
    3815 1696  26: 88 1D             2		mov     ES:[DI],BL 
    3816 1699  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    3817 169D  26: 88 3D             2		mov	ES:[DI],BH 
    3818 16A0                        2	??00AC: 
    3819 16A0  58				POP	AX
    3820 16A1  C3				RET
    3821 16A2  8B C3			NCONC2:	MOV	AX,BX
    3822 16A4  C3				RET
    3823				
    3824				LISP$SUBRU 'memeq',CTWOARG,TWOARG
    3825 1DFC                        1	dataseg segment 
    3826 1DFC  1DF0 R                1		DW NXTSBR 
    3827 1DFE  16A5 R                1		dw CODEADDR 
    3828 1E00  3B94 R                1		dw CTWOARG 
    3829 1E02  6D 65 6D 65 71 00     1	  	DB 'memeq',0 
    3830 1E08                        1	dataseg ends 
    3831 16A5  E8 0ED9 R             1		CALL	TWOARG 
    3832 16A8				MEMEQ:	J$NIL	bx,NILRET	
    3833 16A8  83 FB 00              1		CMP	bx,0 
    3834 16AB  75 03                 2		JnZ	$+5 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-72


    3835 16AD  E9 019A R             2		JMP	NILRET 
    3836 16B0  90                    2		nop 
    3837 16B1  53				PUSH	BX
    3838 16B2  50				PUSH	AX
    3839					CAR	B,BX
    3840 16B3  E8 1006 R             2		CALL	NEWCARBBX 
    3841 16B6  3B C3				CMP	AX,BX
    3842 16B8  5B				POP	BX
    3843 16B9  58				POP	AX
    3844					RZ
    3845 16BA  75 01                 1		JNZ	$+3 
    3846 16BC  C3                    1		RET 
    3847					CDR	A,AX
    3848 16BD  E8 08AB R             2		CALL	NEWCDRAAX 
    3849 16C0  93				xchg	BX,AX
    3850 16C1  EB 04 90				JMP	MEMBER
    3851				
    3852				LISP$SUBRU 'member',CTWOARG,TWOARG
    3853 1E08                        1	dataseg segment 
    3854 1E08  1DFC R                1		DW NXTSBR 
    3855 1E0A  16C4 R                1		dw CODEADDR 
    3856 1E0C  3B94 R                1		dw CTWOARG 
    3857 1E0E  6D 65 6D 62 65 72     1	  	DB 'member',0 
    3858 1E15                        1	dataseg ends 
    3859 16C4  E8 0ED9 R             1		CALL	TWOARG 
    3860 16C7				MEMBER:	J$NIL	bx,NILRET	
    3861 16C7  83 FB 00              1		CMP	bx,0 
    3862 16CA  75 03                 2		JnZ	$+5 
    3863 16CC  E9 019A R             2		JMP	NILRET 
    3864 16CF  90                    2		nop 
    3865 16D0  53				PUSH	BX
    3866 16D1  50				PUSH	AX
    3867					CAR	B,BX
    3868 16D2  E8 1006 R             2		CALL	NEWCARBBX 
    3869 16D5  E8 1B16 R			CALL	EQUAL
    3870 16D8  5B				POP	BX
    3871 16D9  58				POP	AX
    3872					RZ
    3873 16DA  75 01                 1		JNZ	$+3 
    3874 16DC  C3                    1		RET 
    3875					CDR	A,AX
    3876 16DD  E8 08AB R             2		CALL	NEWCDRAAX 
    3877 16E0  93				xchg	BX,AX
    3878 16E1  EB E4				JMP	MEMBER
    3879				
    3880				
    3881				LISP$SUBRU 'assoc',CTWOARG,TWOARG
    3882 1E15                        1	dataseg segment 
    3883 1E15  1E08 R                1		DW NXTSBR 
    3884 1E17  16E3 R                1		dw CODEADDR 
    3885 1E19  3B94 R                1		dw CTWOARG 
    3886 1E1B  61 73 73 6F 63 00     1	  	DB 'assoc',0 
    3887 1E21                        1	dataseg ends 
    3888 16E3  E8 0ED9 R             1		CALL	TWOARG 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-73


    3889 16E6				ASSOC:	J$ATOM	BX,NILRET	
    3890 16E6  81 FB 0300            1		CMP	BX,FSTNODE 
    3891 16EA  73 03                 2		JNC	$+5 
    3892 16EC  E9 019A R             2		JMP	NILRET 
    3893 16EF  90                    2		nop 
    3894 16F0  8B FB                 2		MOV     DI,BX 
    3895 16F2  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3896 16F7  74 05                 2		JZ	??00AD 
    3897 16F9  E8 0023 R             2		CALL	EMSADDR 
    3898 16FC  EB 04                 2		jmp	short ??00AE 
    3899 16FE                        2	??00AD: 
    3900 16FE  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3901 1702                        2	??00AE: 
    3902 1702  26: 8A 15             2		MOV	DL,ES:[DI] 
    3903 1705  80 FA 0F              1		CMP	DL,LIST 
    3904 1708  74 03                 2		JZ	$+5 
    3905 170A  E9 019A R             2		JMP	NILRET 
    3906 170D  90                    2		nop 
    3907 170E  53				PUSH	BX
    3908 170F  50				PUSH	AX
    3909					CAR	B,BX
    3910 1710  E8 1006 R             2		CALL	NEWCARBBX 
    3911					J$ATOM	BX,ASSOC2
    3912 1713  81 FB 0300            1		CMP	BX,FSTNODE 
    3913 1717  73 03                 2		JNC	$+5 
    3914 1719  EB 28 90              2		JMP	ASSOC2 
    3915 171C  90                    2		nop 
    3916 171D  8B FB                 2		MOV     DI,BX 
    3917 171F  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    3918 1724  74 05                 2		JZ	??00AF 
    3919 1726  E8 0023 R             2		CALL	EMSADDR 
    3920 1729  EB 04                 2		jmp	short ??00B0 
    3921 172B                        2	??00AF: 
    3922 172B  8E 06 0100 R          2		mov	ES,[NODTYP] 
    3923 172F                        2	??00B0: 
    3924 172F  26: 8A 15             2		MOV	DL,ES:[DI] 
    3925 1732  80 FA 0F              1		CMP	DL,LIST 
    3926 1735  74 03                 2		JZ	$+5 
    3927 1737  EB 0A 90              2		JMP	ASSOC2 
    3928 173A  90                    2		nop 
    3929					CAR	B,BX
    3930 173B  E8 1006 R             2		CALL	NEWCARBBX 
    3931 173E  E8 1B16 R			CALL	EQUAL
    3932 1741  74 07				JZ	HLCAR
    3933 1743  58			ASSOC2:	POP	AX
    3934 1744  5B				POP	BX
    3935					CDR	B,BX
    3936 1745  E8 0D5F R             2		CALL	NEWCDRBBX 
    3937 1748  EB 9C				JMP	ASSOC
    3938 174A  58			HLCAR:	POP	AX
    3939 174B  58				POP	AX
    3940					CAR	A,AX
    3941 174C  E8 02EB R             2		CALL	NEWCARAAX 
    3942 174F  C3				RET
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-74


    3943				
    3944				LISP$SUBRU 'not',CNOT,ONEARG
    3945 1E21                        1	dataseg segment 
    3946 1E21  1E15 R                1		DW NXTSBR 
    3947 1E23  1750 R                1		dw CODEADDR 
    3948 1E25  176A R                1		dw CNOT 
    3949 1E27  6E 6F 74 00           1	  	DB 'not',0 
    3950 1E2B                        1	dataseg ends 
    3951 1750  E8 0ECD R             1		CALL	ONEARG 
    3952 1753  3D 0000				cmp	ax,0
    3953					test$resu	z
    3954 1756  B8 0001               1		mov	ax,1 
    3955 1759  74 01                 1		jz	$+3 
    3956 175B  48                    1		dec	ax 
    3957 175C  C3                    1		ret 
    3958				LISP$SUBRU 'null',CNOT,ONEARG
    3959 1E2B                        1	dataseg segment 
    3960 1E2B  1E21 R                1		DW NXTSBR 
    3961 1E2D  175D R                1		dw CODEADDR 
    3962 1E2F  176A R                1		dw CNOT 
    3963 1E31  6E 75 6C 6C 00        1	  	DB 'null',0 
    3964 1E36                        1	dataseg ends 
    3965 175D  E8 0ECD R             1		CALL	ONEARG 
    3966 1760  3D 0000				cmp	ax,0
    3967					test$resu	z
    3968 1763  B8 0001               1		mov	ax,1 
    3969 1766  74 01                 1		jz	$+3 
    3970 1768  48                    1		dec	ax 
    3971 1769  C3                    1		ret 
    3972 176A				CNOT:	car	a,bx
    3973 176A  E8 0DCB R             2		CALL	NEWCARabx 
    3974 176D  E8 3844 R			call	ncompi
    3975					COMPIL	0,<CMP AX,0>,'CMP  AX,NIL'
    3976 1E36                        1	DATASEG	SEGMENT 
    3977 1E36  43 4D 50 20 20 41     1		DB 'CMP  AX,NIL',0 
    3978 1E42                        1	DATASEG ENDS 
    3979 1770  51                    1		push	cx 
    3980 1771  53                    1		PUSH	BX 
    3981 1772  B9 0003               1		MOV	CX,offset (??00B2-??00B1) 
    3982 1775  BE 1783 R             1		mov	si,offset ??00B1 
    3983 1778  BB 1E36 R             1		MOV	BX,offset STRA 
    3984 177B  E8 34DE R             1		call	maccod 
    3985 177E  5B                    1		POP	BX 
    3986 177F  59                    1		pop	cx 
    3987 1780  EB 04 90              1		jmp	??00B2 
    3988 1783  3D 0000               1	??00B1:	CMP AX,0 
    3989 1786                        1	??00B2: 
    3990 1786  C6 06 2D00 R 01 90		mov	[retzero],t
    3991 178C  C3				RET
    3992				
    3993				
    3994				LISP$SUBRU 'depthl',cantcomp,NUMARG
    3995 1E42                        1	dataseg segment 
    3996 1E42  1E2B R                1		DW NXTSBR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-75


    3997 1E44  178D R                1		dw CODEADDR 
    3998 1E46  3B6A R                1		dw cantcomp 
    3999 1E48  64 65 70 74 68 6C     1	  	DB 'depthl',0 
    4000 1E4F                        1	dataseg ends 
    4001 178D  E8 0F1A R             1		CALL	NUMARG 
    4002 1790  50				PUSH	AX
    4003 1791  E8 0EC7 R			CALL	EVALARG
    4004 1794  5B				POP	BX
    4005 1795				DEPTHL:
    4006					J$NIL	bx,NILRET
    4007 1795  83 FB 00              1		CMP	bx,0 
    4008 1798  75 03                 2		JnZ	$+5 
    4009 179A  E9 019A R             2		JMP	NILRET 
    4010 179D  90                    2		nop 
    4011					J$ATOM	AX,TRET
    4012 179E  3D 0300               1		CMP	AX,FSTNODE 
    4013 17A1  73 03                 2		JNC	$+5 
    4014 17A3  E9 019E R             2		JMP	TRET 
    4015 17A6  90                    2		nop 
    4016 17A7  8B F8                 2		MOV     DI,AX 
    4017 17A9  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4018 17AE  74 05                 2		JZ	??00B3 
    4019 17B0  E8 0023 R             2		CALL	EMSADDR 
    4020 17B3  EB 04                 2		jmp	short ??00B4 
    4021 17B5                        2	??00B3: 
    4022 17B5  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4023 17B9                        2	??00B4: 
    4024 17B9  26: 8A 15             2		MOV	DL,ES:[DI] 
    4025 17BC  80 FA 0F              1		CMP	DL,LIST 
    4026 17BF  74 03                 2		JZ	$+5 
    4027 17C1  E9 019E R             2		JMP	TRET 
    4028 17C4  90                    2		nop 
    4029 17C5  4B				DEC	BX
    4030 17C6  50				PUSH	AX
    4031					CAR	A,AX
    4032 17C7  E8 02EB R             2		CALL	NEWCARAAX 
    4033 17CA  E8 1795 R			CALL	dePTHL
    4034 17CD  58				POP	AX
    4035					CDR	A,AX
    4036 17CE  E8 08AB R             2		CALL	NEWCDRAAX 
    4037 17D1  EB C2				JMP	DEPTHL
    4038				
    4039				LISP$SUBRU 'length',CONEARG,ONEARG
    4040 1E4F                        1	dataseg segment 
    4041 1E4F  1E42 R                1		DW NXTSBR 
    4042 1E51  17D3 R                1		dw CODEADDR 
    4043 1E53  3B76 R                1		dw CONEARG 
    4044 1E55  6C 65 6E 67 74 68     1	  	DB 'length',0 
    4045 1E5C                        1	dataseg ends 
    4046 17D3  E8 0ECD R             1		CALL	ONEARG 
    4047 17D6  BB 0000			lengt:	MOV	BX,0
    4048 17D9				LELO:	J$ATOM	AX,LDON
    4049 17D9  3D 0300               1		CMP	AX,FSTNODE 
    4050 17DC  73 03                 2		JNC	$+5 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-76


    4051 17DE  EB 26 90              2		JMP	LDON 
    4052 17E1  90                    2		nop 
    4053 17E2  8B F8                 2		MOV     DI,AX 
    4054 17E4  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4055 17E9  74 05                 2		JZ	??00B5 
    4056 17EB  E8 0023 R             2		CALL	EMSADDR 
    4057 17EE  EB 04                 2		jmp	short ??00B6 
    4058 17F0                        2	??00B5: 
    4059 17F0  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4060 17F4                        2	??00B6: 
    4061 17F4  26: 8A 15             2		MOV	DL,ES:[DI] 
    4062 17F7  80 FA 0F              1		CMP	DL,LIST 
    4063 17FA  74 03                 2		JZ	$+5 
    4064 17FC  EB 08 90              2		JMP	LDON 
    4065 17FF  90                    2		nop 
    4066					CDR 	A
    4067 1800  E8 0208 R             2		CALL	NEWCDRA 
    4068 1803  43				INC	BX
    4069 1804  EB D3				JMP	LELO
    4070 1806  93			LDON:	xchg	BX,AX
    4071 1807  E9 05C9 R			jmp	MAKNUM
    4072				
    4073				LISP$SUBRU 'numberp',CONEARG,ONEARG
    4074 1E5C                        1	dataseg segment 
    4075 1E5C  1E4F R                1		DW NXTSBR 
    4076 1E5E  180A R                1		dw CODEADDR 
    4077 1E60  3B76 R                1		dw CONEARG 
    4078 1E62  6E 75 6D 62 65 72     1	  	DB 'numberp',0 
    4079 1E6A                        1	dataseg ends 
    4080 180A  E8 0ECD R             1		CALL	ONEARG 
    4081 180D				NMBR:	typeOF	DL,AX
    4082 180D  8B F8                 1		MOV     DI,AX 
    4083 180F  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4084 1814  74 05                 1		JZ	??00B7 
    4085 1816  E8 0023 R             1		CALL	EMSADDR 
    4086 1819  EB 04                 1		jmp	short ??00B8 
    4087 181B                        1	??00B7: 
    4088 181B  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4089 181F                        1	??00B8: 
    4090 181F  26: 8A 15             1		MOV	DL,ES:[DI] 
    4091					WHEN	NUMBER,TRET
    4092 1822  80 FA 03              1		CMP	DL,NUMBER 
    4093 1825  75 03                 2		JNZ	$+5 
    4094 1827  E9 019E R             2		JMP	TRET 
    4095 182A  90                    2		nop 
    4096 182B  E9 019A R			jmp	NILRET
    4097				
    4098				LISP$SUBRU 'stringp',CONEARG,ONEARG
    4099 1E6A                        1	dataseg segment 
    4100 1E6A  1E5C R                1		DW NXTSBR 
    4101 1E6C  182E R                1		dw CODEADDR 
    4102 1E6E  3B76 R                1		dw CONEARG 
    4103 1E70  73 74 72 69 6E 67     1	  	DB 'stringp',0 
    4104 1E78                        1	dataseg ends 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-77


    4105 182E  E8 0ECD R             1		CALL	ONEARG 
    4106					TYPEOF	DL,AX
    4107 1831  8B F8                 1		MOV     DI,AX 
    4108 1833  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4109 1838  74 05                 1		JZ	??00B9 
    4110 183A  E8 0023 R             1		CALL	EMSADDR 
    4111 183D  EB 04                 1		jmp	short ??00BA 
    4112 183F                        1	??00B9: 
    4113 183F  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4114 1843                        1	??00BA: 
    4115 1843  26: 8A 15             1		MOV	DL,ES:[DI] 
    4116					When	string,Tret
    4117 1846  80 FA 04              1		CMP	DL,string 
    4118 1849  75 03                 2		JNZ	$+5 
    4119 184B  E9 019E R             2		JMP	Tret 
    4120 184E  90                    2		nop 
    4121 184F  E9 019A R			jmp	NILRET
    4122				
    4123				LISP$SUBRU 'identp',CONEARG,ONEARG
    4124 1E78                        1	dataseg segment 
    4125 1E78  1E6A R                1		DW NXTSBR 
    4126 1E7A  1852 R                1		dw CODEADDR 
    4127 1E7C  3B76 R                1		dw CONEARG 
    4128 1E7E  69 64 65 6E 74 70     1	  	DB 'identp',0 
    4129 1E85                        1	dataseg ends 
    4130 1852  E8 0ECD R             1		CALL	ONEARG 
    4131					TYPEOF	DL,AX
    4132 1855  8B F8                 1		MOV     DI,AX 
    4133 1857  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4134 185C  74 05                 1		JZ	??00BB 
    4135 185E  E8 0023 R             1		CALL	EMSADDR 
    4136 1861  EB 04                 1		jmp	short ??00BC 
    4137 1863                        1	??00BB: 
    4138 1863  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4139 1867                        1	??00BC: 
    4140 1867  26: 8A 15             1		MOV	DL,ES:[DI] 
    4141					When	symbol,Tret
    4142 186A  80 FA 05              1		CMP	DL,symbol 
    4143 186D  75 03                 2		JNZ	$+5 
    4144 186F  E9 019E R             2		JMP	Tret 
    4145 1872  90                    2		nop 
    4146					when	fsymbo,tret
    4147 1873  80 FA 06              1		CMP	DL,fsymbo 
    4148 1876  75 03                 2		JNZ	$+5 
    4149 1878  E9 019E R             2		JMP	tret 
    4150 187B  90                    2		nop 
    4151 187C  E9 019A R			jmp	NILRET
    4152				
    4153				LISP$SUBRU 'atom',CONEARG,ONEARG
    4154 1E85                        1	dataseg segment 
    4155 1E85  1E78 R                1		DW NXTSBR 
    4156 1E87  187F R                1		dw CODEADDR 
    4157 1E89  3B76 R                1		dw CONEARG 
    4158 1E8B  61 74 6F 6D 00        1	  	DB 'atom',0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-78


    4159 1E90                        1	dataseg ends 
    4160 187F  E8 0ECD R             1		CALL	ONEARG 
    4161 1882				ATOM:	J$ATOM	AX,TRET
    4162 1882  3D 0300               1		CMP	AX,FSTNODE 
    4163 1885  73 03                 2		JNC	$+5 
    4164 1887  E9 019E R             2		JMP	TRET 
    4165 188A  90                    2		nop 
    4166 188B  8B F8                 2		MOV     DI,AX 
    4167 188D  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4168 1892  74 05                 2		JZ	??00BD 
    4169 1894  E8 0023 R             2		CALL	EMSADDR 
    4170 1897  EB 04                 2		jmp	short ??00BE 
    4171 1899                        2	??00BD: 
    4172 1899  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4173 189D                        2	??00BE: 
    4174 189D  26: 8A 15             2		MOV	DL,ES:[DI] 
    4175 18A0  80 FA 0F              1		CMP	DL,LIST 
    4176 18A3  74 03                 2		JZ	$+5 
    4177 18A5  E9 019E R             2		JMP	TRET 
    4178 18A8  90                    2		nop 
    4179 18A9  E9 019A R			jmp	NILRET
    4180				
    4181 1E90				dataseg	segment
    4182 1E90  0000				cyclic	dw nil
    4183 1E92				dataseg	ends
    4184				
    4185				LISP$SUBRU 'cyclicp',CONEARG,ONEARG
    4186 1E92                        1	dataseg segment 
    4187 1E92  1E85 R                1		DW NXTSBR 
    4188 1E94  18AC R                1		dw CODEADDR 
    4189 1E96  3B76 R                1		dw CONEARG 
    4190 1E98  63 79 63 6C 69 63     1	  	DB 'cyclicp',0 
    4191 1EA0                        1	dataseg ends 
    4192 18AC  E8 0ECD R             1		CALL	ONEARG 
    4193 18AF  C7 06 1E90 R 0000	cyclicp:mov	word ptr [cyclic],nil
    4194 18B5  E8 18BC R			call	cycli1
    4195 18B8  A1 1E90 R			mov	ax,[cyclic]
    4196 18BB  C3				ret
    4197				
    4198 18BC  83 3E 1E90 R 00		cycli1:	cmp	word ptr [cyclic],nil
    4199					rnz
    4200 18C1  74 01                 1		JZ	$+3 
    4201 18C3  C3                    1		RET 
    4202					J$ATOM	AX,CYCLI2
    4203 18C4  3D 0300               1		CMP	AX,FSTNODE 
    4204 18C7  73 03                 2		JNC	$+5 
    4205 18C9  EB 7A 90              2		JMP	CYCLI2 
    4206 18CC  90                    2		nop 
    4207 18CD  8B F8                 2		MOV     DI,AX 
    4208 18CF  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4209 18D4  74 05                 2		JZ	??00BF 
    4210 18D6  E8 0023 R             2		CALL	EMSADDR 
    4211 18D9  EB 04                 2		jmp	short ??00C0 
    4212 18DB                        2	??00BF: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-79


    4213 18DB  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4214 18DF                        2	??00C0: 
    4215 18DF  26: 8A 15             2		MOV	DL,ES:[DI] 
    4216 18E2  80 FA 0F              1		CMP	DL,LIST 
    4217 18E5  74 03                 2		JZ	$+5 
    4218 18E7  EB 5C 90              2		JMP	CYCLI2 
    4219 18EA  90                    2		nop 
    4220 18EB  80 CA 20				or	dl,circul
    4221					settype	ax,dl
    4222 18EE  8B F8                 1		MOV     DI,ax 
    4223 18F0  8A D2                 1		MOV	DL,dl 
    4224 18F2  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4225 18F7  74 05                 1		JZ	??00C1 
    4226 18F9  E8 0023 R             1		CALL	EMSADDR 
    4227 18FC  EB 04                 1		jmp	short ??00C2 
    4228 18FE                        1	??00C1: 
    4229 18FE  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4230 1902                        1	??00C2: 
    4231 1902  26: 88 15             1		MOV     ES:[DI],DL 
    4232 1905  50				push	ax
    4233					car	a
    4234 1906  E8 024B R             2		CALL	NEWCARa 
    4235 1909  E8 18BC R			call	CYCLI1
    4236 190C  58				pop	AX
    4237 190D  50				push	ax
    4238					cdr	a,ax
    4239 190E  E8 08AB R             2		CALL	NEWCDRaax 
    4240 1911  E8 18BC R			call	cycli1
    4241 1914  58				pop	ax
    4242					typeof	dl,ax
    4243 1915  8B F8                 1		MOV     DI,ax 
    4244 1917  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4245 191C  74 05                 1		JZ	??00C3 
    4246 191E  E8 0023 R             1		CALL	EMSADDR 
    4247 1921  EB 04                 1		jmp	short ??00C4 
    4248 1923                        1	??00C3: 
    4249 1923  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4250 1927                        1	??00C4: 
    4251 1927  26: 8A 15             1		MOV	dl,ES:[DI] 
    4252 192A  80 E2 DF				and	dl,not circul
    4253					settype	ax,dl
    4254 192D  8B F8                 1		MOV     DI,ax 
    4255 192F  8A D2                 1		MOV	DL,dl 
    4256 1931  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4257 1936  74 05                 1		JZ	??00C5 
    4258 1938  E8 0023 R             1		CALL	EMSADDR 
    4259 193B  EB 04                 1		jmp	short ??00C6 
    4260 193D                        1	??00C5: 
    4261 193D  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4262 1941                        1	??00C6: 
    4263 1941  26: 88 15             1		MOV     ES:[DI],DL 
    4264 1944  C3				RET
    4265 1945				CYCLI2:	typeof	dl,AX
    4266 1945  8B F8                 1		MOV     DI,AX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-80


    4267 1947  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4268 194C  74 05                 1		JZ	??00C7 
    4269 194E  E8 0023 R             1		CALL	EMSADDR 
    4270 1951  EB 04                 1		jmp	short ??00C8 
    4271 1953                        1	??00C7: 
    4272 1953  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4273 1957                        1	??00C8: 
    4274 1957  26: 8A 15             1		MOV	dl,ES:[DI] 
    4275 195A  F6 C2 20				test	dl,circul
    4276					rz
    4277 195D  75 01                 1		JNZ	$+3 
    4278 195F  C3                    1		RET 
    4279 1960  C7 06 1E90 R 0001		mov	word ptr [cyclic],t
    4280 1966  C3				ret
    4281				
    4282				logop macro op
    4283					op	AX,BX
    4284					jmp	maknum
    4285					endm
    4286				
    4287				LISP$SUBRU 'logand',Cband,TWONUM
    4288 1EA0                        1	dataseg segment 
    4289 1EA0  1E92 R                1		DW NXTSBR 
    4290 1EA2  1967 R                1		dw CODEADDR 
    4291 1EA4  196F R                1		dw Cband 
    4292 1EA6  6C 6F 67 61 6E 64     1	  	DB 'logand',0 
    4293 1EAD                        1	dataseg ends 
    4294 1967  E8 0F4B R             1		CALL	TWONUM 
    4295					LOGOP	AND
    4296 196A  23 C3                 1		AND	AX,BX 
    4297 196C  E9 05C9 R             1		jmp	maknum 
    4298 196F  E8 3C6F R		cband:	call	ctwonu1
    4299					compil	0,<AND AX,BX>,'AND  AX,BX'
    4300 1EAD                        1	DATASEG	SEGMENT 
    4301 1EAD  41 4E 44 20 20 41     1		DB 'AND  AX,BX',0 
    4302 1EB8                        1	DATASEG ENDS 
    4303 1972  51                    1		push	cx 
    4304 1973  53                    1		PUSH	BX 
    4305 1974  B9 0002               1		MOV	CX,offset (??00CA-??00C9) 
    4306 1977  BE 1985 R             1		mov	si,offset ??00C9 
    4307 197A  BB 1EAD R             1		MOV	BX,offset STRA 
    4308 197D  E8 34DE R             1		call	maccod 
    4309 1980  5B                    1		POP	BX 
    4310 1981  59                    1		pop	cx 
    4311 1982  EB 03 90              1		jmp	??00CA 
    4312 1985  23 C3                 1	??00C9:	AND AX,BX 
    4313 1987                        1	??00CA: 
    4314 1987  E9 115C R			JMP	CMAKNUM
    4315				
    4316				LISP$SUBRU 'logor',Cbor,TWONUM
    4317 1EB8                        1	dataseg segment 
    4318 1EB8  1EA0 R                1		DW NXTSBR 
    4319 1EBA  198A R                1		dw CODEADDR 
    4320 1EBC  1992 R                1		dw Cbor 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-81


    4321 1EBE  6C 6F 67 6F 72 00     1	  	DB 'logor',0 
    4322 1EC4                        1	dataseg ends 
    4323 198A  E8 0F4B R             1		CALL	TWONUM 
    4324					LOGOP	OR
    4325 198D  0B C3                 1		OR	AX,BX 
    4326 198F  E9 05C9 R             1		jmp	maknum 
    4327 1992  E8 3C6F R		cbor:	call	ctwonu1
    4328					compil	0,<OR AX,BX>,'OR   AX,BX'
    4329 1EC4                        1	DATASEG	SEGMENT 
    4330 1EC4  4F 52 20 20 20 41     1		DB 'OR   AX,BX',0 
    4331 1ECF                        1	DATASEG ENDS 
    4332 1995  51                    1		push	cx 
    4333 1996  53                    1		PUSH	BX 
    4334 1997  B9 0002               1		MOV	CX,offset (??00CC-??00CB) 
    4335 199A  BE 19A8 R             1		mov	si,offset ??00CB 
    4336 199D  BB 1EC4 R             1		MOV	BX,offset STRA 
    4337 19A0  E8 34DE R             1		call	maccod 
    4338 19A3  5B                    1		POP	BX 
    4339 19A4  59                    1		pop	cx 
    4340 19A5  EB 03 90              1		jmp	??00CC 
    4341 19A8  0B C3                 1	??00CB:	OR AX,BX 
    4342 19AA                        1	??00CC: 
    4343 19AA  E9 115C R			JMP	CMAKNUM
    4344				
    4345				LISP$SUBRU 'logxor',Cbxor,TWONUM
    4346 1ECF                        1	dataseg segment 
    4347 1ECF  1EB8 R                1		DW NXTSBR 
    4348 1ED1  19AD R                1		dw CODEADDR 
    4349 1ED3  19B5 R                1		dw Cbxor 
    4350 1ED5  6C 6F 67 78 6F 72     1	  	DB 'logxor',0 
    4351 1EDC                        1	dataseg ends 
    4352 19AD  E8 0F4B R             1		CALL	TWONUM 
    4353					LOGOP	XOR
    4354 19B0  33 C3                 1		XOR	AX,BX 
    4355 19B2  E9 05C9 R             1		jmp	maknum 
    4356 19B5  E8 3C6F R		cbxor:	call	ctwonu1
    4357					compil	0,<XOR AX,BX>,'XOR  AX,BX'
    4358 1EDC                        1	DATASEG	SEGMENT 
    4359 1EDC  58 4F 52 20 20 41     1		DB 'XOR  AX,BX',0 
    4360 1EE7                        1	DATASEG ENDS 
    4361 19B8  51                    1		push	cx 
    4362 19B9  53                    1		PUSH	BX 
    4363 19BA  B9 0002               1		MOV	CX,offset (??00CE-??00CD) 
    4364 19BD  BE 19CB R             1		mov	si,offset ??00CD 
    4365 19C0  BB 1EDC R             1		MOV	BX,offset STRA 
    4366 19C3  E8 34DE R             1		call	maccod 
    4367 19C6  5B                    1		POP	BX 
    4368 19C7  59                    1		pop	cx 
    4369 19C8  EB 03 90              1		jmp	??00CE 
    4370 19CB  33 C3                 1	??00CD:	XOR AX,BX 
    4371 19CD                        1	??00CE: 
    4372 19CD  E9 115C R			JMP	CMAKNUM
    4373				
    4374				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-82


    4375				purge logop
    4376				
    4377				LISP$SUBRU 'tab',cONEARG,EVALARG
    4378 1EE7                        1	dataseg segment 
    4379 1EE7  1ECF R                1		DW NXTSBR 
    4380 1EE9  19D0 R                1		dw CODEADDR 
    4381 1EEB  3B76 R                1		dw cONEARG 
    4382 1EED  74 61 62 00           1	  	DB 'tab',0 
    4383 1EF1                        1	dataseg ends 
    4384 19D0  E8 0EC7 R             1		CALL	EVALARG 
    4385					J$NIL	ax,ATAB
    4386 19D3  3D 0000               1		CMP	ax,0 
    4387 19D6  75 03                 2		JnZ	$+5 
    4388 19D8  EB 18 90              2		JMP	ATAB 
    4389 19DB  90                    2		nop 
    4390 19DC  E8 0F1D R			CALL	NUMVAL
    4391 19DF  8B D8				MOV	BX,AX
    4392 19E1				DOTAB:
    4393 19E1  38 1E 2693 R		BTAB:	cmp	byte ptr[tabs],bl
    4394					jmpN	C,NILRET
    4395 19E5  72 03                 1		JC	$+5 
    4396 19E7  E9 019A R             1		JMP	NILRET 
    4397 19EA  90                    1		nop 
    4398 19EB  B2 20				MOV	dl,20H
    4399 19ED  E8 2882 R			CALL	PRINTC
    4400 19F0  EB EF				JMP	BTAB
    4401 19F2  8A 16 2693 R		ATAB:	MOV	dl,[TABS]
    4402 19F6  B4 00			ascii:	mov	ah,0
    4403 19F8  8A C2				mov	al,dl
    4404 19FA  05 0003				ADD	AX,ZERONUM
    4405 19FD  C3				ret
    4406				
    4407				LISP$SUBRU 'pprint',CONEARG,ONEARG
    4408 1EF1                        1	dataseg segment 
    4409 1EF1  1EE7 R                1		DW NXTSBR 
    4410 1EF3  19FE R                1		dw CODEADDR 
    4411 1EF5  3B76 R                1		dw CONEARG 
    4412 1EF7  70 70 72 69 6E 74     1	  	DB 'pprint',0 
    4413 1EFE                        1	dataseg ends 
    4414 19FE  E8 0ECD R             1		CALL	ONEARG 
    4415 1A01  50				PUSH	AX
    4416 1A02  E8 1A07 R			CALL	PPRINT
    4417 1A05  58				POP	AX
    4418 1A06  C3				RET
    4419				
    4420 1A07  8A 1E 2693 R		PPRInt:	MOV	bl,[TABS]
    4421 1A0B				PPRIN2:
    4422 1A0B  53				PUSH	BX
    4423 1A0C  50				PUSH	AX
    4424 1A0D  BB 000F				MOV	BX,15
    4425 1A10  E8 1795 R			CALL	dePTHL
    4426 1A13  3D 0000				cmp	ax,0
    4427 1A16  58				POP	AX
    4428 1A17  5B				POP	BX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-83


    4429					JmPN	Z,PRINT
    4430 1A18  74 03                 1		JZ	$+5 
    4431 1A1A  E9 0A47 R             1		JMP	PRINT 
    4432 1A1D  90                    1		nop 
    4433 1A1E  FE C3				INC	bl
    4434 1A20  B2 28				MOV	dl,'('
    4435 1A22  E8 2882 R			CALL	PRINTC
    4436 1A25  53			PPR3:	PUSH	BX	
    4437 1A26  50				PUSH	AX
    4438					CAR	A,AX
    4439 1A27  E8 02EB R             2		CALL	NEWCARAAX 
    4440					J$ATOM	AX,PPRATO
    4441 1A2A  3D 0300               1		CMP	AX,FSTNODE 
    4442 1A2D  73 03                 2		JNC	$+5 
    4443 1A2F  EB 5B 90              2		JMP	PPRATO 
    4444 1A32  90                    2		nop 
    4445 1A33  8B F8                 2		MOV     DI,AX 
    4446 1A35  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4447 1A3A  74 05                 2		JZ	??00CF 
    4448 1A3C  E8 0023 R             2		CALL	EMSADDR 
    4449 1A3F  EB 04                 2		jmp	short ??00D0 
    4450 1A41                        2	??00CF: 
    4451 1A41  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4452 1A45                        2	??00D0: 
    4453 1A45  26: 8A 15             2		MOV	DL,ES:[DI] 
    4454 1A48  80 FA 0F              1		CMP	DL,LIST 
    4455 1A4B  74 03                 2		JZ	$+5 
    4456 1A4D  EB 3D 90              2		JMP	PPRATO 
    4457 1A50  90                    2		nop 
    4458 1A51  E8 1A0B R		PPRANO:	CALL	PPRIN2
    4459 1A54  58				POP	AX
    4460					CDR	A,AX
    4461 1A55  E8 08AB R             2		CALL	NEWCDRAAX 
    4462					J$ATOM	AX,PPRE
    4463 1A58  3D 0300               1		CMP	AX,FSTNODE 
    4464 1A5B  73 03                 2		JNC	$+5 
    4465 1A5D  E9 1AFA R             2		JMP	PPRE 
    4466 1A60  90                    2		nop 
    4467 1A61  8B F8                 2		MOV     DI,AX 
    4468 1A63  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4469 1A68  74 05                 2		JZ	??00D1 
    4470 1A6A  E8 0023 R             2		CALL	EMSADDR 
    4471 1A6D  EB 04                 2		jmp	short ??00D2 
    4472 1A6F                        2	??00D1: 
    4473 1A6F  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4474 1A73                        2	??00D2: 
    4475 1A73  26: 8A 15             2		MOV	DL,ES:[DI] 
    4476 1A76  80 FA 0F              1		CMP	DL,LIST 
    4477 1A79  74 03                 2		JZ	$+5 
    4478 1A7B  EB 7D 90              2		JMP	PPRE 
    4479 1A7E  90                    2		nop 
    4480 1A7F  5B			PPRAEJ:	POP	BX
    4481 1A80  53				PUSH	BX
    4482 1A81  50				PUSH	AX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-84


    4483 1A82  E8 0C7E R			CALL	CRLF
    4484 1A85  E8 19E1 R			CALL	DOTAB
    4485 1A88  58				POP	AX
    4486 1A89  5B			PPRATE:	POP	BX
    4487 1A8A  EB 99				jmp	PPR3
    4488 1A8C  8A 1E 2693 R		PPRATO:	MOV	bl,[TABS]
    4489 1A90  80 FB 32				Cmp	bl,50
    4490					JMPn	C,PPRANO
    4491 1A93  72 03                 1		JC	$+5 
    4492 1A95  EB BA                 1		JMP	PPRANO 
    4493 1A97  90                    1		nop 
    4494 1A98  E8 0A47 R			CALL	PRINT	
    4495 1A9B  58				POP	AX
    4496					CDR	A,AX
    4497 1A9C  E8 08AB R             2		CALL	NEWCDRAAX 
    4498					J$ATOM	AX,PPRE
    4499 1A9F  3D 0300               1		CMP	AX,FSTNODE 
    4500 1AA2  73 03                 2		JNC	$+5 
    4501 1AA4  EB 54 90              2		JMP	PPRE 
    4502 1AA7  90                    2		nop 
    4503 1AA8  8B F8                 2		MOV     DI,AX 
    4504 1AAA  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4505 1AAF  74 05                 2		JZ	??00D3 
    4506 1AB1  E8 0023 R             2		CALL	EMSADDR 
    4507 1AB4  EB 04                 2		jmp	short ??00D4 
    4508 1AB6                        2	??00D3: 
    4509 1AB6  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4510 1ABA                        2	??00D4: 
    4511 1ABA  26: 8A 15             2		MOV	DL,ES:[DI] 
    4512 1ABD  80 FA 0F              1		CMP	DL,LIST 
    4513 1AC0  74 03                 2		JZ	$+5 
    4514 1AC2  EB 36 90              2		JMP	PPRE 
    4515 1AC5  90                    2		nop 
    4516					CAR	B,AX
    4517 1AC6  E8 049D R             2		CALL	NEWCARBAX 
    4518					J$ATOM	BX,PRRATJ
    4519 1AC9  81 FB 0300            1		CMP	BX,FSTNODE 
    4520 1ACD  73 03                 2		JNC	$+5 
    4521 1ACF  EB 22 90              2		JMP	PRRATJ 
    4522 1AD2  90                    2		nop 
    4523 1AD3  8B FB                 2		MOV     DI,BX 
    4524 1AD5  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4525 1ADA  74 05                 2		JZ	??00D5 
    4526 1ADC  E8 0023 R             2		CALL	EMSADDR 
    4527 1ADF  EB 04                 2		jmp	short ??00D6 
    4528 1AE1                        2	??00D5: 
    4529 1AE1  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4530 1AE5                        2	??00D6: 
    4531 1AE5  26: 8A 15             2		MOV	DL,ES:[DI] 
    4532 1AE8  80 FA 0F              1		CMP	DL,LIST 
    4533 1AEB  74 03                 2		JZ	$+5 
    4534 1AED  EB 04 90              2		JMP	PRRATJ 
    4535 1AF0  90                    2		nop 
    4536 1AF1  EB 8C				JMP	PPRAEJ
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-85


    4537 1AF3  B2 20			PRRATJ:	MOV	dl,20H
    4538 1AF5  E8 2882 R			CALL	PRINTC
    4539 1AF8  EB 8F				JMP	PPRATE
    4540 1AFA  5B			PPRE:	POP	BX
    4541					J$NIL	ax,PPRE2
    4542 1AFB  3D 0000               1		CMP	ax,0 
    4543 1AFE  75 03                 2		JnZ	$+5 
    4544 1B00  EB 0F 90              2		JMP	PPRE2 
    4545 1B03  90                    2		nop 
    4546 1B04  50				PUSH	AX
    4547					PRITHS ' . '
    4548 1EFE                        1	dataseg segment 
    4549 1EFE  20 2E 20 00           1		DB ' . ',0 
    4550 1F02                        1	dataseg ends 
    4551 1B05  53                    1		push	bx 
    4552 1B06  BB 1EFE R             1		mov	bx,offset tempaddr 
    4553 1B09  E8 018C R             1		CALL	PRINTS 
    4554 1B0C  5B                    1		pop	bx 
    4555 1B0D  58				POP	AX
    4556 1B0E  E8 0A47 R			CALL	PRINT
    4557 1B11  B2 29			PPRE2:	MOV	dl,')'
    4558 1B13  E9 2882 R			jmp	PRINTC
    4559				
    4560				
    4561 1B16  3B C3			EQUAL:	cmp	ax,bx
    4562					rz
    4563 1B18  75 01                 1		JNZ	$+3 
    4564 1B1A  C3                    1		RET 
    4565					J$ATOM	AX,EQ$ATO
    4566 1B1B  3D 0300               1		CMP	AX,FSTNODE 
    4567 1B1E  73 03                 2		JNC	$+5 
    4568 1B20  EB 62 90              2		JMP	EQ$ATO 
    4569 1B23  90                    2		nop 
    4570 1B24  8B F8                 2		MOV     DI,AX 
    4571 1B26  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4572 1B2B  74 05                 2		JZ	??00D7 
    4573 1B2D  E8 0023 R             2		CALL	EMSADDR 
    4574 1B30  EB 04                 2		jmp	short ??00D8 
    4575 1B32                        2	??00D7: 
    4576 1B32  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4577 1B36                        2	??00D8: 
    4578 1B36  26: 8A 15             2		MOV	DL,ES:[DI] 
    4579 1B39  80 FA 0F              1		CMP	DL,LIST 
    4580 1B3C  74 03                 2		JZ	$+5 
    4581 1B3E  EB 44 90              2		JMP	EQ$ATO 
    4582 1B41  90                    2		nop 
    4583					J$ATOM	bX,NOEQ
    4584 1B42  81 FB 0300            1		CMP	bX,FSTNODE 
    4585 1B46  73 03                 2		JNC	$+5 
    4586 1B48  EB 62 90              2		JMP	NOEQ 
    4587 1B4B  90                    2		nop 
    4588 1B4C  8B FB                 2		MOV     DI,bX 
    4589 1B4E  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4590 1B53  74 05                 2		JZ	??00D9 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-86


    4591 1B55  E8 0023 R             2		CALL	EMSADDR 
    4592 1B58  EB 04                 2		jmp	short ??00DA 
    4593 1B5A                        2	??00D9: 
    4594 1B5A  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4595 1B5E                        2	??00DA: 
    4596 1B5E  26: 8A 15             2		MOV	DL,ES:[DI] 
    4597 1B61  80 FA 0F              1		CMP	DL,LIST 
    4598 1B64  74 03                 2		JZ	$+5 
    4599 1B66  EB 44 90              2		JMP	NOEQ 
    4600 1B69  90                    2		nop 
    4601 1B6A  50				PUSH	AX
    4602 1B6B  53				PUSH	BX
    4603					CAR	A,AX
    4604 1B6C  E8 02EB R             2		CALL	NEWCARAAX 
    4605 1B6F  93				XCHG	BX,AX
    4606					CAR	A,AX
    4607 1B70  E8 02EB R             2		CALL	NEWCARAAX 
    4608 1B73  E8 1B16 R			CALL	EQUAL
    4609 1B76  5B				POP	BX
    4610 1B77  58				POP	AX
    4611					RNZ
    4612 1B78  74 01                 1		JZ	$+3 
    4613 1B7A  C3                    1		RET 
    4614					CDR	A,AX
    4615 1B7B  E8 08AB R             2		CALL	NEWCDRAAX 
    4616 1B7E  93				XCHG	BX,AX
    4617					CDR	A,AX
    4618 1B7F  E8 08AB R             2		CALL	NEWCDRAAX 
    4619 1B82  EB 92				JMP	EQUAL
    4620 1B84  93			EQ$ATO:	XCHG	BX,AX
    4621					J$ATOM	AX,EQ$AT2
    4622 1B85  3D 0300               1		CMP	AX,FSTNODE 
    4623 1B88  73 03                 2		JNC	$+5 
    4624 1B8A  EB 25 90              2		JMP	EQ$AT2 
    4625 1B8D  90                    2		nop 
    4626 1B8E  8B F8                 2		MOV     DI,AX 
    4627 1B90  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4628 1B95  74 05                 2		JZ	??00DB 
    4629 1B97  E8 0023 R             2		CALL	EMSADDR 
    4630 1B9A  EB 04                 2		jmp	short ??00DC 
    4631 1B9C                        2	??00DB: 
    4632 1B9C  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4633 1BA0                        2	??00DC: 
    4634 1BA0  26: 8A 15             2		MOV	DL,ES:[DI] 
    4635 1BA3  80 FA 0F              1		CMP	DL,LIST 
    4636 1BA6  74 03                 2		JZ	$+5 
    4637 1BA8  EB 07 90              2		JMP	EQ$AT2 
    4638 1BAB  90                    2		nop 
    4639 1BAC  B0 01			NOEQ:	mov	al,1
    4640 1BAE  3C 00				cmp	al,0
    4641 1BB0  C3				RET
    4642 1BB1				EQ$AT2:
    4643					TYPEOF	DL,AX
    4644 1BB1  8B F8                 1		MOV     DI,AX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-87


    4645 1BB3  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4646 1BB8  74 05                 1		JZ	??00DD 
    4647 1BBA  E8 0023 R             1		CALL	EMSADDR 
    4648 1BBD  EB 04                 1		jmp	short ??00DE 
    4649 1BBF                        1	??00DD: 
    4650 1BBF  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4651 1BC3                        1	??00DE: 
    4652 1BC3  26: 8A 15             1		MOV	DL,ES:[DI] 
    4653					TYPEOF	DH,BX
    4654 1BC6  8B FB                 1		MOV     DI,BX 
    4655 1BC8  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4656 1BCD  74 05                 1		JZ	??00DF 
    4657 1BCF  E8 0023 R             1		CALL	EMSADDR 
    4658 1BD2  EB 04                 1		jmp	short ??00E0 
    4659 1BD4                        1	??00DF: 
    4660 1BD4  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4661 1BD8                        1	??00E0: 
    4662 1BD8  26: 8A 35             1		MOV	DH,ES:[DI] 
    4663 1BDB  3A D6				CMP	DL,DH
    4664					RNZ
    4665 1BDD  74 01                 1		JZ	$+3 
    4666 1BDF  C3                    1		RET 
    4667					WHEN	STRING,STREQU
    4668 1BE0  80 FA 04              1		CMP	DL,STRING 
    4669 1BE3  75 03                 2		JNZ	$+5 
    4670 1BE5  EB 33 90              2		JMP	STREQU 
    4671 1BE8  90                    2		nop 
    4672 1BE9  80 FA 03				CMP	DL,NUMBER
    4673					RNZ
    4674 1BEC  74 01                 1		JZ	$+3 
    4675 1BEE  C3                    1		RET 
    4676					CAR	C,AX
    4677 1BEF  E8 0936 R             2		CALL	NEWCARCAX 
    4678					CAR	D,BX
    4679 1BF2  EB 20                 3		jmp	short ??00E1 
    4680 1BF4                        3	NEWCARDBX: 
    4681 1BF4  8B FB                 4		MOV     DI,BX 
    4682 1BF6  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    4683 1BFB  74 08                 4		JZ	??00E2 
    4684 1BFD  E8 0023 R             4		CALL	EMSADDR 
    4685 1C00  26: 8B 55 04          4		MOV	DX,ES:[DI+4] 
    4686 1C04  C3                    4		RET 
    4687 1C05                        4	??00E2: 
    4688 1C05  8E 06 0102 R          3		mov	ES,[CARLOW] 
    4689 1C09  26: 8A 15             3		mov     DL,ES:[DI] 
    4690 1C0C  8E 06 0104 R          3		mov	ES,[CARHIG] 
    4691 1C10  26: 8A 35             3		mov	DH,ES:[DI] 
    4692 1C13  C3                    3		RET 
    4693 1C14                        3	??00E1: 
    4694 1C14  E8 1BF4 R             2		CALL	NEWCARDBX 
    4695 1C17  3B CA				CMP	CX,DX
    4696 1C19  C3				RET
    4697				
    4698 1C1A  3B C3			STREQU:	cmp	ax,bx
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-88


    4699					RZ
    4700 1C1C  75 01                 1		JNZ	$+3 
    4701 1C1E  C3                    1		RET 
    4702					J$NIL	AX,NOEQ
    4703 1C1F  3D 0000               1		CMP	AX,0 
    4704 1C22  75 03                 2		JnZ	$+5 
    4705 1C24  EB 86                 2		JMP	NOEQ 
    4706 1C26  90                    2		nop 
    4707					J$NIL	BX,NOEQ
    4708 1C27  83 FB 00              1		CMP	BX,0 
    4709 1C2A  75 03                 2		JnZ	$+5 
    4710 1C2C  E9 1BAC R             2		JMP	NOEQ 
    4711 1C2F  90                    2		nop 
    4712 1C30  50				PUSH	AX
    4713 1C31  53				PUSH	BX
    4714					CAR	A,AX
    4715 1C32  E8 02EB R             2		CALL	NEWCARAAX 
    4716					CAR	B,BX
    4717 1C35  E8 1006 R             2		CALL	NEWCARBBX 
    4718 1C38  3B C3				cmp	ax,bx
    4719 1C3A  5B				POP	BX
    4720 1C3B  58				POP	AX
    4721					JMPN	Z,NOEQ
    4722 1C3C  74 03                 1		JZ	$+5 
    4723 1C3E  E9 1BAC R             1		JMP	NOEQ 
    4724 1C41  90                    1		nop 
    4725					CDR	B,BX
    4726 1C42  E8 0D5F R             2		CALL	NEWCDRBBX 
    4727					CDR	A,AX
    4728 1C45  E8 08AB R             2		CALL	NEWCDRAAX 
    4729 1C48  EB D0				JMP	STREQU		
    4730				
    4731				
    4732				LISP$SUBRU 'equal',CTWOARG,TWOARG
    4733 1F02                        1	dataseg segment 
    4734 1F02  1EF1 R                1		DW NXTSBR 
    4735 1F04  1C4A R                1		dw CODEADDR 
    4736 1F06  3B94 R                1		dw CTWOARG 
    4737 1F08  65 71 75 61 6C 00     1	  	DB 'equal',0 
    4738 1F0E                        1	dataseg ends 
    4739 1C4A  E8 0ED9 R             1		CALL	TWOARG 
    4740 1C4D  E8 1B16 R			CALL	EQUAL
    4741					test$resu	z
    4742 1C50  B8 0001               1		mov	ax,1 
    4743 1C53  74 01                 1		jz	$+3 
    4744 1C55  48                    1		dec	ax 
    4745 1C56  C3                    1		ret 
    4746				
    4747				
    4748				LISP$SUBRU 'eq',CEQ,TWOARG
    4749 1F0E                        1	dataseg segment 
    4750 1F0E  1F02 R                1		DW NXTSBR 
    4751 1F10  1C57 R                1		dw CODEADDR 
    4752 1F12  1C63 R                1		dw CEQ 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-89


    4753 1F14  65 71 00              1	  	DB 'eq',0 
    4754 1F17                        1	dataseg ends 
    4755 1C57  E8 0ED9 R             1		CALL	TWOARG 
    4756 1C5A  3B C3				cmp	ax,bx
    4757					test$resu	z
    4758 1C5C  B8 0001               1		mov	ax,1 
    4759 1C5F  74 01                 1		jz	$+3 
    4760 1C61  48                    1		dec	ax 
    4761 1C62  C3                    1		ret 
    4762 1C63  E8 3BA3 R		CEQ:	call	ctwoar1
    4763					compil	0,<cmp ax,bx>,'CMP  AX,BX'
    4764 1F17                        1	DATASEG	SEGMENT 
    4765 1F17  43 4D 50 20 20 41     1		DB 'CMP  AX,BX',0 
    4766 1F22                        1	DATASEG ENDS 
    4767 1C66  51                    1		push	cx 
    4768 1C67  53                    1		PUSH	BX 
    4769 1C68  B9 0002               1		MOV	CX,offset (??00E4-??00E3) 
    4770 1C6B  BE 1C79 R             1		mov	si,offset ??00E3 
    4771 1C6E  BB 1F17 R             1		MOV	BX,offset STRA 
    4772 1C71  E8 34DE R             1		call	maccod 
    4773 1C74  5B                    1		POP	BX 
    4774 1C75  59                    1		pop	cx 
    4775 1C76  EB 03 90              1		jmp	??00E4 
    4776 1C79  3B C3                 1	??00E3:	cmp ax,bx 
    4777 1C7B                        1	??00E4: 
    4778 1C7B  C6 06 2D00 R 01 90		mov	[retzero],t
    4779 1C81  C3				ret
    4780				
    4781				;===== lambdat ja prognit
    4782				
    4783				pushbx	macro pino
    4784					mov	ax,[pino]
    4785					xchg	ax,bx
    4786					call	cons
    4787					mov	[pino],ax
    4788					endm
    4789				
    4790				popbx	macro	pino
    4791					mov	ax,[pino]
    4792					car$cdr	b,a,ax
    4793					mov	[pino],ax
    4794					endm
    4795				
    4796				LISP$SUBRU 'setset',CTWOARG,TWOARG	
    4797 1F22                        1	dataseg segment 
    4798 1F22  1F0E R                1		DW NXTSBR 
    4799 1F24  1C82 R                1		dw CODEADDR 
    4800 1F26  3B94 R                1		dw CTWOARG 
    4801 1F28  73 65 74 73 65 74     1	  	DB 'setset',0 
    4802 1F2F                        1	dataseg ends 
    4803 1C82  E8 0ED9 R             1		CALL	TWOARG 
    4804 1C85				SETSET:	R$NIL	AX
    4805 1C85  3D 0000               1		CMP	AX,0 
    4806 1C88  75 01                 2		JNZ	$+3 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-90


    4807 1C8A  C3                    2		RET 
    4808					J$ATOM	AX,SETSE2
    4809 1C8B  3D 0300               1		CMP	AX,FSTNODE 
    4810 1C8E  73 03                 2		JNC	$+5 
    4811 1C90  EB 64 90              2		JMP	SETSE2 
    4812 1C93  90                    2		nop 
    4813 1C94  8B F8                 2		MOV     DI,AX 
    4814 1C96  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4815 1C9B  74 05                 2		JZ	??00E5 
    4816 1C9D  E8 0023 R             2		CALL	EMSADDR 
    4817 1CA0  EB 04                 2		jmp	short ??00E6 
    4818 1CA2                        2	??00E5: 
    4819 1CA2  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4820 1CA6                        2	??00E6: 
    4821 1CA6  26: 8A 15             2		MOV	DL,ES:[DI] 
    4822 1CA9  80 FA 0F              1		CMP	DL,LIST 
    4823 1CAC  74 03                 2		JZ	$+5 
    4824 1CAE  EB 46 90              2		JMP	SETSE2 
    4825 1CB1  90                    2		nop 
    4826					CDR	c
    4827 1CB2  E8 04C2 R             2		CALL	NEWCDRc 
    4828 1CB5  51				PUSH	CX
    4829					car	a
    4830 1CB6  E8 024B R             2		CALL	NEWCARa 
    4831					J$ATOM	BX,SETNIL
    4832 1CB9  81 FB 0300            1		CMP	BX,FSTNODE 
    4833 1CBD  73 03                 2		JNC	$+5 
    4834 1CBF  EB 2A 90              2		JMP	SETNIL 
    4835 1CC2  90                    2		nop 
    4836 1CC3  8B FB                 2		MOV     DI,BX 
    4837 1CC5  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4838 1CCA  74 05                 2		JZ	??00E7 
    4839 1CCC  E8 0023 R             2		CALL	EMSADDR 
    4840 1CCF  EB 04                 2		jmp	short ??00E8 
    4841 1CD1                        2	??00E7: 
    4842 1CD1  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4843 1CD5                        2	??00E8: 
    4844 1CD5  26: 8A 15             2		MOV	DL,ES:[DI] 
    4845 1CD8  80 FA 0F              1		CMP	DL,LIST 
    4846 1CDB  74 03                 2		JZ	$+5 
    4847 1CDD  EB 0C 90              2		JMP	SETNIL 
    4848 1CE0  90                    2		nop 
    4849					CDR	c
    4850 1CE1  E8 04C2 R             2		CALL	NEWCDRc 
    4851 1CE4  51				PUSH	CX
    4852					car	b
    4853 1CE5  E8 0CF6 R             2		CALL	NEWCARb 
    4854 1CE8  EB 05 90				jmp	NOSETN
    4855 1CEB  BB 0000			SETNIL:	MOV	BX,NIL
    4856 1CEE  53				PUSH	BX	
    4857 1CEF  E8 1C85 R		NOSETN:	CALL	SETSET
    4858 1CF2  5B				POP	BX
    4859 1CF3  58				POP	AX
    4860 1CF4  EB 8F				jmp	SETSET
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-91


    4861 1CF6  E8 1048 R		SETSE2:	CALL	SETT
    4862 1CF9  C3				RET
    4863				
    4864					;AX= ids
    4865 1CFA				GETGET: R$NIL	AX
    4866 1CFA  3D 0000               1		CMP	AX,0 
    4867 1CFD  75 01                 2		JNZ	$+3 
    4868 1CFF  C3                    2		RET 
    4869					J$ATOM	AX,GETGE2
    4870 1D00  3D 0300               1		CMP	AX,FSTNODE 
    4871 1D03  73 03                 2		JNC	$+5 
    4872 1D05  EB 37 90              2		JMP	GETGE2 
    4873 1D08  90                    2		nop 
    4874 1D09  8B F8                 2		MOV     DI,AX 
    4875 1D0B  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    4876 1D10  74 05                 2		JZ	??00E9 
    4877 1D12  E8 0023 R             2		CALL	EMSADDR 
    4878 1D15  EB 04                 2		jmp	short ??00EA 
    4879 1D17                        2	??00E9: 
    4880 1D17  8E 06 0100 R          2		mov	ES,[NODTYP] 
    4881 1D1B                        2	??00EA: 
    4882 1D1B  26: 8A 15             2		MOV	DL,ES:[DI] 
    4883 1D1E  80 FA 0F              1		CMP	DL,LIST 
    4884 1D21  74 03                 2		JZ	$+5 
    4885 1D23  EB 19 90              2		JMP	GETGE2 
    4886 1D26  90                    2		nop 
    4887					car$cdr	a,b,ax
    4888 1D27  E8 02EB R             3		CALL	NEWCARaax 
    4889 1D2A  E8 022A R             3		CALL	NEWCDRb 
    4890 1D2D  53				push	bx
    4891 1D2E  E8 1CFA R			CALL	GETGET
    4892 1D31  8B EC				mov	bp,sp
    4893 1D33  87 46 00				xchg	AX,[bp]
    4894 1D36  E8 1CFA R			CALL	GETGET
    4895 1D39  5B				POP	BX
    4896 1D3A  93				XCHG	BX,AX
    4897 1D3B  E9 05AE R			jmp	CONS
    4898 1D3E				GETGE2:	TYPEOF	DL,AX
    4899 1D3E  8B F8                 1		MOV     DI,AX 
    4900 1D40  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4901 1D45  74 05                 1		JZ	??00EB 
    4902 1D47  E8 0023 R             1		CALL	EMSADDR 
    4903 1D4A  EB 04                 1		jmp	short ??00EC 
    4904 1D4C                        1	??00EB: 
    4905 1D4C  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4906 1D50                        1	??00EC: 
    4907 1D50  26: 8A 15             1		MOV	DL,ES:[DI] 
    4908 1D53  80 FA 05				CMP	DL,SYMBOL
    4909					jmpn	nz,eatom
    4910 1D56  75 03                 1		Jnz	$+5 
    4911 1D58  E9 0E0C R             1		JMP	eatom 
    4912 1D5B  90                    1		nop 
    4913 1D5C  80 FA 06				cmp	dl,fsymbo
    4914					jmpn	nz,eatom
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-92


    4915 1D5F  75 03                 1		Jnz	$+5 
    4916 1D61  E9 0E0C R             1		JMP	eatom 
    4917 1D64  90                    1		nop 
    4918 1D65  EB 01 90				jmp	LAMBERR
    4919				
    4920				
    4921				
    4922 1D68				LAMBERR:
    4923					LISP$ERROR 'NOT A NAME ='
    4924 1F2F                        1		dataseg segment 
    4925 1F2F  4E 4F 54 20 41 20     1		   db 'NOT A NAME =',0 
    4926 1F3C                        1		dataseg ends 
    4927 1D68  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    4928 1D6E  BB 1F2F R             1		MOV	BX,OFFSET tempaddr 
    4929 1D71  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    4930 1D75  E8 4044 R             1		call	ERHE 
    4931 1D78  C3                    1		ret 
    4932				
    4933					
    4934 1D79  50			SAVEVAR:PUSH	AX
    4935 1D7A  E8 1CFA R			CALL	GETGET
    4936 1D7D  5B				POP	BX
    4937 1D7E  53				PUSH	BX
    4938 1D7F  93				XCHG	BX,AX
    4939 1D80  E8 05AE R			CALL	CONS
    4940 1D83  93				XCHG	BX,AX
    4941					pushbx	ENVIRO
    4942 1D84  A1 0112 R             1		mov	ax,[ENVIRO] 
    4943 1D87  93                    1		xchg	ax,bx 
    4944 1D88  E8 05AE R             1		call	cons 
    4945 1D8B  A3 0112 R             1		mov	[ENVIRO],ax 
    4946 1D8E  58				POP	AX
    4947 1D8F  C3				RET
    4948				
    4949 1D90  50			RSTOVAR:PUSH	AX
    4950					popbx	ENVIRO	
    4951 1D91  A1 0112 R             1		mov	ax,[ENVIRO] 
    4952 1D94  E8 049D R             4		CALL	NEWCARbax 
    4953 1D97  E8 0208 R             4		CALL	NEWCDRa 
    4954 1D9A  A3 0112 R             1		mov	[ENVIRO],ax 
    4955					CAR$CDR	A,B,BX
    4956 1D9D  E8 0DCB R             3		CALL	NEWCARABX 
    4957 1DA0  E8 022A R             3		CALL	NEWCDRB 
    4958 1DA3  E8 1C85 R			CALL	SETSET
    4959 1DA6  58				POP	AX
    4960 1DA7				FRAME_RET:
    4961 1DA7  C3				RET
    4962 1DA8  59				POP	CX
    4963 1DA9  E9 2080 R			JMP	FRAMEXIT
    4964				
    4965					;AX=[(id) (id) (id))
    4966 1DAC				LETVAR: R$NIL	AX
    4967 1DAC  3D 0000               1		CMP	AX,0 
    4968 1DAF  75 01                 2		JNZ	$+3 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-93


    4969 1DB1  C3                    2		RET 
    4970					car	b,ax
    4971 1DB2  E8 049D R             2		CALL	NEWCARbax 
    4972					cdr	a
    4973 1DB5  E8 0208 R             2		CALL	NEWCDRa 
    4974					CAR	B,BX
    4975 1DB8  E8 1006 R             2		CALL	NEWCARBBX 
    4976					typeof	dl,bx
    4977 1DBB  8B FB                 1		MOV     DI,bx 
    4978 1DBD  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    4979 1DC2  74 05                 1		JZ	??00ED 
    4980 1DC4  E8 0023 R             1		CALL	EMSADDR 
    4981 1DC7  EB 04                 1		jmp	short ??00EE 
    4982 1DC9                        1	??00ED: 
    4983 1DC9  8E 06 0100 R          1		mov	ES,[NODTYP] 
    4984 1DCD                        1	??00EE: 
    4985 1DCD  26: 8A 15             1		MOV	dl,ES:[DI] 
    4986					when	SYMBOL,letva2
    4987 1DD0  80 FA 05              1		CMP	DL,SYMBOL 
    4988 1DD3  75 03                 2		JNZ	$+5 
    4989 1DD5  EB 1C 90              2		JMP	letva2 
    4990 1DD8  90                    2		nop 
    4991					when	FSYMBO,letva2
    4992 1DD9  80 FA 06              1		CMP	DL,FSYMBO 
    4993 1DDC  75 03                 2		JNZ	$+5 
    4994 1DDE  EB 13 90              2		JMP	letva2 
    4995 1DE1  90                    2		nop 
    4996					lisp$error 'BAD LET = '
    4997 1F3C                        1		dataseg segment 
    4998 1F3C  42 41 44 20 4C 45     1		   db 'BAD LET = ',0 
    4999 1F47                        1		dataseg ends 
    5000 1DE2  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    5001 1DE8  BB 1F3C R             1		MOV	BX,OFFSET tempaddr 
    5002 1DEB  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    5003 1DEF  E8 4044 R             1		call	ERHE 
    5004 1DF2  C3                    1		ret 
    5005				
    5006				
    5007 1DF3  53			letva2:	PUSH	BX
    5008 1DF4  E8 1DAC R			CALL	LETVAR
    5009 1DF7  93				XCHG	BX,AX
    5010 1DF8  58				POP	AX
    5011 1DF9  E9 05AE R			jmp	CONS
    5012				
    5013				lisp$subru 'let-functions',Cletfun,ARG
    5014 1F47                        1	dataseg segment 
    5015 1F47  1F22 R                1		DW NXTSBR 
    5016 1F49  1DFC R                1		dw CODEADDR 
    5017 1F4B  1E0E R                1		dw Cletfun 
    5018 1F4D  6C 65 74 2D 66 75     1	  	DB 'let-functions',0 
    5019 1F5B                        1	dataseg ends 
    5020 1DFC  E8 0E53 R             1		CALL	ARG 
    5021 1DFF  50				push	ax
    5022 1E00  E8 1E73 R			call	letquot
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-94


    5023 1E03  8B EC				mov	bp,sp
    5024 1E05  87 46 00				xchg	AX,[bp]
    5025 1E08  E8 1DAC R			CALL	LETVAR
    5026 1E0B  E9 2067 R			jmp	let_f_jamat
    5027				
    5028 1E0E				cletFUN:
    5029					CAR$CDR	A,B,BX
    5030 1E0E  E8 0DCB R             3		CALL	NEWCARABX 
    5031 1E11  E8 022A R             3		CALL	NEWCDRB 
    5032 1E14  53				PUSH	BX
    5033 1E15  50				PUSH	AX
    5034 1E16  E8 1DAC R			CALL	LETVAR
    5035 1E19  50				push	ax
    5036 1E1A  E8 23C7 R			call	pusvars
    5037 1E1D  58				pop	ax
    5038 1E1E  50				push	ax
    5039 1E1F  E8 1D79 R			CALL	SAVEVAR
    5040 1E22  5B				pop	bx
    5041 1E23  58				POP	AX
    5042 1E24  53				push	bx
    5043 1E25  E8 1E44 R			call	letcomp
    5044 1E28  58				pop	ax
    5045 1E29  5B				pop	bx
    5046 1E2A  50				push	ax
    5047					frame	cletfu2
    5048 1E2B  BF 1E3D R             1		mov	di,offset cletfu2 
    5049 1E2E  57                    1		push	DI 
    5050 1E2F  FF 36 1894 R          1		PUSH	[STACKMARK] 
    5051 1E33  89 26 1894 R          1		MOV	[STACKMARK],SP 
    5052 1E37  E8 1F06 R			CALL	compblock
    5053 1E3A  E9 2080 R			jmp	framexit
    5054 1E3D				cletfu2:
    5055 1E3D  E8 1D90 R			call	RSTOVAR
    5056 1E40  58				pop	ax
    5057 1E41  E9 23DA R			jmp	popvars
    5058				
    5059 1E44				LETCOMP:
    5060					R$NIL	AX
    5061 1E44  3D 0000               1		CMP	AX,0 
    5062 1E47  75 01                 2		JNZ	$+3 
    5063 1E49  C3                    2		RET 
    5064					CAR$CDR	A,B,AX
    5065 1E4A  E8 02EB R             3		CALL	NEWCARAAX 
    5066 1E4D  E8 022A R             3		CALL	NEWCDRB 
    5067 1E50  53				PUSH	BX
    5068					car$cdr	a,b,ax
    5069 1E51  E8 02EB R             3		CALL	NEWCARaax 
    5070 1E54  E8 022A R             3		CALL	NEWCDRb 
    5071 1E57  50				push	ax
    5072					CAR	b,bX
    5073 1E58  E8 1006 R             2		CALL	NEWCARbbX 
    5074 1E5B  53				push	bx
    5075 1E5C  E8 1048 R			call	sett
    5076 1E5F  58				pop	ax
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-95


    5077 1E60  E8 34C3 R			CALL	cfunC1
    5078 1E63  8B D8				mov	bx,ax
    5079 1E65  58				pop	ax
    5080 1E66  50				push	ax
    5081 1E67  53				push	bx
    5082 1E68  E8 1048 R			call	sett
    5083 1E6B  5B				pop	bx
    5084 1E6C  58				pop	ax
    5085 1E6D  E8 1035 R			call	ccsetq
    5086 1E70  58				pop	ax
    5087 1E71  EB D1				jmp	LETCOMP
    5088				
    5089				
    5090 1E73				LETQUOT:
    5091					R$NIL	AX
    5092 1E73  3D 0000               1		CMP	AX,0 
    5093 1E76  75 01                 2		JNZ	$+3 
    5094 1E78  C3                    2		RET 
    5095					CAR$CDR	A,B,AX
    5096 1E79  E8 02EB R             3		CALL	NEWCARAAX 
    5097 1E7C  E8 022A R             3		CALL	NEWCDRB 
    5098 1E7F  53				PUSH	BX
    5099					CDR	A,AX
    5100 1E80  E8 08AB R             2		CALL	NEWCDRAAX 
    5101					CAR	A,AX
    5102 1E83  E8 02EB R             2		CALL	NEWCARAAX 
    5103 1E86  8B EC				mov	bp,sp
    5104 1E88  87 46 00				xchg	AX,[bp]
    5105 1E8B  E8 1E73 R			CALL	LETQUOT
    5106 1E8E  5B				POP	BX
    5107 1E8F  93				XCHG	BX,AX
    5108 1E90  E9 05AE R			jmp	CONS
    5109				
    5110				LISP$SUBRU 'progn',CompPROGN
    5111 1F5B                        1	dataseg segment 
    5112 1F5B  1F47 R                1		DW NXTSBR 
    5113 1F5D  1E93 R                1		dw CODEADDR 
    5114 1F5F  1F25 R                1		dw CompPROGN 
    5115 1F61  70 72 6F 67 6E 00     1	  	DB 'progn',0 
    5116 1F67                        1	dataseg ends 
    5117 1E93  A1 0110 R		PROGN:	MOV	AX,[ARGSTA]
    5118					CAR	B,AX
    5119 1E96  E8 049D R             2		CALL	NEWCARBAX 
    5120 1E99  33 C0				xor	ax,ax
    5121 1E9B				PROGN2:
    5122					R$NIL	BX
    5123 1E9B  83 FB 00              1		CMP	BX,0 
    5124 1E9E  75 01                 2		JNZ	$+3 
    5125 1EA0  C3                    2		RET 
    5126					typeof	dl,bX
    5127 1EA1  8B FB                 1		MOV     DI,bX 
    5128 1EA3  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    5129 1EA8  74 05                 1		JZ	??00EF 
    5130 1EAA  E8 0023 R             1		CALL	EMSADDR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-96


    5131 1EAD  EB 04                 1		jmp	short ??00F0 
    5132 1EAF                        1	??00EF: 
    5133 1EAF  8E 06 0100 R          1		mov	ES,[NODTYP] 
    5134 1EB3                        1	??00F0: 
    5135 1EB3  26: 8A 15             1		MOV	dl,ES:[DI] 
    5136 1EB6  80 FA 0F				Cmp	dl,LIST
    5137					jmpn	Z,eval	
    5138 1EB9  74 03                 1		JZ	$+5 
    5139 1EBB  E9 0CA5 R             1		JMP	eval 
    5140 1EBE  90                    1		nop 
    5141					car	a
    5142 1EBF  E8 024B R             2		CALL	NEWCARa 
    5143					cdr	b
    5144 1EC2  E8 022A R             2		CALL	NEWCDRb 
    5145 1EC5  53				PUSH	BX
    5146 1EC6  E8 0CA5 R			CALL	EVAL
    5147 1EC9  5B				POP	BX
    5148 1ECA  EB CF				jmp	PROGN2
    5149 1ECC  93			LPROGN:	XCHG	BX,AX
    5150 1ECD  33 C0				xor	ax,ax
    5151 1ECF  EB CA				jmp	PROGN2
    5152				
    5153 1ED1				cframe:
    5154 1ED1  E8 3A2F R			call	cconst
    5155 1ED4  E8 382F R			call	push_AX
    5156 1ED7				cframe1:
    5157					compil	0,<PUSH [STACKMARK]>,'PUSH [STACKMARK]'
    5158 1F67                        1	DATASEG	SEGMENT 
    5159 1F67  50 55 53 48 20 5B     1		DB 'PUSH [STACKMARK]',0 
    5160 1F78                        1	DATASEG ENDS 
    5161 1ED7  51                    1		push	cx 
    5162 1ED8  53                    1		PUSH	BX 
    5163 1ED9  B9 0004               1		MOV	CX,offset (??00F2-??00F1) 
    5164 1EDC  BE 1EEA R             1		mov	si,offset ??00F1 
    5165 1EDF  BB 1F67 R             1		MOV	BX,offset STRA 
    5166 1EE2  E8 34DE R             1		call	maccod 
    5167 1EE5  5B                    1		POP	BX 
    5168 1EE6  59                    1		pop	cx 
    5169 1EE7  EB 05 90              1		jmp	??00F2 
    5170 1EEA  FF 36 1894 R          1	??00F1:	PUSH [STACKMARK] 
    5171 1EEE                        1	??00F2: 
    5172					compil	0,<MOV[STACKMARK],SP>,'MOV  [STACKMARK],SP'
    5173 1F78                        1	DATASEG	SEGMENT 
    5174 1F78  4D 4F 56 20 20 5B     1		DB 'MOV  [STACKMARK],SP',0 
    5175 1F8C                        1	DATASEG ENDS 
    5176 1EEE  51                    1		push	cx 
    5177 1EEF  53                    1		PUSH	BX 
    5178 1EF0  B9 0004               1		MOV	CX,offset (??00F4-??00F3) 
    5179 1EF3  BE 1F01 R             1		mov	si,offset ??00F3 
    5180 1EF6  BB 1F78 R             1		MOV	BX,offset STRA 
    5181 1EF9  E8 34DE R             1		call	maccod 
    5182 1EFC  5B                    1		POP	BX 
    5183 1EFD  59                    1		pop	cx 
    5184 1EFE  EB 05 90              1		jmp	??00F4 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-97


    5185 1F01  89 26 1894 R          1	??00F3:	MOV[STACKMARK],SP 
    5186 1F05                        1	??00F4: 
    5187 1F05  C3				ret
    5188				
    5189 1F06				COMPBLOCK:
    5190 1F06  E8 34A2 R			call	spaceforjump
    5191 1F09  51				push	CX
    5192 1F0A  53				PUSH	BX
    5193 1F0B  E8 1ED7 R			call	cframe1
    5194 1F0E  5B				POP	BX
    5195 1F0F  E8 1F25 R			CALL	compprogn
    5196 1F12  B8 2080 R			mov	ax,offset framexit
    5197 1F15  E8 3632 R			call	cjmp
    5198 1F18				callabove:
    5199 1F18  59				pop	cx
    5200 1F19  51				push	cx
    5201 1F1A  E8 36D8 R			call	jmpfrcxhere
    5202 1F1D  58				pop	ax
    5203 1F1E  05 0003				ADD	AX,3
    5204 1F21  E8 35FD R			CALL	CCALL
    5205 1F24  C3				RET
    5206				
    5207 1F25				COMPPROGN:
    5208 1F25  33 C0				xor	ax,ax
    5209					j$nil	bx,ncompi
    5210 1F27  83 FB 00              1		CMP	bx,0 
    5211 1F2A  75 03                 2		JnZ	$+5 
    5212 1F2C  E9 3844 R             2		JMP	ncompi 
    5213 1F2F  90                    2		nop 
    5214 1F30				COMPPROG2:
    5215					R$NIL	BX
    5216 1F30  83 FB 00              1		CMP	BX,0 
    5217 1F33  75 01                 2		JNZ	$+3 
    5218 1F35  C3                    2		RET 
    5219					j$atom	bx,ncompi
    5220 1F36  81 FB 0300            1		CMP	bx,FSTNODE 
    5221 1F3A  73 03                 2		JNC	$+5 
    5222 1F3C  E9 3844 R             2		JMP	ncompi 
    5223 1F3F  90                    2		nop 
    5224 1F40  8B FB                 2		MOV     DI,bx 
    5225 1F42  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    5226 1F47  74 05                 2		JZ	??00F5 
    5227 1F49  E8 0023 R             2		CALL	EMSADDR 
    5228 1F4C  EB 04                 2		jmp	short ??00F6 
    5229 1F4E                        2	??00F5: 
    5230 1F4E  8E 06 0100 R          2		mov	ES,[NODTYP] 
    5231 1F52                        2	??00F6: 
    5232 1F52  26: 8A 15             2		MOV	DL,ES:[DI] 
    5233 1F55  80 FA 0F              1		CMP	DL,LIST 
    5234 1F58  74 03                 2		JZ	$+5 
    5235 1F5A  E9 3844 R             2		JMP	ncompi 
    5236 1F5D  90                    2		nop 
    5237					car	a,bx
    5238 1F5E  E8 0DCB R             2		CALL	NEWCARabx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-98


    5239					cdr	b
    5240 1F61  E8 022A R             2		CALL	NEWCDRb 
    5241 1F64  53				PUSH	BX
    5242 1F65  E8 3844 R			CALL	NCOMPI
    5243 1F68  5B				POP	BX
    5244 1F69  EB C5				jmp	COMPPROG2
    5245				
    5246				lisp$subru 'prog1',cprog1
    5247 1F8C                        1	dataseg segment 
    5248 1F8C  1F5B R                1		DW NXTSBR 
    5249 1F8E  1F6B R                1		dw CODEADDR 
    5250 1F90  1F74 R                1		dw cprog1 
    5251 1F92  70 72 6F 67 31 00     1	  	DB 'prog1',0 
    5252 1F98                        1	dataseg ends 
    5253 1F6B  E8 0EC7 R			call	evalarg
    5254 1F6E  50				push	ax
    5255 1F6F  E8 1E93 R			call	progn
    5256 1F72  58				pop	ax
    5257 1F73  C3				ret
    5258				
    5259 1F74				cprog1:	car$cdr	a,b,bx
    5260 1F74  E8 0DCB R             3		CALL	NEWCARabx 
    5261 1F77  E8 022A R             3		CALL	NEWCDRb 
    5262 1F7A  53				push	bx
    5263 1F7B  E8 380E R			call	stackarg
    5264 1F7E  5B				pop	bx
    5265 1F7F  E8 1F25 R			call	compprogn
    5266 1F82  E8 3BAF R			call	POP_AX
    5267 1F85  C3				RET
    5268				
    5269				LISP$SUBRU 'fsymbols',cnoarg
    5270 1F98                        1	dataseg segment 
    5271 1F98  1F8C R                1		DW NXTSBR 
    5272 1F9A  1F86 R                1		dw CODEADDR 
    5273 1F9C  3B6F R                1		dw cnoarg 
    5274 1F9E  66 73 79 6D 62 6F     1	  	DB 'fsymbols',0 
    5275 1FA7                        1	dataseg ends 
    5276 1F86  A1 010C R			mov	ax,oblist
    5277 1F89				fsyms1:	R$NIL	AX
    5278 1F89  3D 0000               1		CMP	AX,0 
    5279 1F8C  75 01                 2		JNZ	$+3 
    5280 1F8E  C3                    2		RET 
    5281					car$cdr	b,a,ax
    5282 1F8F  E8 049D R             3		CALL	NEWCARbax 
    5283 1F92  E8 0208 R             3		CALL	NEWCDRa 
    5284					typeof	dl,bx
    5285 1F95  8B FB                 1		MOV     DI,bx 
    5286 1F97  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    5287 1F9C  74 05                 1		JZ	??00F7 
    5288 1F9E  E8 0023 R             1		CALL	EMSADDR 
    5289 1FA1  EB 04                 1		jmp	short ??00F8 
    5290 1FA3                        1	??00F7: 
    5291 1FA3  8E 06 0100 R          1		mov	ES,[NODTYP] 
    5292 1FA7                        1	??00F8: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-99


    5293 1FA7  26: 8A 15             1		MOV	dl,ES:[DI] 
    5294					when	fsymbo,fsyms2
    5295 1FAA  80 FA 06              1		CMP	DL,fsymbo 
    5296 1FAD  75 03                 2		JNZ	$+5 
    5297 1FAF  EB 04 90              2		JMP	fsyms2 
    5298 1FB2  90                    2		nop 
    5299 1FB3  EB D4				jmp	fsyms1
    5300 1FB5  53			fsyms2:	push	bx
    5301 1FB6  E8 1F89 R			call	fsyms1
    5302 1FB9  5B				pop	bx
    5303 1FBA  93				xchg	ax,bx
    5304 1FBB  E9 05AE R			jmp	cons
    5305				
    5306				LISP$SUBRU 'progv',cantcomp,EVALARG
    5307 1FA7                        1	dataseg segment 
    5308 1FA7  1F98 R                1		DW NXTSBR 
    5309 1FA9  1FBE R                1		dw CODEADDR 
    5310 1FAB  3B6A R                1		dw cantcomp 
    5311 1FAD  70 72 6F 67 76 00     1	  	DB 'progv',0 
    5312 1FB3                        1	dataseg ends 
    5313 1FBE  E8 0EC7 R             1		CALL	EVALARG 
    5314 1FC1  EB 04 90				jmp	PROG
    5315				
    5316				LISP$SUBRU 'prog',CPROG,ARG	
    5317 1FB3                        1	dataseg segment 
    5318 1FB3  1FA7 R                1		DW NXTSBR 
    5319 1FB5  1FC4 R                1		dw CODEADDR 
    5320 1FB7  1FDC R                1		dw CPROG 
    5321 1FB9  70 72 6F 67 00        1	  	DB 'prog',0 
    5322 1FBE                        1	dataseg ends 
    5323 1FC4  E8 0E53 R             1		CALL	ARG 
    5324 1FC7  E8 1D79 R		PROG:	CALL	SAVEVAR
    5325					FRAME	RSTOVAR
    5326 1FCA  BF 1D90 R             1		mov	di,offset RSTOVAR 
    5327 1FCD  57                    1		push	DI 
    5328 1FCE  FF 36 1894 R          1		PUSH	[STACKMARK] 
    5329 1FD2  89 26 1894 R          1		MOV	[STACKMARK],SP 
    5330 1FD6  E8 1E93 R			CALL	PROGN ; rapaaa
    5331 1FD9  E9 2080 R			jmp	framexit
    5332				
    5333 1FDC  53			Cprog:	PUSH	BX
    5334					COcall	SAVEVAR,'SAVEVAR'
    5335 1FDD  B8 1D79 R             1		mov	ax,offset SAVEVAR 
    5336 1FE0  E8 35FD R             1		call	ccall 
    5337 1FE3  8A 16 2CFE R          1		mov	dl,[codebug] 
    5338 1FE7  80 FA 00              1		cmp	dl,0 
    5339 1FEA  74 10                 1		jz	??00F9 
    5340 1FBE                        2	dataseg segment 
    5341 1FBE  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5342 1FC7                        2	dataseg ends 
    5343 1FEC  53                    2		push	bx 
    5344 1FED  BB 1FBE R             2		mov	bx,offset tempaddr 
    5345 1FF0  E8 018C R             2		CALL	PRINTS 
    5346 1FF3  5B                    2		pop	bx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-100


    5347 1FC7                        2	dataseg segment 
    5348 1FC7  53 41 56 45 56 41     2		DB 'SAVEVAR',0 
    5349 1FCF                        2	dataseg ends 
    5350 1FF4  53                    2		push	bx 
    5351 1FF5  BB 1FC7 R             2		mov	bx,offset tempaddr 
    5352 1FF8  E8 018C R             2		CALL	PRINTS 
    5353 1FFB  5B                    2		pop	bx 
    5354 1FFC                        1	??00F9: 
    5355 1FFC  5B				POP	BX
    5356 1FFD  E8 1F06 R			CALL	COMPBLOCK
    5357					COcall	RSTOVAR,'RSTOVAR'
    5358 2000  B8 1D90 R             1		mov	ax,offset RSTOVAR 
    5359 2003  E8 35FD R             1		call	ccall 
    5360 2006  8A 16 2CFE R          1		mov	dl,[codebug] 
    5361 200A  80 FA 00              1		cmp	dl,0 
    5362 200D  74 10                 1		jz	??00FA 
    5363 1FCF                        2	dataseg segment 
    5364 1FCF  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5365 1FD8                        2	dataseg ends 
    5366 200F  53                    2		push	bx 
    5367 2010  BB 1FCF R             2		mov	bx,offset tempaddr 
    5368 2013  E8 018C R             2		CALL	PRINTS 
    5369 2016  5B                    2		pop	bx 
    5370 1FD8                        2	dataseg segment 
    5371 1FD8  52 53 54 4F 56 41     2		DB 'RSTOVAR',0 
    5372 1FE0                        2	dataseg ends 
    5373 2017  53                    2		push	bx 
    5374 2018  BB 1FD8 R             2		mov	bx,offset tempaddr 
    5375 201B  E8 018C R             2		CALL	PRINTS 
    5376 201E  5B                    2		pop	bx 
    5377 201F                        1	??00FA: 
    5378 201F  C3				RET
    5379				
    5380				LISP$SUBRU  'mlambda',cantcomp
    5381 1FE0                        1	dataseg segment 
    5382 1FE0  1FB3 R                1		DW NXTSBR 
    5383 1FE2  2020 R                1		dw CODEADDR 
    5384 1FE4  3B6A R                1		dw cantcomp 
    5385 1FE6  6D 6C 61 6D 62 64     1	  	DB 'mlambda',0 
    5386 1FEE                        1	dataseg ends 
    5387 2020  E8 205A R			CALL	NLAMBA
    5388 2023  EB 04 90				jmp	MLAMBA
    5389				LISP$SUBRU 'macro',cantcomp
    5390 1FEE                        1	dataseg segment 
    5391 1FEE  1FE0 R                1		DW NXTSBR 
    5392 1FF0  2026 R                1		dw CODEADDR 
    5393 1FF2  3B6A R                1		dw cantcomp 
    5394 1FF4  6D 61 63 72 6F 00     1	  	DB 'macro',0 
    5395 1FFA                        1	dataseg ends 
    5396 2026  E8 2051 R			CALL	NSL
    5397 2029  8B 1E 0110 R		MLAMBA:	MOV	BX,[ARGSTA]
    5398 202D  53				PUSH	BX
    5399					frame	rstoargs
    5400 202E  BF 204A R             1		mov	di,offset rstoargs 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-101


    5401 2031  57                    1		push	DI 
    5402 2032  FF 36 1894 R          1		PUSH	[STACKMARK] 
    5403 2036  89 26 1894 R          1		MOV	[STACKMARK],SP 
    5404					CDR	B,BX
    5405 203A  E8 0D5F R             2		CALL	NEWCDRBBX 
    5406					CDR	B,BX
    5407 203D  E8 0D5F R             2		CALL	NEWCDRBBX 
    5408 2040  89 1E 0110 R			MOV	[ARGSTA],BX
    5409 2044  E8 0CA5 R			CALL	EVAL
    5410 2047  EB 37 90				jmp	framexit
    5411				
    5412 204A  8F 06 0110 R		rstoargs:POP	[ARGSTA]
    5413 204E  E9 1DA7 R			jmp	frame_ret
    5414				
    5415				LISP$SUBRU 'nslambda',cantcomp
    5416 1FFA                        1	dataseg segment 
    5417 1FFA  1FEE R                1		DW NXTSBR 
    5418 1FFC  2051 R                1		dw CODEADDR 
    5419 1FFE  3B6A R                1		dw cantcomp 
    5420 2000  6E 73 6C 61 6D 62     1	  	DB 'nslambda',0 
    5421 2009                        1	dataseg ends 
    5422 2051  A1 0110 R		  NSL:	MOV	AX,[ARGSTA]
    5423					CDR	A,AX
    5424 2054  E8 08AB R             2		CALL	NEWCDRAAX 
    5425 2057  EB 0A 90				jmp	AMBDA
    5426				
    5427				LISP$SUBRU 'nlambda',cantcomp
    5428 2009                        1	dataseg segment 
    5429 2009  1FFA R                1		DW NXTSBR 
    5430 200B  205A R                1		dw CODEADDR 
    5431 200D  3B6A R                1		dw cantcomp 
    5432 200F  6E 6C 61 6D 62 64     1	  	DB 'nlambda',0 
    5433 2017                        1	dataseg ends 
    5434 205A  A1 0110 R		NLAMBA:	MOV	AX,[ARGSTA]
    5435					CDR	A,AX
    5436 205D  E8 08AB R             2		CALL	NEWCDRAAX 
    5437					CAR	A,AX
    5438 2060  E8 02EB R             2		CALL	NEWCARAAX 
    5439 2063  50			AMBDA:	PUSH	AX	; new
    5440 2064  E8 0E53 R			CALL	ARG
    5441 2067				let_f_jamat:
    5442 2067  E8 1D79 R			CALL	SAVEVAR
    5443 206A  5B				POP	BX
    5444 206B  E8 1C85 R			CALL	SETSET	; set new
    5445					frame	rstovar
    5446 206E  BF 1D90 R             1		mov	di,offset rstovar 
    5447 2071  57                    1		push	DI 
    5448 2072  FF 36 1894 R          1		PUSH	[STACKMARK] 
    5449 2076  89 26 1894 R          1		MOV	[STACKMARK],SP 
    5450 207A  E8 1E93 R			call	progn
    5451 207D  EB 01 90				jmp	framexit
    5452				
    5453 2080				framexit:
    5454 2080  8B 26 1894 R			MOV	SP,[STACKMARK]
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-102


    5455 2084  8F 06 1894 R			POP  	[STACKMARK]
    5456 2088  C3				RET
    5457				
    5458				
    5459				lisp$subru 'catch',ccatch
    5460 2017                        1	dataseg segment 
    5461 2017  2009 R                1		DW NXTSBR 
    5462 2019  2089 R                1		dw CODEADDR 
    5463 201B  209E R                1		dw ccatch 
    5464 201D  63 61 74 63 68 00     1	  	DB 'catch',0 
    5465 2023                        1	dataseg ends 
    5466 2089  E8 0EC7 R			call	evalarg
    5467 208C  50				push	ax
    5468					frame	catchexit
    5469 208D  BF 20C5 R             1		mov	di,offset catchexit 
    5470 2090  57                    1		push	DI 
    5471 2091  FF 36 1894 R          1		PUSH	[STACKMARK] 
    5472 2095  89 26 1894 R          1		MOV	[STACKMARK],SP 
    5473 2099  E8 0EC7 R			call	evalarg
    5474 209C  EB E2				jmp	framexit
    5475 209E  E8 34A2 R		ccatch:	call	spaceforjump
    5476 20A1  51				push	cx
    5477					car$cdr	a,b,bx
    5478 20A2  E8 0DCB R             3		CALL	NEWCARabx 
    5479 20A5  E8 022A R             3		CALL	NEWCDRb 
    5480 20A8  53				push	bx
    5481 20A9  E8 3844 R			call	ncompi
    5482 20AC  E8 382F R			call	push_AX
    5483 20AF  B8 20C5 R			mov	ax,offset catchexit
    5484 20B2  E8 1ED1 R			call	cframe
    5485 20B5  58				POP	AX
    5486 20B6  E8 25C4 R			call	scar
    5487 20B9  E8 3844 R			call	ncompi
    5488 20BC  B8 2080 R			mov	ax,offset framexit
    5489 20BF  E8 3632 R			call	cjmp
    5490 20C2  E9 1F18 R			jmp	callabove
    5491					
    5492 20C5				catchexit:
    5493 20C5  59				POP	cx
    5494 20C6  3B 0E 1896 R			cmp	cx,[throwtag]
    5495 20CA  74 01				jz	catch_end
    5496 20CC  C3				ret
    5497 20CD				catch_end:
    5498 20CD  2E: C6 06 1DA7 R C3		MOV	BYTE PTR CS:[FRAME_RET],0C3H ; RET
    5499 20D3  C3				ret
    5500					
    5501				lisp$subru 'throw',ctwoarg,twoarg
    5502 2023                        1	dataseg segment 
    5503 2023  2017 R                1		DW NXTSBR 
    5504 2025  20D4 R                1		dw CODEADDR 
    5505 2027  3B94 R                1		dw ctwoarg 
    5506 2029  74 68 72 6F 77 00     1	  	DB 'throw',0 
    5507 202F                        1	dataseg ends 
    5508 20D4  E8 0ED9 R             1		CALL	twoarg 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-103


    5509 20D7  A3 1896 R			mov	[throwtag],ax
    5510 20DA  8B C3				mov	ax,bx
    5511 20DC  2E: C6 06 1DA7 R 90		MOV	BYTE PTR CS:[FRAME_RET],90H ; NOP
    5512 20E2  BB 202F R			mov	bx,offset throw$err
    5513 20E5  89 1E 18B5 R			mov	[erheen_syy],bx
    5514 20E9  EB 95				jmp	framexit
    5515				
    5516 202F				dataseg segment
    5517 202F  4E 4F 20 43 41 54	     throw$err db 'NO CATCH FOR THROW ',0
    5518       43 48 20 46 4F 52	
    5519       20 54 48 52 4F 57	
    5520       20 00			
    5521 2043				dataseg ends
    5522				
    5523 20EB  3D 0000			idlist:	cmp	ax,nil
    5524					rz
    5525 20EE  75 01                 1		JNZ	$+3 
    5526 20F0  C3                    1		RET 
    5527					typeof	dl,ax
    5528 20F1  8B F8                 1		MOV     DI,ax 
    5529 20F3  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    5530 20F8  74 05                 1		JZ	??00FB 
    5531 20FA  E8 0023 R             1		CALL	EMSADDR 
    5532 20FD  EB 04                 1		jmp	short ??00FC 
    5533 20FF                        1	??00FB: 
    5534 20FF  8E 06 0100 R          1		mov	ES,[NODTYP] 
    5535 2103                        1	??00FC: 
    5536 2103  26: 8A 15             1		MOV	dl,ES:[DI] 
    5537 2106  80 FA 0F				cmp	dl,list
    5538					rnz
    5539 2109  74 01                 1		JZ	$+3 
    5540 210B  C3                    1		RET 
    5541					car$cdr	a,b,ax
    5542 210C  E8 02EB R             3		CALL	NEWCARaax 
    5543 210F  E8 022A R             3		CALL	NEWCDRb 
    5544					typeof	dl,ax
    5545 2112  8B F8                 1		MOV     DI,ax 
    5546 2114  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    5547 2119  74 05                 1		JZ	??00FD 
    5548 211B  E8 0023 R             1		CALL	EMSADDR 
    5549 211E  EB 04                 1		jmp	short ??00FE 
    5550 2120                        1	??00FD: 
    5551 2120  8E 06 0100 R          1		mov	ES,[NODTYP] 
    5552 2124                        1	??00FE: 
    5553 2124  26: 8A 15             1		MOV	dl,ES:[DI] 
    5554 2127  80 FA 06				cmp	dl,fsymbo
    5555 212A  74 09				jz	idlis2
    5556 212C  80 FA 05				cmp	dl,symbol
    5557					rnz
    5558 212F  74 01                 1		JZ	$+3 
    5559 2131  C3                    1		RET 
    5560 2132  E8 330A R			call	makefsym
    5561 2135  8B C3			idlis2:	mov	ax,bx
    5562 2137  EB B2				jmp	idlist
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-104


    5563				
    5564				LISP$SUBRU 'lambda',clambda
    5565 2043                        1	dataseg segment 
    5566 2043  2023 R                1		DW NXTSBR 
    5567 2045  2139 R                1		dw CODEADDR 
    5568 2047  2148 R                1		dw clambda 
    5569 2049  6C 61 6D 62 64 61     1	  	DB 'lambda',0 
    5570 2050                        1	dataseg ends 
    5571 2139  A1 0110 R			MOV	AX,[ARGSTA]
    5572					CDR	A,AX
    5573 213C  E8 08AB R             2		CALL	NEWCDRAAX 
    5574					CAR	A,AX
    5575 213F  E8 02EB R             2		CALL	NEWCARAAX 
    5576 2142  E8 1327 R			CALL	ALIST
    5577 2145  E9 2063 R			jmp	AMBDA
    5578 2148				clambda:	
    5579					car$cdr	a,b,bx
    5580 2148  E8 0DCB R             3		CALL	NEWCARabx 
    5581 214B  E8 022A R             3		CALL	NEWCDRb 
    5582					j$nil	ax,compblock
    5583 214E  3D 0000               1		CMP	ax,0 
    5584 2151  75 03                 2		JnZ	$+5 
    5585 2153  E9 1F06 R             2		JMP	compblock 
    5586 2156  90                    2		nop 
    5587 2157  53				push	bx
    5588 2158  50				push	ax
    5589 2159  E8 1D79 R			call	savevar
    5590 215C  BB 0000				mov	bx,nil
    5591 215F  E8 1C85 R			call	setset
    5592 2162  58				pop	ax
    5593 2163  5B				pop	bx
    5594					frame	RSTOVAR
    5595 2164  BF 1D90 R             1		mov	di,offset RSTOVAR 
    5596 2167  57                    1		push	DI 
    5597 2168  FF 36 1894 R          1		PUSH	[STACKMARK] 
    5598 216C  89 26 1894 R          1		MOV	[STACKMARK],SP 
    5599 2170  E8 2176 R			call	clambda2
    5600 2173  E9 2080 R			jmp	framexit
    5601				
    5602 2176				clambda2:
    5603 2176  53				push	bx
    5604 2177  50				push	ax
    5605 2178  E8 20EB R			call	idlist
    5606					jmpn	z,lamarn
    5607 217B  74 03                 1		Jz	$+5 
    5608 217D  E9 22C0 R             1		JMP	lamarn 
    5609 2180  90                    1		nop 
    5610 2181  58				pop	ax
    5611 2182  50				push	ax
    5612					CDR	A,AX
    5613 2183  E8 08AB R             2		CALL	NEWCDRAAX 
    5614					J$nil	AX,LAMAR1
    5615 2186  3D 0000               1		CMP	AX,0 
    5616 2189  75 03                 2		JnZ	$+5 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-105


    5617 218B  EB 3D 90              2		JMP	LAMAR1 
    5618 218E  90                    2		nop 
    5619					CDR	A,AX
    5620 218F  E8 08AB R             2		CALL	NEWCDRAAX 
    5621					J$NIL	AX,LAMAR2
    5622 2192  3D 0000               1		CMP	AX,0 
    5623 2195  75 03                 2		JnZ	$+5 
    5624 2197  EB 65 90              2		JMP	LAMAR2 
    5625 219A  90                    2		nop 
    5626					CDR	A,AX
    5627 219B  E8 08AB R             2		CALL	NEWCDRAAX 
    5628					J$NIL	AX,LAMAR3
    5629 219E  3D 0000               1		CMP	AX,0 
    5630 21A1  75 03                 2		JnZ	$+5 
    5631 21A3  E9 2238 R             2		JMP	LAMAR3 
    5632 21A6  90                    2		nop 
    5633					CDR	a,AX
    5634 21A7  E8 08AB R             2		CALL	NEWCDRaAX 
    5635					J$NIL	AX,LAMAR4
    5636 21AA  3D 0000               1		CMP	AX,0 
    5637 21AD  75 03                 2		JnZ	$+5 
    5638 21AF  E9 2279 R             2		JMP	LAMAR4 
    5639 21B2  90                    2		nop 
    5640 21B3  E9 22C0 R			JMP	LAMARN
    5641				
    5642 21B6				PPUSV:	CAR$CDR	A,B,BX
    5643 21B6  E8 0DCB R             3		CALL	NEWCARABX 
    5644 21B9  E8 022A R             3		CALL	NEWCDRB 
    5645					car	a,ax
    5646 21BC  E8 02EB R             2		CALL	NEWCARaax 
    5647 21BF  C3				ret
    5648				
    5649 21C0				lamrest:
    5650 21C0  58				POP	AX
    5651 21C1  5B				POP	BX
    5652 21C2  50				PUSH	AX
    5653 21C3  E8 1F06 R			CALL	COMPBLOCK
    5654 21C6  58				POP	AX
    5655 21C7  E9 23DA R			JMP	POPVARS
    5656					
    5657 21CA				LAMAR1:	cocall	onearg,'ONEARG'
    5658 21CA  B8 0ECD R             1		mov	ax,offset onearg 
    5659 21CD  E8 35FD R             1		call	ccall 
    5660 21D0  8A 16 2CFE R          1		mov	dl,[codebug] 
    5661 21D4  80 FA 00              1		cmp	dl,0 
    5662 21D7  74 10                 1		jz	??00FF 
    5663 2050                        2	dataseg segment 
    5664 2050  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5665 2059                        2	dataseg ends 
    5666 21D9  53                    2		push	bx 
    5667 21DA  BB 2050 R             2		mov	bx,offset tempaddr 
    5668 21DD  E8 018C R             2		CALL	PRINTS 
    5669 21E0  5B                    2		pop	bx 
    5670 2059                        2	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-106


    5671 2059  4F 4E 45 41 52 47     2		DB 'ONEARG',0 
    5672 2060                        2	dataseg ends 
    5673 21E1  53                    2		push	bx 
    5674 21E2  BB 2059 R             2		mov	bx,offset tempaddr 
    5675 21E5  E8 018C R             2		CALL	PRINTS 
    5676 21E8  5B                    2		pop	bx 
    5677 21E9                        1	??00FF: 
    5678 21E9  B8 3B76 R			mov	AX,offset conearg
    5679 21EC  A3 2CF6 R			mov	[functype],AX
    5680 21EF  58				POP	ax
    5681 21F0  50				push	ax
    5682 21F1  E8 23C7 R			call	pusvars
    5683 21F4  5B				pop	bx
    5684 21F5  53				push	bx
    5685 21F6  E8 21B6 R			call	ppusv
    5686 21F9  E8 3A63 R			call	mvtoim
    5687 21FC  EB C2				jmp	lamrest
    5688				
    5689				
    5690 21FE				LAMAR2:	cocall	TWOarg,'TWOARG'
    5691 21FE  B8 0ED9 R             1		mov	ax,offset TWOarg 
    5692 2201  E8 35FD R             1		call	ccall 
    5693 2204  8A 16 2CFE R          1		mov	dl,[codebug] 
    5694 2208  80 FA 00              1		cmp	dl,0 
    5695 220B  74 10                 1		jz	??0100 
    5696 2060                        2	dataseg segment 
    5697 2060  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5698 2069                        2	dataseg ends 
    5699 220D  53                    2		push	bx 
    5700 220E  BB 2060 R             2		mov	bx,offset tempaddr 
    5701 2211  E8 018C R             2		CALL	PRINTS 
    5702 2214  5B                    2		pop	bx 
    5703 2069                        2	dataseg segment 
    5704 2069  54 57 4F 41 52 47     2		DB 'TWOARG',0 
    5705 2070                        2	dataseg ends 
    5706 2215  53                    2		push	bx 
    5707 2216  BB 2069 R             2		mov	bx,offset tempaddr 
    5708 2219  E8 018C R             2		CALL	PRINTS 
    5709 221C  5B                    2		pop	bx 
    5710 221D                        1	??0100: 
    5711 221D  B8 3B94 R			mov	AX,offset cTWOarg
    5712 2220  A3 2CF6 R			mov	[functype],AX
    5713 2223  58				POP	ax
    5714 2224  50				push	ax
    5715 2225  E8 23C7 R			call	pusvars
    5716 2228  5B				pop	bx
    5717 2229  53				push	bx
    5718 222A  E8 21B6 R			call	ppusv
    5719 222D  E8 3A63 R			call	mvtoim
    5720 2230  E8 21B6 R			call	ppusv
    5721 2233  E8 3A8E R			call	mvtbim
    5722 2236  EB 88				jmp	lamrest
    5723				
    5724 2238				LAMAR3:	cocall	TREarg,'TREARG'
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-107


    5725 2238  B8 0EE4 R             1		mov	ax,offset TREarg 
    5726 223B  E8 35FD R             1		call	ccall 
    5727 223E  8A 16 2CFE R          1		mov	dl,[codebug] 
    5728 2242  80 FA 00              1		cmp	dl,0 
    5729 2245  74 10                 1		jz	??0101 
    5730 2070                        2	dataseg segment 
    5731 2070  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5732 2079                        2	dataseg ends 
    5733 2247  53                    2		push	bx 
    5734 2248  BB 2070 R             2		mov	bx,offset tempaddr 
    5735 224B  E8 018C R             2		CALL	PRINTS 
    5736 224E  5B                    2		pop	bx 
    5737 2079                        2	dataseg segment 
    5738 2079  54 52 45 41 52 47     2		DB 'TREARG',0 
    5739 2080                        2	dataseg ends 
    5740 224F  53                    2		push	bx 
    5741 2250  BB 2079 R             2		mov	bx,offset tempaddr 
    5742 2253  E8 018C R             2		CALL	PRINTS 
    5743 2256  5B                    2		pop	bx 
    5744 2257                        1	??0101: 
    5745 2257  B8 3BC4 R			mov	AX,offset cTREarg
    5746 225A  A3 2CF6 R			mov	[functype],AX
    5747 225D  58				POP	ax
    5748 225E  50				push	ax
    5749 225F  E8 23C7 R			call	pusvars
    5750 2262  5B				pop	bx
    5751 2263  53				push	bx
    5752 2264  E8 21B6 R			call	ppusv
    5753 2267  E8 3A63 R			call	mvtoim
    5754 226A  E8 21B6 R			call	ppusv
    5755 226D  E8 3A8E R			call	mvtbim
    5756 2270  E8 21B6 R			call	ppusv
    5757 2273  E8 3ABA R			call	mvtcim
    5758 2276  E9 21C0 R			jmp	lamrest
    5759				
    5760 2279				LAMAR4:	cocall	fouarg,'fouARG'
    5761 2279  B8 0EF4 R             1		mov	ax,offset fouarg 
    5762 227C  E8 35FD R             1		call	ccall 
    5763 227F  8A 16 2CFE R          1		mov	dl,[codebug] 
    5764 2283  80 FA 00              1		cmp	dl,0 
    5765 2286  74 10                 1		jz	??0102 
    5766 2080                        2	dataseg segment 
    5767 2080  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5768 2089                        2	dataseg ends 
    5769 2288  53                    2		push	bx 
    5770 2289  BB 2080 R             2		mov	bx,offset tempaddr 
    5771 228C  E8 018C R             2		CALL	PRINTS 
    5772 228F  5B                    2		pop	bx 
    5773 2089                        2	dataseg segment 
    5774 2089  66 6F 75 41 52 47     2		DB 'fouARG',0 
    5775 2090                        2	dataseg ends 
    5776 2290  53                    2		push	bx 
    5777 2291  BB 2089 R             2		mov	bx,offset tempaddr 
    5778 2294  E8 018C R             2		CALL	PRINTS 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-108


    5779 2297  5B                    2		pop	bx 
    5780 2298                        1	??0102: 
    5781 2298  B8 3C08 R			mov	AX,offset cfouarg
    5782 229B  A3 2CF6 R			mov	[functype],AX
    5783 229E  58				POP	ax
    5784 229F  50				push	ax
    5785 22A0  E8 23C7 R			call	pusvars
    5786 22A3  5B				pop	bx
    5787 22A4  53				push	bx
    5788 22A5  E8 21B6 R			call	ppusv
    5789 22A8  E8 3A63 R			call	mvtoim
    5790 22AB  E8 21B6 R			call	ppusv
    5791 22AE  E8 3A8E R			call	mvtbim
    5792 22B1  E8 21B6 R			call	ppusv
    5793 22B4  E8 3ABA R			call	mvtcim
    5794 22B7  E8 21B6 R			call	ppusv
    5795 22BA  E8 3AE6 R			call	mvtdim
    5796 22BD  E9 21C0 R			jmp	lamrest
    5797				
    5798 22C0				LAMARN:	cocall	ARGLIST,'ARGLIST'
    5799 22C0  B8 1321 R             1		mov	ax,offset ARGLIST 
    5800 22C3  E8 35FD R             1		call	ccall 
    5801 22C6  8A 16 2CFE R          1		mov	dl,[codebug] 
    5802 22CA  80 FA 00              1		cmp	dl,0 
    5803 22CD  74 10                 1		jz	??0103 
    5804 2090                        2	dataseg segment 
    5805 2090  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5806 2099                        2	dataseg ends 
    5807 22CF  53                    2		push	bx 
    5808 22D0  BB 2090 R             2		mov	bx,offset tempaddr 
    5809 22D3  E8 018C R             2		CALL	PRINTS 
    5810 22D6  5B                    2		pop	bx 
    5811 2099                        2	dataseg segment 
    5812 2099  41 52 47 4C 49 53     2		DB 'ARGLIST',0 
    5813 20A1                        2	dataseg ends 
    5814 22D7  53                    2		push	bx 
    5815 22D8  BB 2099 R             2		mov	bx,offset tempaddr 
    5816 22DB  E8 018C R             2		CALL	PRINTS 
    5817 22DE  5B                    2		pop	bx 
    5818 22DF                        1	??0103: 
    5819 22DF  E8 382F R			call	push_AX
    5820 22E2  B8 3C49 R			mov	AX,offset carglist
    5821 22E5  A3 2CF6 R			mov	[functype],AX
    5822 22E8  58				pop	ax
    5823 22E9  E8 39E4 R			call	csex
    5824					coCALL	SAVEVAR,'SAVEVAR'
    5825 22EC  B8 1D79 R             1		mov	ax,offset SAVEVAR 
    5826 22EF  E8 35FD R             1		call	ccall 
    5827 22F2  8A 16 2CFE R          1		mov	dl,[codebug] 
    5828 22F6  80 FA 00              1		cmp	dl,0 
    5829 22F9  74 10                 1		jz	??0104 
    5830 20A1                        2	dataseg segment 
    5831 20A1  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5832 20AA                        2	dataseg ends 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-109


    5833 22FB  53                    2		push	bx 
    5834 22FC  BB 20A1 R             2		mov	bx,offset tempaddr 
    5835 22FF  E8 018C R             2		CALL	PRINTS 
    5836 2302  5B                    2		pop	bx 
    5837 20AA                        2	dataseg segment 
    5838 20AA  53 41 56 45 56 41     2		DB 'SAVEVAR',0 
    5839 20B2                        2	dataseg ends 
    5840 2303  53                    2		push	bx 
    5841 2304  BB 20AA R             2		mov	bx,offset tempaddr 
    5842 2307  E8 018C R             2		CALL	PRINTS 
    5843 230A  5B                    2		pop	bx 
    5844 230B                        1	??0104: 
    5845					compil	0,<POP	BX>,'POP  BX'
    5846 20B2                        1	DATASEG	SEGMENT 
    5847 20B2  50 4F 50 20 20 42     1		DB 'POP  BX',0 
    5848 20BA                        1	DATASEG ENDS 
    5849 230B  51                    1		push	cx 
    5850 230C  53                    1		PUSH	BX 
    5851 230D  B9 0001               1		MOV	CX,offset (??0106-??0105) 
    5852 2310  BE 231E R             1		mov	si,offset ??0105 
    5853 2313  BB 20B2 R             1		MOV	BX,offset STRA 
    5854 2316  E8 34DE R             1		call	maccod 
    5855 2319  5B                    1		POP	BX 
    5856 231A  59                    1		pop	cx 
    5857 231B  EB 02 90              1		jmp	??0106 
    5858 231E  5B                    1	??0105:	POP	BX 
    5859 231F                        1	??0106: 
    5860					coCALL	SETSET,'SETSET'
    5861 231F  B8 1C85 R             1		mov	ax,offset SETSET 
    5862 2322  E8 35FD R             1		call	ccall 
    5863 2325  8A 16 2CFE R          1		mov	dl,[codebug] 
    5864 2329  80 FA 00              1		cmp	dl,0 
    5865 232C  74 10                 1		jz	??0107 
    5866 20BA                        2	dataseg segment 
    5867 20BA  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5868 20C3                        2	dataseg ends 
    5869 232E  53                    2		push	bx 
    5870 232F  BB 20BA R             2		mov	bx,offset tempaddr 
    5871 2332  E8 018C R             2		CALL	PRINTS 
    5872 2335  5B                    2		pop	bx 
    5873 20C3                        2	dataseg segment 
    5874 20C3  53 45 54 53 45 54     2		DB 'SETSET',0 
    5875 20CA                        2	dataseg ends 
    5876 2336  53                    2		push	bx 
    5877 2337  BB 20C3 R             2		mov	bx,offset tempaddr 
    5878 233A  E8 018C R             2		CALL	PRINTS 
    5879 233D  5B                    2		pop	bx 
    5880 233E                        1	??0107: 
    5881 233E  5B				pop	bx
    5882 233F  E8 1F06 R			CALL	COMPBLOCK
    5883					COCALL	RSTOVAR,'RSTOVAR'
    5884 2342  B8 1D90 R             1		mov	ax,offset RSTOVAR 
    5885 2345  E8 35FD R             1		call	ccall 
    5886 2348  8A 16 2CFE R          1		mov	dl,[codebug] 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-110


    5887 234C  80 FA 00              1		cmp	dl,0 
    5888 234F  74 10                 1		jz	??0108 
    5889 20CA                        2	dataseg segment 
    5890 20CA  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    5891 20D3                        2	dataseg ends 
    5892 2351  53                    2		push	bx 
    5893 2352  BB 20CA R             2		mov	bx,offset tempaddr 
    5894 2355  E8 018C R             2		CALL	PRINTS 
    5895 2358  5B                    2		pop	bx 
    5896 20D3                        2	dataseg segment 
    5897 20D3  52 53 54 4F 56 41     2		DB 'RSTOVAR',0 
    5898 20DB                        2	dataseg ends 
    5899 2359  53                    2		push	bx 
    5900 235A  BB 20D3 R             2		mov	bx,offset tempaddr 
    5901 235D  E8 018C R             2		CALL	PRINTS 
    5902 2360  5B                    2		pop	bx 
    5903 2361                        1	??0108: 
    5904 2361  C3				RET
    5905				
    5906 2362  50			pusvar:	push	ax
    5907 2363  E8 330A R			call	makefsym
    5908					compil	2,<push [trace]>,'PUSH ['
    5909 20DB                        1	DATASEG	SEGMENT 
    5910 20DB  50 55 53 48 20 5B     1		DB 'PUSH [',0 
    5911 20E2                        1	DATASEG ENDS 
    5912 2366  51                    1		push	cx 
    5913 2367  53                    1		PUSH	BX 
    5914 2368  B9 0002               1		mov	cx,2 
    5915 236B  BE 2379 R             1		mov	si,offset ??0109 
    5916 236E  BB 20DB R             1		MOV	BX,offset STRA 
    5917 2371  E8 34DE R             1		call	maccod 
    5918 2374  5B                    1		POP	BX 
    5919 2375  59                    1		pop	cx 
    5920 2376  EB 05 90              1		jmp	??010A 
    5921 2379  FF 36 0114 R          1	??0109:	push [trace] 
    5922 237D                        1	??010A: 
    5923					car	a,ax
    5924 237D  E8 02EB R             2		CALL	NEWCARaax 
    5925 2380  E8 3547 R			call	cword
    5926					comptext ']'
    5927 2383  8A 16 2CFE R          1		mov	dl,[codebug] 
    5928 2387  80 FA 00              1		cmp	dl,0 
    5929 238A  74 08                 1		jz	??010B 
    5930 20E2                        2	dataseg segment 
    5931 20E2  5D 00                 2		DB ']',0 
    5932 20E4                        2	dataseg ends 
    5933 238C  53                    2		push	bx 
    5934 238D  BB 20E2 R             2		mov	bx,offset tempaddr 
    5935 2390  E8 018C R             2		CALL	PRINTS 
    5936 2393  5B                    2		pop	bx 
    5937 2394                        1	??010B: 
    5938 2394  58				pop	ax
    5939 2395  C3				ret
    5940 2396  50			popvar:	push	ax
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-111


    5941					compil	2,<POP [trace]>,'POP  ['
    5942 20E4                        1	DATASEG	SEGMENT 
    5943 20E4  50 4F 50 20 20 5B     1		DB 'POP  [',0 
    5944 20EB                        1	DATASEG ENDS 
    5945 2397  51                    1		push	cx 
    5946 2398  53                    1		PUSH	BX 
    5947 2399  B9 0002               1		mov	cx,2 
    5948 239C  BE 23AA R             1		mov	si,offset ??010C 
    5949 239F  BB 20E4 R             1		MOV	BX,offset STRA 
    5950 23A2  E8 34DE R             1		call	maccod 
    5951 23A5  5B                    1		POP	BX 
    5952 23A6  59                    1		pop	cx 
    5953 23A7  EB 05 90              1		jmp	??010D 
    5954 23AA  8F 06 0114 R          1	??010C:	POP [trace] 
    5955 23AE                        1	??010D: 
    5956					car	a,ax
    5957 23AE  E8 02EB R             2		CALL	NEWCARaax 
    5958 23B1  E8 3547 R			call	cword
    5959					comptext ']'
    5960 23B4  8A 16 2CFE R          1		mov	dl,[codebug] 
    5961 23B8  80 FA 00              1		cmp	dl,0 
    5962 23BB  74 08                 1		jz	??010E 
    5963 20EB                        2	dataseg segment 
    5964 20EB  5D 00                 2		DB ']',0 
    5965 20ED                        2	dataseg ends 
    5966 23BD  53                    2		push	bx 
    5967 23BE  BB 20EB R             2		mov	bx,offset tempaddr 
    5968 23C1  E8 018C R             2		CALL	PRINTS 
    5969 23C4  5B                    2		pop	bx 
    5970 23C5                        1	??010E: 
    5971 23C5  58				pop	ax
    5972 23C6  C3				ret
    5973				
    5974 23C7				pusvars:R$NIL	AX
    5975 23C7  3D 0000               1		CMP	AX,0 
    5976 23CA  75 01                 2		JNZ	$+3 
    5977 23CC  C3                    2		RET 
    5978					CAR$CDR	A,B,aX
    5979 23CD  E8 02EB R             3		CALL	NEWCARAaX 
    5980 23D0  E8 022A R             3		CALL	NEWCDRB 
    5981 23D3  53				PUSH	BX
    5982 23D4  E8 2362 R			call	pusvar
    5983 23D7  58				POP	AX
    5984 23D8  EB ED				JMP	pusvars
    5985				
    5986 23DA  E8 140B R		popvars:CALL	REVERSE
    5987 23DD				POPVA2:	R$NIL	AX
    5988 23DD  3D 0000               1		CMP	AX,0 
    5989 23E0  75 01                 2		JNZ	$+3 
    5990 23E2  C3                    2		RET 
    5991					CAR$CDR	A,B,aX
    5992 23E3  E8 02EB R             3		CALL	NEWCARAaX 
    5993 23E6  E8 022A R             3		CALL	NEWCDRB 
    5994 23E9  53				PUSH	BX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-112


    5995 23EA  E8 2396 R			call	popvar
    5996 23ED  58				POP	AX
    5997 23EE  EB ED				JMP	POPVA2
    5998				
    5999				
    6000					
    6001				LISP$SUBRU 'cond',ccond
    6002 20ED                        1	dataseg segment 
    6003 20ED  2043 R                1		DW NXTSBR 
    6004 20EF  23F0 R                1		dw CODEADDR 
    6005 20F1  3787 R                1		dw ccond 
    6006 20F3  63 6F 6E 64 00        1	  	DB 'cond',0 
    6007 20F8                        1	dataseg ends 
    6008 23F0  E8 0E53 R		cond:	CALL	ARG
    6009					R$NIL	AX
    6010 23F3  3D 0000               1		CMP	AX,0 
    6011 23F6  75 01                 2		JNZ	$+3 
    6012 23F8  C3                    2		RET 
    6013					CAR$CDR	B,A,AX
    6014 23F9  E8 049D R             3		CALL	NEWCARBAX 
    6015 23FC  E8 0208 R             3		CALL	NEWCDRA 
    6016 23FF  93				XCHG	BX,AX
    6017 2400  53				PUSH	BX
    6018 2401  E8 0CA5 R			CALL	EVAL
    6019 2404  5B				POP	BX
    6020					J$NIL	AX,COND
    6021 2405  3D 0000               1		CMP	AX,0 
    6022 2408  75 03                 2		JnZ	$+5 
    6023 240A  EB E4                 2		JMP	COND 
    6024 240C  90                    2		nop 
    6025 240D  E9 1E9B R			jmp	PROGN2
    6026				;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    6027				LISP$SUBRU 'repeat-times',crepeattimes,NUMARG
    6028 20F8                        1	dataseg segment 
    6029 20F8  20ED R                1		DW NXTSBR 
    6030 20FA  2410 R                1		dw CODEADDR 
    6031 20FC  370A R                1		dw crepeattimes 
    6032 20FE  72 65 70 65 61 74     1	  	DB 'repeat-times',0 
    6033 210B                        1	dataseg ends 
    6034 2410  E8 0F1A R             1		CALL	NUMARG 
    6035 2413  50				PUSH	AX
    6036 2414  A1 0110 R			MOV	AX,[ARGSTA]
    6037					CAR	A,AX
    6038 2417  E8 02EB R             2		CALL	NEWCARAAX 
    6039 241A  5B				POP	BX
    6040 241B				REPTI:	J$NIL	bx,NILRET
    6041 241B  83 FB 00              1		CMP	bx,0 
    6042 241E  75 03                 2		JnZ	$+5 
    6043 2420  E9 019A R             2		JMP	NILRET 
    6044 2423  90                    2		nop 
    6045 2424  53				PUSH	BX
    6046 2425  50				PUSH	AX
    6047 2426  E8 1ECC R			CALL	LPROGN
    6048 2429  58				POP	AX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-113


    6049 242A  5B				POP	BX
    6050 242B  4B				DEC	BX
    6051 242C  EB ED				Jmp	REPTI
    6052				
    6053				LISP$SUBRU 'if',cif,EVALARG
    6054 210B                        1	dataseg segment 
    6055 210B  20F8 R                1		DW NXTSBR 
    6056 210D  242E R                1		dw CODEADDR 
    6057 210F  3753 R                1		dw cif 
    6058 2111  69 66 00              1	  	DB 'if',0 
    6059 2114                        1	dataseg ends 
    6060 242E  E8 0EC7 R             1		CALL	EVALARG 
    6061 2431  3D 0000				cmp	ax,0
    6062 2434  75 03				JNZ	THENN
    6063 2436  E8 0E53 R			CALL	ARG
    6064 2439  E9 0EC7 R		THENN:	JmP	EVALARG	
    6065				
    6066				LISP$SUBRU 'repeat-until',CREPEUN
    6067 2114                        1	dataseg segment 
    6068 2114  210B R                1		DW NXTSBR 
    6069 2116  243C R                1		dw CODEADDR 
    6070 2118  36BA R                1		dw CREPEUN 
    6071 211A  72 65 70 65 61 74     1	  	DB 'repeat-until',0 
    6072 2127                        1	dataseg ends 
    6073 243C  A1 0110 R			MOV	AX,[argsta]
    6074					car	a,AX
    6075 243F  E8 02EB R             2		CALL	NEWCARaAX 
    6076 2442  50			RLOOP:	PUSH	AX
    6077					CAR$cdr	b,a,AX
    6078 2443  E8 049D R             3		CALL	NEWCARbAX 
    6079 2446  E8 0208 R             3		CALL	NEWCDRa 
    6080 2449  50				PUSH	AX
    6081 244A  93				xchg	bx,AX
    6082 244B  E8 0CA5 R			CALL	EVAL
    6083					JN$NIL	ax,EREP
    6084 244E  3D 0000               1		CMP	ax,0 
    6085 2451  74 03                 2		JZ	$+5 
    6086 2453  EB 09 90              2		JMP	EREP 
    6087 2456  90                    2		nop 
    6088 2457  58				POP	AX
    6089 2458  E8 1ECC R			CALL	LPROGN
    6090 245B  58				POP	AX
    6091 245C  EB E4				JMP	RLOOP
    6092 245E  5B			EREP:	POP	bx
    6093 245F  5B				POP	bx
    6094 2460  C3				RET
    6095				
    6096				LISP$SUBRU 'while',CWHILE
    6097 2127                        1	dataseg segment 
    6098 2127  2114 R                1		DW NXTSBR 
    6099 2129  2461 R                1		dw CODEADDR 
    6100 212B  36E8 R                1		dw CWHILE 
    6101 212D  77 68 69 6C 65 00     1	  	DB 'while',0 
    6102 2133                        1	dataseg ends 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-114


    6103 2461  A1 0110 R			MOV	AX,[argsta]
    6104					car	a,AX
    6105 2464  E8 02EB R             2		CALL	NEWCARaAX 
    6106 2467  50			WLOOP:	PUSH	AX
    6107					CAR$cdr	b,a,AX
    6108 2468  E8 049D R             3		CALL	NEWCARbAX 
    6109 246B  E8 0208 R             3		CALL	NEWCDRa 
    6110 246E  50				PUSH	AX
    6111 246F  93				xchg	bx,AX
    6112 2470  E8 0CA5 R			CALL	EVAL
    6113					J$NIL	ax,EWHI
    6114 2473  3D 0000               1		CMP	ax,0 
    6115 2476  75 03                 2		JnZ	$+5 
    6116 2478  EB 09 90              2		JMP	EWHI 
    6117 247B  90                    2		nop 
    6118 247C  58				POP	AX
    6119 247D  E8 1ECC R			CALL	LPROGN
    6120 2480  58				POP	AX
    6121 2481  EB E4				JMP	WLOOP
    6122 2483  5B			EWHI:	POP	bx
    6123 2484  5B				POP	bx
    6124 2485  C3				RET
    6125				
    6126				LISP$SUBRU 'repeat',crepeat
    6127 2133                        1	dataseg segment 
    6128 2133  2127 R                1		DW NXTSBR 
    6129 2135  2486 R                1		dw CODEADDR 
    6130 2137  36F9 R                1		dw crepeat 
    6131 2139  72 65 70 65 61 74     1	  	DB 'repeat',0 
    6132 2140                        1	dataseg ends 
    6133 2486  A1 0110 R			MOV	AX,[argsta]
    6134					car	a,AX
    6135 2489  E8 02EB R             2		CALL	NEWCARaAX 
    6136 248C  50			REPEA:	PUSH	AX
    6137 248D  E8 1ECC R			CALL	LPROGN
    6138 2490  5B				POP	bx
    6139 2491  3D 0000				CMP	AX,0
    6140					RNZ
    6141 2494  74 01                 1		JZ	$+3 
    6142 2496  C3                    1		RET 
    6143 2497  93				xchg	bx,AX
    6144 2498  EB F2				JMP	REPEA
    6145				
    6146				LISP$SUBRU 'explode',CONEARG,ONEARG
    6147 2140                        1	dataseg segment 
    6148 2140  2133 R                1		DW NXTSBR 
    6149 2142  249A R                1		dw CODEADDR 
    6150 2144  3B76 R                1		dw CONEARG 
    6151 2146  65 78 70 6C 6F 64     1	  	DB 'explode',0 
    6152 214E                        1	dataseg ends 
    6153 249A  E8 0ECD R             1		CALL	ONEARG 
    6154 249D				EXPLODE:typeof	dl,ax
    6155 249D  8B F8                 1		MOV     DI,ax 
    6156 249F  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-115


    6157 24A4  74 05                 1		JZ	??010F 
    6158 24A6  E8 0023 R             1		CALL	EMSADDR 
    6159 24A9  EB 04                 1		jmp	short ??0110 
    6160 24AB                        1	??010F: 
    6161 24AB  8E 06 0100 R          1		mov	ES,[NODTYP] 
    6162 24AF                        1	??0110: 
    6163 24AF  26: 8A 15             1		MOV	dl,ES:[DI] 
    6164					WHEN	LIST,NILRET
    6165 24B2  80 FA 0F              1		CMP	DL,LIST 
    6166 24B5  75 03                 2		JNZ	$+5 
    6167 24B7  E9 019A R             2		JMP	NILRET 
    6168 24BA  90                    2		nop 
    6169					WHEN	symbol,EXNAM
    6170 24BB  80 FA 05              1		CMP	DL,symbol 
    6171 24BE  75 03                 2		JNZ	$+5 
    6172 24C0  EB 1E 90              2		JMP	EXNAM 
    6173 24C3  90                    2		nop 
    6174					when	fsymbo,exnam
    6175 24C4  80 FA 06              1		CMP	DL,fsymbo 
    6176 24C7  75 03                 2		JNZ	$+5 
    6177 24C9  EB 15 90              2		JMP	exnam 
    6178 24CC  90                    2		nop 
    6179					WHEN	NUMBER,EXNUM
    6180 24CD  80 FA 03              1		CMP	DL,NUMBER 
    6181 24D0  75 03                 2		JNZ	$+5 
    6182 24D2  EB 15 90              2		JMP	EXNUM 
    6183 24D5  90                    2		nop 
    6184					WHEN	STRING,EXSTRI
    6185 24D6  80 FA 04              1		CMP	DL,STRING 
    6186 24D9  75 03                 2		JNZ	$+5 
    6187 24DB  EB 06 90              2		JMP	EXSTRI 
    6188 24DE  90                    2		nop 
    6189 24DF  C3				RET
    6190 24E0				EXNAM:	CDR	a,ax
    6191 24E0  E8 08AB R             2		CALL	NEWCDRaax 
    6192 24E3  E8 2577 R		EXSTRI:	CALL	EXSTR2
    6193 24E6  EB 07 90				JMP	EXP13	
    6194 24E9				EXNUM:	car	a
    6195 24E9  E8 024B R             2		CALL	NEWCARa 
    6196 24EC  E8 0C17 R			CALL	EXPLNU
    6197 24EF  BB 2290 R		EXP13:	MOV	bx,OFFSET ITEMB
    6198 24F2  8A 17			EXP3:	MOV	DL,[bx]
    6199 24F4  80 FA 00				CMP	DL,0
    6200					JMPN	NZ,NILRET
    6201 24F7  75 03                 1		JNZ	$+5 
    6202 24F9  E9 019A R             1		JMP	NILRET 
    6203 24FC  90                    1		nop 
    6204 24FD  53				PUSH	bx
    6205 24FE  E8 19F6 R			CALL	ASCII
    6206 2501  5B				POP	BX
    6207 2502  50				PUSH	AX
    6208 2503  43				INC	bx
    6209 2504  E8 24F2 R			CALL	EXP3
    6210 2507  5B				POP	bx
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-116


    6211 2508  93				XCHG	AX,BX
    6212 2509  E9 05AE R			JMP	CONS
    6213				
    6214 250C  BB 2290 R		AYCMRS:	MOV	BX,OFFSET ITEMB
    6215 250F				COMP2:	R$NIL	AX
    6216 250F  3D 0000               1		CMP	AX,0 
    6217 2512  75 01                 2		JNZ	$+3 
    6218 2514  C3                    2		RET 
    6219					CAR$CDR	C,a,ax
    6220 2515  E8 0936 R             3		CALL	NEWCARCax 
    6221 2518  E8 0208 R             3		CALL	NEWCDRa 
    6222					TYPEOF	DL,CX
    6223 251B  8B F9                 1		MOV     DI,CX 
    6224 251D  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    6225 2522  74 05                 1		JZ	??0111 
    6226 2524  E8 0023 R             1		CALL	EMSADDR 
    6227 2527  EB 04                 1		jmp	short ??0112 
    6228 2529                        1	??0111: 
    6229 2529  8E 06 0100 R          1		mov	ES,[NODTYP] 
    6230 252D                        1	??0112: 
    6231 252D  26: 8A 15             1		MOV	DL,ES:[DI] 
    6232 2530  80 FA 03				CMP	DL,NUMBER
    6233					JMPN	Z,NUMERR
    6234 2533  74 03                 1		JZ	$+5 
    6235 2535  E9 0F09 R             1		JMP	NUMERR 
    6236 2538  90                    1		nop 
    6237					CAR	D
    6238 2539  EB 1B                 3		jmp	short ??0113 
    6239 253B                        3	NEWCARD: 
    6240 253B  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    6241 2540  74 05                 4		JZ	??0114 
    6242 2542  26: 8B 55 04          4		MOV	DX,ES:[DI+4] 
    6243 2546  C3                    4		RET 
    6244 2547                        4	??0114: 
    6245 2547  8E 06 0102 R          3		mov	ES,[CARLOW] 
    6246 254B  26: 8A 15             3		mov     DL,ES:[DI] 
    6247 254E  8E 06 0104 R          3		mov	ES,[CARHIG] 
    6248 2552  26: 8A 35             3		mov	DH,ES:[DI] 
    6249 2555  C3                    3		RET 
    6250 2556                        3	??0113: 
    6251 2556  E8 253B R             2		CALL	NEWCARD 
    6252 2559  88 17				MOV	[BX],DL
    6253 255B  43				INC	BX
    6254 255C  EB B1				Jmp	COMP2
    6255				
    6256				LISP$SUBRU 'str-compress',CONEARG,ONEARG
    6257 214E                        1	dataseg segment 
    6258 214E  2140 R                1		DW NXTSBR 
    6259 2150  255E R                1		dw CODEADDR 
    6260 2152  3B76 R                1		dw CONEARG 
    6261 2154  73 74 72 2D 63 6F     1	  	DB 'str-compress',0 
    6262 2161                        1	dataseg ends 
    6263 255E  E8 0ECD R             1		CALL	ONEARG 
    6264 2561  E8 250C R		STRCRS:	CALL	AYCMRS
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-117


    6265 2564  B2 00				MOV	DL,0
    6266 2566  88 17				MOV	[BX],DL
    6267 2568  BB 2290 R			MOV	BX,OFFSET ITEMB
    6268 256B  E9 062D R			JMP	MAKSTR
    6269				
    6270				LISP$SUBRU 'compress',CONEARG,ONEARG
    6271 2161                        1	dataseg segment 
    6272 2161  214E R                1		DW NXTSBR 
    6273 2163  256E R                1		dw CODEADDR 
    6274 2165  3B76 R                1		dw CONEARG 
    6275 2167  63 6F 6D 70 72 65     1	  	DB 'compress',0 
    6276 2170                        1	dataseg ends 
    6277 256E  E8 0ECD R             1		CALL	ONEARG 
    6278 2571  E8 250C R		CMPRSS:	CALL	AYCMRS
    6279 2574  E9 072C R		RETUEN:	JMP	ITEMC
    6280				
    6281 2577  BB 2290 R		EXSTR2:	MOV	BX,OFFSET ITEMB
    6282 257A  B9 0000			exstr3:	mov	cx,0
    6283 257D				GCRS2:	J$NIL	AX,GCRZ
    6284 257D  3D 0000               1		CMP	AX,0 
    6285 2580  75 03                 2		JnZ	$+5 
    6286 2582  EB 30 90              2		JMP	GCRZ 
    6287 2585  90                    2		nop 
    6288					typeof	dl,ax
    6289 2586  8B F8                 1		MOV     DI,ax 
    6290 2588  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    6291 258D  74 05                 1		JZ	??0115 
    6292 258F  E8 0023 R             1		CALL	EMSADDR 
    6293 2592  EB 04                 1		jmp	short ??0116 
    6294 2594                        1	??0115: 
    6295 2594  8E 06 0100 R          1		mov	ES,[NODTYP] 
    6296 2598                        1	??0116: 
    6297 2598  26: 8A 15             1		MOV	dl,ES:[DI] 
    6298 259B  80 FA 04				cmp	dl,STRING
    6299					jmpn	z,voi_paska
    6300 259E  74 03                 1		Jz	$+5 
    6301 25A0  EB 16 90              1		JMP	voi_paska 
    6302 25A3  90                    1		nop 
    6303					CAR	D
    6304 25A4  E8 253B R             2		CALL	NEWCARD 
    6305					CDR	A
    6306 25A7  E8 0208 R             2		CALL	NEWCDRA 
    6307 25AA  89 17				MOV	[BX],DX
    6308 25AC  83 C1 02				add	cx,2
    6309 25AF  83 C3 02				add	bx,2
    6310 25B2  EB C9				JMP	GCRS2
    6311 25B4  C6 07 00			GCRZ:	MOV	byte ptr [BX],0
    6312 25B7  C3				RET	
    6313 25B8				voi_paska:
    6314 25B8  BB 2290 R			mov	bx,offset itemb
    6315 25BB  E8 018C R			call	prints
    6316 25BE  E9 0F86 R			jmp	ustrer
    6317				
    6318				LISP$SUBRU 'car',CONEARG,ONEARG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-118


    6319 2170                        1	dataseg segment 
    6320 2170  2161 R                1		DW NXTSBR 
    6321 2172  25C1 R                1		dw CODEADDR 
    6322 2174  3B76 R                1		dw CONEARG 
    6323 2176  63 61 72 00           1	  	DB 'car',0 
    6324 217A                        1	dataseg ends 
    6325 25C1  E8 0ECD R             1		CALL	ONEARG 
    6326 25C4				SCAR:	J$ATOM	AX,NILRET
    6327 25C4  3D 0300               1		CMP	AX,FSTNODE 
    6328 25C7  73 03                 2		JNC	$+5 
    6329 25C9  E9 019A R             2		JMP	NILRET 
    6330 25CC  90                    2		nop 
    6331 25CD  8B F8                 2		MOV     DI,AX 
    6332 25CF  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    6333 25D4  74 05                 2		JZ	??0117 
    6334 25D6  E8 0023 R             2		CALL	EMSADDR 
    6335 25D9  EB 04                 2		jmp	short ??0118 
    6336 25DB                        2	??0117: 
    6337 25DB  8E 06 0100 R          2		mov	ES,[NODTYP] 
    6338 25DF                        2	??0118: 
    6339 25DF  26: 8A 15             2		MOV	DL,ES:[DI] 
    6340 25E2  80 FA 0F              1		CMP	DL,LIST 
    6341 25E5  74 03                 2		JZ	$+5 
    6342 25E7  E9 019A R             2		JMP	NILRET 
    6343 25EA  90                    2		nop 
    6344					CAR	A,AX
    6345 25EB  E8 02EB R             2		CALL	NEWCARAAX 
    6346 25EE  C3				RET
    6347				LISP$SUBRU 'cdr',CONEARG,ONEARG
    6348 217A                        1	dataseg segment 
    6349 217A  2170 R                1		DW NXTSBR 
    6350 217C  25EF R                1		dw CODEADDR 
    6351 217E  3B76 R                1		dw CONEARG 
    6352 2180  63 64 72 00           1	  	DB 'cdr',0 
    6353 2184                        1	dataseg ends 
    6354 25EF  E8 0ECD R             1		CALL	ONEARG 
    6355 25F2				SCDR:	J$ATOM	AX,NILRET
    6356 25F2  3D 0300               1		CMP	AX,FSTNODE 
    6357 25F5  73 03                 2		JNC	$+5 
    6358 25F7  E9 019A R             2		JMP	NILRET 
    6359 25FA  90                    2		nop 
    6360 25FB  8B F8                 2		MOV     DI,AX 
    6361 25FD  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    6362 2602  74 05                 2		JZ	??0119 
    6363 2604  E8 0023 R             2		CALL	EMSADDR 
    6364 2607  EB 04                 2		jmp	short ??011A 
    6365 2609                        2	??0119: 
    6366 2609  8E 06 0100 R          2		mov	ES,[NODTYP] 
    6367 260D                        2	??011A: 
    6368 260D  26: 8A 15             2		MOV	DL,ES:[DI] 
    6369 2610  80 FA 0F              1		CMP	DL,LIST 
    6370 2613  74 03                 2		JZ	$+5 
    6371 2615  E9 019A R             2		JMP	NILRET 
    6372 2618  90                    2		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-119


    6373					CDR	A,AX
    6374 2619  E8 08AB R             2		CALL	NEWCDRAAX 
    6375 261C  C3				RET
    6376				LISP$SUBRU 'cadr',CONEARG,ONEARG
    6377 2184                        1	dataseg segment 
    6378 2184  217A R                1		DW NXTSBR 
    6379 2186  261D R                1		dw CODEADDR 
    6380 2188  3B76 R                1		dw CONEARG 
    6381 218A  63 61 64 72 00        1	  	DB 'cadr',0 
    6382 218F                        1	dataseg ends 
    6383 261D  E8 0ECD R             1		CALL	ONEARG 
    6384 2620  E8 25F2 R		CADR:	CALL	SCDR
    6385 2623  EB 9F				jmp	SCAR
    6386				LISP$SUBRU 'cddr',CONEARG,ONEARG
    6387 218F                        1	dataseg segment 
    6388 218F  2184 R                1		DW NXTSBR 
    6389 2191  2625 R                1		dw CODEADDR 
    6390 2193  3B76 R                1		dw CONEARG 
    6391 2195  63 64 64 72 00        1	  	DB 'cddr',0 
    6392 219A                        1	dataseg ends 
    6393 2625  E8 0ECD R             1		CALL	ONEARG 
    6394 2628  E8 25F2 R		CDDR:	CALL	SCDR
    6395 262B  EB C5				jmp	SCDR
    6396				LISP$SUBRU 'cdddr',CONEARG,ONEARG
    6397 219A                        1	dataseg segment 
    6398 219A  218F R                1		DW NXTSBR 
    6399 219C  262D R                1		dw CODEADDR 
    6400 219E  3B76 R                1		dw CONEARG 
    6401 21A0  63 64 64 64 72 00     1	  	DB 'cdddr',0 
    6402 21A6                        1	dataseg ends 
    6403 262D  E8 0ECD R             1		CALL	ONEARG 
    6404 2630  E8 2628 R		CDDDR:	CALL	CDDR
    6405 2633  EB BD				jmp	SCDR
    6406				LISP$SUBRU 'caddr',CONEARG,ONEARG
    6407 21A6                        1	dataseg segment 
    6408 21A6  219A R                1		DW NXTSBR 
    6409 21A8  2635 R                1		dw CODEADDR 
    6410 21AA  3B76 R                1		dw CONEARG 
    6411 21AC  63 61 64 64 72 00     1	  	DB 'caddr',0 
    6412 21B2                        1	dataseg ends 
    6413 2635  E8 0ECD R             1		CALL	ONEARG 
    6414 2638  E8 2628 R		CADDR:	CALL	CDDR
    6415 263B  EB 87				jmp	SCAR
    6416				LISP$SUBRU 'cadddr',CONEARG,ONEARG
    6417 21B2                        1	dataseg segment 
    6418 21B2  21A6 R                1		DW NXTSBR 
    6419 21B4  263D R                1		dw CODEADDR 
    6420 21B6  3B76 R                1		dw CONEARG 
    6421 21B8  63 61 64 64 64 72     1	  	DB 'cadddr',0 
    6422 21BF                        1	dataseg ends 
    6423 263D  E8 0ECD R             1		CALL	ONEARG 
    6424 2640  E8 2630 R		CADDDR:	CALL	CDDDR
    6425 2643  E9 25C4 R			jmp	SCAR
    6426				LISP$SUBRU 'caar',CONEARG,ONEARG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-120


    6427 21BF                        1	dataseg segment 
    6428 21BF  21B2 R                1		DW NXTSBR 
    6429 21C1  2646 R                1		dw CODEADDR 
    6430 21C3  3B76 R                1		dw CONEARG 
    6431 21C5  63 61 61 72 00        1	  	DB 'caar',0 
    6432 21CA                        1	dataseg ends 
    6433 2646  E8 0ECD R             1		CALL	ONEARG 
    6434 2649  E8 25C4 R		CAAR:	CALL	SCAR
    6435 264C  E9 25C4 R			jmp	SCAR
    6436				LISP$SUBRU 'cdxr',ctwoarg,twoarg
    6437 21CA                        1	dataseg segment 
    6438 21CA  21BF R                1		DW NXTSBR 
    6439 21CC  264F R                1		dw CODEADDR 
    6440 21CE  3B94 R                1		dw ctwoarg 
    6441 21D0  63 64 78 72 00        1	  	DB 'cdxr',0 
    6442 21D5                        1	dataseg ends 
    6443 264F  E8 0ED9 R             1		CALL	twoarg 
    6444 2652  E8 0F1D R			call	NUMVAL
    6445 2655  93				XCHG	AX,BX
    6446 2656				CDXRL:	R$NIL	BX
    6447 2656  83 FB 00              1		CMP	BX,0 
    6448 2659  75 01                 2		JNZ	$+3 
    6449 265B  C3                    2		RET 
    6450 265C  E8 25F2 R			CALL	SCDR
    6451 265F  4B				DEC	BX
    6452 2660  EB F4				Jmp	CDXRL
    6453				
    6454				LISP$SUBRU 'readc',CNOARG
    6455 21D5                        1	dataseg segment 
    6456 21D5  21CA R                1		DW NXTSBR 
    6457 21D7  2662 R                1		dw CODEADDR 
    6458 21D9  3B6F R                1		dw CNOARG 
    6459 21DB  72 65 61 64 63 00     1	  	DB 'readc',0 
    6460 21E1                        1	dataseg ends 
    6461 2662  E8 2828 R			CALL	READC
    6462 2665  E9 19F6 R			jmp	ascii
    6463				
    6464				LISP$SUBRU 'readc-bin',cnoARG
    6465 21E1                        1	dataseg segment 
    6466 21E1  21D5 R                1		DW NXTSBR 
    6467 21E3  2668 R                1		dw CODEADDR 
    6468 21E5  3B6F R                1		dw cnoARG 
    6469 21E7  72 65 61 64 63 2D     1	  	DB 'readc-bin',0 
    6470 21F1                        1	dataseg ends 
    6471 2668  8B 1E 2695 R			MOV	bx,[INCHN]
    6472 266C  BA 269B R			mov	dx,offset onech
    6473 266F  B9 0001				mov	cx,1
    6474				       	msdos	3fh
    6475 2672  B4 3F                 1		mov	ah,3fh 
    6476 2674  CD 21                 1		int	21h 
    6477					jmpn	nc,ioerr
    6478 2676  73 03                 1		Jnc	$+5 
    6479 2678  E9 286E R             1		JMP	ioerr 
    6480 267B  90                    1		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-121


    6481 267C  3D 0000				cmp	ax,0
    6482					jmpn	nz,nilret
    6483 267F  75 03                 1		Jnz	$+5 
    6484 2681  E9 019A R             1		JMP	nilret 
    6485 2684  90                    1		nop 
    6486 2685  8A 16 269B R			mov	dl,[onech]
    6487 2689  E9 19F6 R			JMP	ASCII
    6488				
    6489				LISP$SUBRU 'nxtch',CNOARG
    6490 21F1                        1	dataseg segment 
    6491 21F1  21E1 R                1		DW NXTSBR 
    6492 21F3  268C R                1		dw CODEADDR 
    6493 21F5  3B6F R                1		dw CNOARG 
    6494 21F7  6E 78 74 63 68 00     1	  	DB 'nxtch',0 
    6495 21FD                        1	dataseg ends 
    6496 268C  8A 16 2694 R			mov	dl,[nxtch]
    6497 2690  E9 19F6 R			JmP	ASCII
    6498				
    6499				IFNDEF DXLISP
    6500				lisp$subru 'readcc',CNOARG
    6501 21FD                        1	dataseg segment 
    6502 21FD  21F1 R                1		DW NXTSBR 
    6503 21FF  2693 R                1		dw CODEADDR 
    6504 2201  3B6F R                1		dw CNOARG 
    6505 2203  72 65 61 64 63 63     1	  	DB 'readcc',0 
    6506 220A                        1	dataseg ends 
    6507 2693  B0 80				MOV	AL,80H ; nokia slow
    6508 2695  E6 22				OUT	22H,AL
    6509 2697  B0 18				MOV	AL,18H
    6510 2699  E6 23				OUT	23H,AL
    6511 269B  B4 07				mov	AH,7
    6512 269D  CD 21				INT	21h
    6513 269F  8A D0				mov	dl,al
    6514 26A1  B0 80				MOV	AL,80H ; nokia fast
    6515 26A3  E6 22				OUT	22H,AL
    6516 26A5  B0 04				MOV	AL,4
    6517 26A7  E6 23				OUT	23H,AL
    6518 26A9  E9 19F6 R			JMP	ASCII
    6519				ENDIF
    6520				
    6521				LISP$SUBRU 'printc',CNUMARG,NUMARG
    6522 220A                        1	dataseg segment 
    6523 220A  21FD R                1		DW NXTSBR 
    6524 220C  26AC R                1		dw CODEADDR 
    6525 220E  3C68 R                1		dw CNUMARG 
    6526 2210  70 72 69 6E 74 63     1	  	DB 'printc',0 
    6527 2217                        1	dataseg ends 
    6528 26AC  E8 0F1A R             1		CALL	NUMARG 
    6529 26AF  8A D0				mov	dl,al
    6530 26B1  E8 2882 R			CALL	PRINTC
    6531 26B4  E9 019A R			JmP	NILRET
    6532				
    6533				LISP$SUBRU 'cname',cantcomp,QNAMARG
    6534 2217                        1	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-122


    6535 2217  220A R                1		DW NXTSBR 
    6536 2219  26B7 R                1		dw CODEADDR 
    6537 221B  3B6A R                1		dw cantcomp 
    6538 221D  63 6E 61 6D 65 00     1	  	DB 'cname',0 
    6539 2223                        1	dataseg ends 
    6540 26B7  E8 0F97 R             1		CALL	QNAMARG 
    6541 26BA  50				PUSH	AX
    6542 26BB  E8 0F97 R			CALL	QNAMARG
    6543 26BE  5B				POP	BX
    6544					cdr	c,ax
    6545 26BF  EB 20                 3		jmp	short ??011B 
    6546 26C1                        3	NEWCDRcax: 
    6547 26C1  8B F8                 4		MOV     DI,ax 
    6548 26C3  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    6549 26C8  74 08                 4		JZ	??011C 
    6550 26CA  E8 0023 R             4		CALL	EMSADDR 
    6551 26CD  26: 8B 4D 06          4		MOV	cX,ES:[DI+6] 
    6552 26D1  C3                    4		RET 
    6553 26D2                        4	??011C: 
    6554 26D2  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    6555 26D6  26: 8A 0D             3		mov     cL,ES:[DI] 
    6556 26D9  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    6557 26DD  26: 8A 2D             3		mov	cH,ES:[DI] 
    6558 26E0  C3                    3		RET 
    6559 26E1                        3	??011B: 
    6560 26E1  E8 26C1 R             2		CALL	NEWCDRcax 
    6561					cdr	d,bx
    6562 26E4  EB 20                 3		jmp	short ??011D 
    6563 26E6                        3	NEWCDRdbx: 
    6564 26E6  8B FB                 4		MOV     DI,bx 
    6565 26E8  80 3E 18A0 R 00       4		CMP	[EMS_ON],0 
    6566 26ED  74 08                 4		JZ	??011E 
    6567 26EF  E8 0023 R             4		CALL	EMSADDR 
    6568 26F2  26: 8B 55 06          4		MOV	dX,ES:[DI+6] 
    6569 26F6  C3                    4		RET 
    6570 26F7                        4	??011E: 
    6571 26F7  8E 06 0106 R          3		mov	ES,[CDRLOW] 
    6572 26FB  26: 8A 15             3		mov     dL,ES:[DI] 
    6573 26FE  8E 06 0108 R          3		mov	ES,[CDRHIG] 
    6574 2702  26: 8A 35             3		mov	dH,ES:[DI] 
    6575 2705  C3                    3		RET 
    6576 2706                        3	??011D: 
    6577 2706  E8 26E6 R             2		CALL	NEWCDRdbx 
    6578					rplacd	ax,d
    6579 2709  8B F8                 1		MOV	DI,ax 
    6580 270B  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    6581 2710  74 09                 2		JZ	??011F 
    6582 2712  E8 0023 R             2		CALL	EMSADDR 
    6583 2715  26: 89 55 06          2		MOV	ES:[DI+6],dX 
    6584 2719  EB 0E                 2		JMP	SHORT ??0120 
    6585 271B  8E 06 0106 R          2	??011F:	mov	ES,[CDRLOW] 
    6586 271F  26: 88 15             2		mov     ES:[DI],dL 
    6587 2722  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    6588 2726  26: 88 35             2		mov	ES:[DI],dH 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-123


    6589 2729                        2	??0120: 
    6590					rplacd	bx,c
    6591 2729  8B FB                 1		MOV	DI,bx 
    6592 272B  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    6593 2730  74 09                 2		JZ	??0121 
    6594 2732  E8 0023 R             2		CALL	EMSADDR 
    6595 2735  26: 89 4D 06          2		MOV	ES:[DI+6],cX 
    6596 2739  EB 0E                 2		JMP	SHORT ??0122 
    6597 273B  8E 06 0106 R          2	??0121:	mov	ES,[CDRLOW] 
    6598 273F  26: 88 0D             2		mov     ES:[DI],cL 
    6599 2742  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    6600 2746  26: 88 2D             2		mov	ES:[DI],cH 
    6601 2749                        2	??0122: 
    6602 2749  E9 019E R			JmP	TRET
    6603				
    6604				
    6605				LISP$SUBRU 'getchar',ctwoarg,twoarg
    6606 2223                        1	dataseg segment 
    6607 2223  2217 R                1		DW NXTSBR 
    6608 2225  274C R                1		dw CODEADDR 
    6609 2227  3B94 R                1		dw ctwoarg 
    6610 2229  67 65 74 63 68 61     1	  	DB 'getchar',0 
    6611 2231                        1	dataseg ends 
    6612 274C  E8 0ED9 R             1		CALL	twoarg 
    6613					cdr	a,ax
    6614 274F  E8 08AB R             2		CALL	NEWCDRaax 
    6615 2752  50				PUSH	AX
    6616 2753  8B C3				mov	ax,bx
    6617 2755  E8 0F1D R			call	numval
    6618 2758  8B D8				mov	bx,ax
    6619 275A  58				POP	AX
    6620 275B  FE CB				DEC	bl
    6621 275D  F6 C3 FE			MOOCDR:	test	bl,0FEH
    6622 2760  74 09				JZ	GETC$3
    6623					CDR	A,AX
    6624 2762  E8 08AB R             2		CALL	NEWCDRAAX 
    6625 2765  FE CB				DEC	bl
    6626 2767  FE CB				DEC	bl
    6627 2769  EB F2				Jmp	MOOCDR
    6628 276B				GETC$3:	CAR	A,AX
    6629 276B  E8 02EB R             2		CALL	NEWCARAAX 
    6630 276E  80 FB 00				cmp	bl,0
    6631 2771  75 05				JNZ	TOKACH
    6632 2773  8A D0				MOV	dl,aL
    6633 2775  E9 19F6 R			JmP	ASCII
    6634 2778  8A D4			TOKACH:	MOV	dl,aH
    6635 277A  E9 19F6 R			JmP	ASCII
    6636				
    6637				;===========================================================
    6638				
    6639				
    6640				LISP$SUBRU 'enviro',CNOARG
    6641 2231                        1	dataseg segment 
    6642 2231  2223 R                1		DW NXTSBR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-124


    6643 2233  277D R                1		dw CODEADDR 
    6644 2235  3B6F R                1		dw CNOARG 
    6645 2237  65 6E 76 69 72 6F     1	  	DB 'enviro',0 
    6646 223E                        1	dataseg ends 
    6647 277D  A1 0112 R			MOV	AX,[ENVIRO]
    6648 2780  C3				RET
    6649				
    6650				LISP$SUBRU 'argsta',CNOARG
    6651 223E                        1	dataseg segment 
    6652 223E  2231 R                1		DW NXTSBR 
    6653 2240  2781 R                1		dw CODEADDR 
    6654 2242  3B6F R                1		dw CNOARG 
    6655 2244  61 72 67 73 74 61     1	  	DB 'argsta',0 
    6656 224B                        1	dataseg ends 
    6657 2781  A1 0110 R			MOV	AX,[ARGSTA]
    6658 2784  C3				RET
    6659				
    6660				LISP$SUBRU 'trace',cantcomp,EVALARG
    6661 224B                        1	dataseg segment 
    6662 224B  223E R                1		DW NXTSBR 
    6663 224D  2785 R                1		dw CODEADDR 
    6664 224F  3B6A R                1		dw cantcomp 
    6665 2251  74 72 61 63 65 00     1	  	DB 'trace',0 
    6666 2257                        1	dataseg ends 
    6667 2785  E8 0EC7 R             1		CALL	EVALARG 
    6668 2788  8B 1E 0114 R			MOV	BX,[TRACE]
    6669 278C  A3 0116 R			MOV	[TRON],AX
    6670 278F  93				XCHG	BX,AX
    6671 2790  C3				RET
    6672				
    6673				
    6674				LISP$SUBRU 'addr-of',cantcomp,EVALARG
    6675 2257                        1	dataseg segment 
    6676 2257  224B R                1		DW NXTSBR 
    6677 2259  2791 R                1		dw CODEADDR 
    6678 225B  3B6A R                1		dw cantcomp 
    6679 225D  61 64 64 72 2D 6F     1	  	DB 'addr-of',0 
    6680 2265                        1	dataseg ends 
    6681 2791  E8 0EC7 R             1		CALL	EVALARG 
    6682 2794  E9 05C9 R			Jmp	MAKNUM
    6683				
    6684				LISP$SUBRU 'at-addr',CNUMARG,NUMARG
    6685 2265                        1	dataseg segment 
    6686 2265  2257 R                1		DW NXTSBR 
    6687 2267  2797 R                1		dw CODEADDR 
    6688 2269  3C68 R                1		dw CNUMARG 
    6689 226B  61 74 2D 61 64 64     1	  	DB 'at-addr',0 
    6690 2273                        1	dataseg ends 
    6691 2797  E8 0F1A R             1		CALL	NUMARG 
    6692 279A  C3				RET
    6693				
    6694				
    6695				LISP$SUBRU 'oblist',CNOARG
    6696 2273                        1	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-125


    6697 2273  2265 R                1		DW NXTSBR 
    6698 2275  279B R                1		dw CODEADDR 
    6699 2277  3B6F R                1		dw CNOARG 
    6700 2279  6F 62 6C 69 73 74     1	  	DB 'oblist',0 
    6701 2280                        1	dataseg ends 
    6702 279B  A1 010C R			MOV	AX,[OBLIST]
    6703 279E  C3				RET
    6704				
    6705				LISP$SUBRU 'garbage',conearg,onearg
    6706 2280                        1	dataseg segment 
    6707 2280  2273 R                1		DW NXTSBR 
    6708 2282  279F R                1		dw CODEADDR 
    6709 2284  3B76 R                1		dw conearg 
    6710 2286  67 61 72 62 61 67     1	  	DB 'garbage',0 
    6711 228E                        1	dataseg ends 
    6712 279F  E8 0ECD R             1		CALL	onearg 
    6713 27A2  3D 0300			garbage:cmp	ax,fstnode
    6714					jmpn	nc,nilret
    6715 27A5  73 03                 1		Jnc	$+5 
    6716 27A7  E9 019A R             1		JMP	nilret 
    6717 27AA  90                    1		nop 
    6718 27AB  3B 06 010A R			cmp	ax,[lastnode]
    6719					jmpn	c,nilret
    6720 27AF  72 03                 1		Jc	$+5 
    6721 27B1  E9 019A R             1		JMP	nilret 
    6722 27B4  90                    1		nop 
    6723 27B5  8B 1E 010E R			mov	bx,[freelist]
    6724					rplacd	ax,b
    6725 27B9  8B F8                 1		MOV	DI,ax 
    6726 27BB  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    6727 27C0  74 09                 2		JZ	??0123 
    6728 27C2  E8 0023 R             2		CALL	EMSADDR 
    6729 27C5  26: 89 5D 06          2		MOV	ES:[DI+6],bX 
    6730 27C9  EB 0E                 2		JMP	SHORT ??0124 
    6731 27CB  8E 06 0106 R          2	??0123:	mov	ES,[CDRLOW] 
    6732 27CF  26: 88 1D             2		mov     ES:[DI],bL 
    6733 27D2  8E 06 0108 R          2		mov	ES,[CDRHIG] 
    6734 27D6  26: 88 3D             2		mov	ES:[DI],bH 
    6735 27D9                        2	??0124: 
    6736 27D9  A3 010E R			mov	[freelist],ax
    6737 27DC  B8 0001				mov	ax,t
    6738 27DF  C3				ret
    6739					
    6740				
    6741				;===============================================
    6742				; io ==================================
    6743				
    6744 228E				dataseg	segment
    6745 228E  00				itemlen	db	0
    6746 228F  00					db	0
    6747 2290  0200[				ITEMB		DB 200H DUP(?)
    6748	   ??			
    6749			 ]	
    6750				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-126


    6751 2490  0200[				ITEMB2		DB 200H DUP(?)
    6752	   ??			
    6753			 ]	
    6754				
    6755 2690  2290 R				ITEMBP		DW ITEMB	
    6756 2692  00				echo		db	0
    6757 2693  00				TABS		DB 0
    6758 2694  00				NXTCH		DB 0
    6759 2695  0000				INCHN		Dw	0
    6760 2697  0000				OUTCHN 		Dw	0
    6761 2699  0000				filename	dw	0
    6762 269B  00				onech	db	0
    6763				
    6764 269C				dataseg	ends
    6765				
    6766				lisp$subru 'echo',cantcomp,evalarg
    6767 269C                        1	dataseg segment 
    6768 269C  2280 R                1		DW NXTSBR 
    6769 269E  27E0 R                1		dw CODEADDR 
    6770 26A0  3B6A R                1		dw cantcomp 
    6771 26A2  65 63 68 6F 00        1	  	DB 'echo',0 
    6772 26A7                        1	dataseg ends 
    6773 27E0  E8 0EC7 R             1		CALL	evalarg 
    6774 27E3  A2 2692 R			mov	[echo],al
    6775 27E6  C3				ret
    6776				
    6777				lisp$subru 'out',CONEARG,EVALARG
    6778 26A7                        1	dataseg segment 
    6779 26A7  269C R                1		DW NXTSBR 
    6780 26A9  27E7 R                1		dw CODEADDR 
    6781 26AB  3B76 R                1		dw CONEARG 
    6782 26AD  6F 75 74 00           1	  	DB 'out',0 
    6783 26B1                        1	dataseg ends 
    6784 27E7  E8 0EC7 R             1		CALL	EVALARG 
    6785					j$NIL	ax,goutchn
    6786 27EA  3D 0000               1		CMP	ax,0 
    6787 27ED  75 03                 2		JnZ	$+5 
    6788 27EF  EB 10 90              2		JMP	goutchn 
    6789 27F2  90                    2		nop 
    6790 27F3  E8 0F1D R			call	NUMVAL
    6791 27F6  A3 2697 R			mov	[outchn],ax
    6792 27F9  C6 06 2693 R 00			mov	byte ptr [tabs],0
    6793 27FE  E9 019E R			jmp	tret
    6794 2801  A1 2697 R		goutchn:mov	ax,[outchn]
    6795 2804  E9 05C9 R			jmp	maknum
    6796				
    6797				lisp$subru 'in',CONEARG,EVALARG
    6798 26B1                        1	dataseg segment 
    6799 26B1  26A7 R                1		DW NXTSBR 
    6800 26B3  2807 R                1		dw CODEADDR 
    6801 26B5  3B76 R                1		dw CONEARG 
    6802 26B7  69 6E 00              1	  	DB 'in',0 
    6803 26BA                        1	dataseg ends 
    6804 2807  E8 0EC7 R             1		CALL	EVALARG 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-127


    6805					j$NIL	ax,ginchn
    6806 280A  3D 0000               1		CMP	ax,0 
    6807 280D  75 03                 2		JnZ	$+5 
    6808 280F  EB 11 90              2		JMP	ginchn 
    6809 2812  90                    2		nop 
    6810 2813  E8 0F1D R			call	NUMVAL
    6811 2816  A3 2695 R			mov	[inchn],ax
    6812 2819  B2 00				mov	dl,0
    6813 281B  88 16 2694 R			mov	[nxtch],dl
    6814 281F  E9 019E R			jmp	tret
    6815 2822  A1 2695 R		ginchn:	mov	ax,[inchn]
    6816 2825  E9 05C9 R			jmp	maknum
    6817				
    6818				IFNDEF	DXLISP
    6819 2828  50			READC:	PUSH	AX
    6820 2829  53				PUSH	BX
    6821 282A  51				PUSH	CX
    6822 282B  8A 16 2694 R			mov	dl,[nxtch]
    6823 282F  52				push	dx
    6824 2830  80 FA 1A				cmp	dl,1ah
    6825 2833  74 07				jz	eeee
    6826 2835  E8 2841 R			call	redimm
    6827 2838  88 16 2694 R			mov	[nxtch],dl
    6828 283C  5A			eeee:	POP	DX
    6829 283D  59				POP	CX
    6830 283E  5B				POP	BX
    6831 283F  58				POP	AX
    6832 2840  C3				RET
    6833				
    6834 2841  8B 1E 2695 R		REDIMM:	MOV	bx,[INCHN]
    6835 2845  BA 269B R			mov	dx,offset onech
    6836 2848  B9 0001				mov	cx,1
    6837				       	msdos	3fh
    6838 284B  B4 3F                 1		mov	ah,3fh 
    6839 284D  CD 21                 1		int	21h 
    6840 284F  72 1D				jc	ioerr
    6841 2851  3D 0000				cmp	ax,0
    6842 2854  74 15				jz	eofile
    6843 2856  8A 16 269B R			mov	dl,[onech]
    6844 285A  80 3E 2692 R 00			cmp	[echo],0
    6845					rz
    6846 285F  75 01                 1		JNZ	$+3 
    6847 2861  C3                    1		RET 
    6848					msdos	6
    6849 2862  B4 06                 1		mov	ah,6 
    6850 2864  CD 21                 1		int	21h 
    6851 2866  8A 16 269B R			mov	dl,[onech]
    6852 286A  C3				ret
    6853 286B  B2 1A			eofile: mov	dl,1ah
    6854 286D  C3				ret
    6855 286E  E8 05C9 R		ioerr:	call	maknum
    6856					lisp$error ' IO-ERROR = '
    6857 26BA                        1		dataseg segment 
    6858 26BA  20 49 4F 2D 45 52     1		   db ' IO-ERROR = ',0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-128


    6859 26C7                        1		dataseg ends 
    6860 2871  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    6861 2877  BB 26BA R             1		MOV	BX,OFFSET tempaddr 
    6862 287A  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    6863 287E  E8 4044 R             1		call	ERHE 
    6864 2881  C3                    1		ret 
    6865				
    6866 2882  50			PRINTC:	PUSH	AX
    6867 2883  53				PUSH	BX
    6868 2884  51				PUSH	CX
    6869 2885  52				PUSH	DX
    6870 2886  BB 2693 R			mov	bx,offset tabs
    6871 2889  FE 07				inc	byte ptr [bx]
    6872 288B  80 FA 0D				cmp	dl,13
    6873 288E  75 03				jnz	rivisi
    6874 2890  C6 07 FF				mov	byte ptr [bx],-1
    6875 2893  88 16 269B R		rivisi:	mov	[onech],dl
    6876 2897  80 3E 2692 R 00			cmp	[echo],0
    6877 289C  74 04				jz	eiecho
    6878					msdos	6
    6879 289E  B4 06                 1		mov	ah,6 
    6880 28A0  CD 21                 1		int	21h 
    6881 28A2  8B 1E 2697 R		eiecho:	MOV	bx,[outchn]
    6882 28A6  83 FB 00				cmp	bx,0
    6883 28A9  75 0E				jnz	prntc2
    6884 28AB  A0 2C49 R			mov	al,[g_char_mode]
    6885 28AE  3C 00				cmp	al,0
    6886 28B0  74 07				jz	prntc2
    6887 28B2  8A C2				mov	al,dl
    6888 28B4  E8 329C R			call	graphc
    6889 28B7  EB 0C				jmp	short noprint
    6890 28B9  BA 269B R		prntc2:	mov	dx,offset onech
    6891 28BC  B9 0001				mov	cx,1
    6892					msdos	40h
    6893 28BF  B4 40                 1		mov	ah,40h 
    6894 28C1  CD 21                 1		int	21h 
    6895 28C3  72 A9				jc	ioerr
    6896 28C5  5A			noprint:POP	DX
    6897 28C6  59				POP	CX
    6898 28C7  5B				POP	BX
    6899 28C8  58				POP	AX
    6900 28C9  C3				RET
    6901				
    6902				lisp$subru 'rename-file',cantcomp,strarg
    6903 26C7                        1	dataseg segment 
    6904 26C7  26B1 R                1		DW NXTSBR 
    6905 26C9  28CA R                1		dw CODEADDR 
    6906 26CB  3B6A R                1		dw cantcomp 
    6907 26CD  72 65 6E 61 6D 65     1	  	DB 'rename-file',0 
    6908 26D9                        1	dataseg ends 
    6909 28CA  E8 0F5A R             1		CALL	strarg 
    6910 28CD  50				push	ax
    6911 28CE  E8 0F5A R			call	strarg
    6912 28D1  BB 2490 R			mov	bx,offset itemb2
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-129


    6913 28D4  E8 257A R			call	exstr3
    6914 28D7  58				pop	ax
    6915 28D8  E8 2577 R			call	exstr2
    6916 28DB  BA 2290 R			mov	dx,offset itemb
    6917 28DE  8C D8				MOV	AX,DS
    6918 28E0  8E C0				mov	es,AX
    6919 28E2  BF 2490 R			mov	di,offset itemb2
    6920					msdos	56H
    6921 28E5  B4 56                 1		mov	ah,56H 
    6922 28E7  CD 21                 1		int	21h 
    6923					test$resu	nc
    6924 28E9  B8 0001               1		mov	ax,1 
    6925 28EC  73 01                 1		jnc	$+3 
    6926 28EE  48                    1		dec	ax 
    6927 28EF  C3                    1		ret 
    6928				
    6929				
    6930				lisp$subru 'find-first',cantcomp
    6931 26D9                        1	dataseg segment 
    6932 26D9  26C7 R                1		DW NXTSBR 
    6933 26DB  28F0 R                1		dw CODEADDR 
    6934 26DD  3B6A R                1		dw cantcomp 
    6935 26DF  66 69 6E 64 2D 66     1	  	DB 'find-first',0 
    6936 26EA                        1	dataseg ends 
    6937 28F0  BA 2490 R			mov	dx, offset itemb2
    6938					msdos	1ah
    6939 28F3  B4 1A                 1		mov	ah,1ah 
    6940 28F5  CD 21                 1		int	21h 
    6941 28F7  E8 0F5A R			call	strarg
    6942 28FA  E8 2577 R			call	exstr2
    6943 28FD  E8 0F1A R			call	numarg
    6944 2900  BA 2290 R			mov	dx,offset itemb
    6945 2903  8B C8				mov	cx,ax
    6946					msdos	4eh
    6947 2905  B4 4E                 1		mov	ah,4eh 
    6948 2907  CD 21                 1		int	21h 
    6949 2909				ffi2:	jmpn	nc,nilret
    6950 2909  73 03                 1		Jnc	$+5 
    6951 290B  E9 019A R             1		JMP	nilret 
    6952 290E  90                    1		nop 
    6953 290F  BB 24AE R			mov	bx,offset itemb2[30]
    6954 2912  E9 071C R			jmp	retuid
    6955				lisp$subru 'find-next',cantcomp,numarg
    6956 26EA                        1	dataseg segment 
    6957 26EA  26D9 R                1		DW NXTSBR 
    6958 26EC  2915 R                1		dw CODEADDR 
    6959 26EE  3B6A R                1		dw cantcomp 
    6960 26F0  66 69 6E 64 2D 6E     1	  	DB 'find-next',0 
    6961 26FA                        1	dataseg ends 
    6962 2915  E8 0F1A R             1		CALL	numarg 
    6963 2918  BA 2490 R			mov	dx,offset itemb2
    6964 291B  8B C8				mov	cx,ax
    6965					msdos	4fh
    6966 291D  B4 4F                 1		mov	ah,4fh 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-130


    6967 291F  CD 21                 1		int	21h 
    6968 2921  EB E6				jmp	ffi2
    6969				
    6970				
    6971				LISP$SUBRU 'open',cantcomp,strarg
    6972 26FA                        1	dataseg segment 
    6973 26FA  26EA R                1		DW NXTSBR 
    6974 26FC  2923 R                1		dw CODEADDR 
    6975 26FE  3B6A R                1		dw cantcomp 
    6976 2700  6F 70 65 6E 00        1	  	DB 'open',0 
    6977 2705                        1	dataseg ends 
    6978 2923  E8 0F5A R             1		CALL	strarg 
    6979 2926  A3 2699 R		open:	mov	[filename],ax
    6980 2929  E8 2577 R			call	exstr2
    6981 292C  BA 2290 R		opeite:	mov	dx,offset itemb
    6982 292F  B0 02				mov	al,2 ; read/write
    6983					msdos	3dh
    6984 2931  B4 3D                 1		mov	ah,3dh 
    6985 2933  CD 21                 1		int	21h 
    6986 2935  72 1B				jc	creerr
    6987 2937  E9 05C9 R			jmp	maknum
    6988				
    6989				
    6990				LISP$SUBRU 'create',cantcomp,strarg
    6991 2705                        1	dataseg segment 
    6992 2705  26FA R                1		DW NXTSBR 
    6993 2707  293A R                1		dw CODEADDR 
    6994 2709  3B6A R                1		dw cantcomp 
    6995 270B  63 72 65 61 74 65     1	  	DB 'create',0 
    6996 2712                        1	dataseg ends 
    6997 293A  E8 0F5A R             1		CALL	strarg 
    6998 293D  A3 2699 R		CREATE:	mov	[filename],ax
    6999 2940  E8 2577 R			call	exstr2
    7000 2943  BA 2290 R			mov	dx,offset itemb
    7001 2946  B9 0000				mov	cx,0
    7002					msdos	3ch
    7003 2949  B4 3C                 1		mov	ah,3ch 
    7004 294B  CD 21                 1		int	21h 
    7005 294D  72 03				jc	creerr
    7006 294F  E9 05C9 R			jmp	maknum
    7007				
    7008 2952  E8 05C9 R		creerr:	call	maknum
    7009 2955  8B 1E 2699 R			mov	bx,[filename]
    7010 2959  E8 05AE R			call	cons
    7011					lisp$error 'file error ='
    7012 2712                        1		dataseg segment 
    7013 2712  66 69 6C 65 20 65     1		   db 'file error =',0 
    7014 271F                        1		dataseg ends 
    7015 295C  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    7016 2962  BB 2712 R             1		MOV	BX,OFFSET tempaddr 
    7017 2965  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    7018 2969  E8 4044 R             1		call	ERHE 
    7019 296C  C3                    1		ret 
    7020				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-131


    7021				Lisp$subru 'close',CNUMARG,NUMARG
    7022 271F                        1	dataseg segment 
    7023 271F  2705 R                1		DW NXTSBR 
    7024 2721  296D R                1		dw CODEADDR 
    7025 2723  3C68 R                1		dw CNUMARG 
    7026 2725  63 6C 6F 73 65 00     1	  	DB 'close',0 
    7027 272B                        1	dataseg ends 
    7028 296D  E8 0F1A R             1		CALL	NUMARG 
    7029				
    7030 2970  8B D8			CLOSE:	mov	bx,ax
    7031					msdos	3eh
    7032 2972  B4 3E                 1		mov	ah,3eh 
    7033 2974  CD 21                 1		int	21h 
    7034 2976  72 DA				jc	creerr
    7035 2978  E9 019E R			jmp	tret
    7036					
    7037				
    7038				lisp$subru 'nquit',CNUMARG,NUMARG
    7039 272B                        1	dataseg segment 
    7040 272B  271F R                1		DW NXTSBR 
    7041 272D  297B R                1		dw CODEADDR 
    7042 272F  3C68 R                1		dw CNUMARG 
    7043 2731  6E 71 75 69 74 00     1	  	DB 'nquit',0 
    7044 2737                        1	dataseg ends 
    7045 297B  E8 0F1A R             1		CALL	NUMARG 
    7046 297E  50				push	AX
    7047 297F  80 3E 18A0 R 00			cmp	[EMS_ON],0
    7048 2984  74 10				jz	nquit2
    7049 2986  8B 16 18A3 R			MOV	DX,emm_handle		 ; load EMM handle
    7050 298A  B4 45				MOV	AH,45h			 ; load function code
    7051 298C  CD 67				INT	67h			 ; call the memory manager
    7052 298E  0A E4				OR	AH,AH			 ; check EMM status
    7053					JMPN	Z,emm_err_handler	 ; jump to error handler on error
    7054 2990  74 03                 1		JZ	$+5 
    7055 2992  E9 01A2 R             1		JMP	emm_err_handler 
    7056 2995  90                    1		nop 
    7057 2996				nquit2:
    7058 2996  58				POP	AX
    7059					msdos	4ch
    7060 2997  B4 4C                 1		mov	ah,4ch 
    7061 2999  CD 21                 1		int	21h 
    7062				
    7063				ENDIF
    7064				
    7065 2737				dataseg segment
    7066 2737  0200[				asciizb db 200h dup (0)
    7067	   00			
    7068			 ]	
    7069				
    7070 2937				dataseg ends
    7071				
    7072				lisp$subru 'ASCIIZ',cantcomp,numarg
    7073 2937                        1	dataseg segment 
    7074 2937  272B R                1		DW NXTSBR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-132


    7075 2939  299B R                1		dw CODEADDR 
    7076 293B  3B6A R                1		dw cantcomp 
    7077 293D  41 53 43 49 49 5A     1	  	DB 'ASCIIZ',0 
    7078 2944                        1	dataseg ends 
    7079 299B  E8 0F1A R             1		CALL	numarg 
    7080 299E  50				push	ax
    7081 299F  E8 0F5A R			call	strarg
    7082 29A2  5B				pop	bx
    7083 29A3  81 C3 2737 R			add	bx,offset asciizb
    7084 29A7  53				push	bx
    7085 29A8  E8 257A R			call	exstr3
    7086 29AB  58				pop	ax
    7087 29AC  E9 05C9 R			jmp	maknum
    7088				
    7089				lisp$subru 'UNASCIIZ',cantcomp,numarg
    7090 2944                        1	dataseg segment 
    7091 2944  2937 R                1		DW NXTSBR 
    7092 2946  29AF R                1		dw CODEADDR 
    7093 2948  3B6A R                1		dw cantcomp 
    7094 294A  55 4E 41 53 43 49     1	  	DB 'UNASCIIZ',0 
    7095 2953                        1	dataseg ends 
    7096 29AF  E8 0F1A R             1		CALL	numarg 
    7097 29B2  8B D8				mov	bx,ax
    7098 29B4  E9 071C R			jmp	retuid
    7099				
    7100				
    7101				lisp$subru 'high-byte',chighbyte,numarg
    7102 2953                        1	dataseg segment 
    7103 2953  2944 R                1		DW NXTSBR 
    7104 2955  29B7 R                1		dw CODEADDR 
    7105 2957  29C1 R                1		dw chighbyte 
    7106 2959  68 69 67 68 2D 62     1	  	DB 'high-byte',0 
    7107 2963                        1	dataseg ends 
    7108 29B7  E8 0F1A R             1		CALL	numarg 
    7109 29BA  8A C4				mov	al,ah
    7110 29BC  B4 00				mov	ah,0
    7111 29BE  E9 05C9 R			jmp	maknum
    7112 29C1				chighbyte:
    7113 29C1  E8 3C59 R			call	cnumar1
    7114					compil	0,<MOV  AL,AH>,'MOV  AL,AH'
    7115 2963                        1	DATASEG	SEGMENT 
    7116 2963  4D 4F 56 20 20 41     1		DB 'MOV  AL,AH',0 
    7117 296E                        1	DATASEG ENDS 
    7118 29C4  51                    1		push	cx 
    7119 29C5  53                    1		PUSH	BX 
    7120 29C6  B9 0002               1		MOV	CX,offset (??0126-??0125) 
    7121 29C9  BE 29D7 R             1		mov	si,offset ??0125 
    7122 29CC  BB 2963 R             1		MOV	BX,offset STRA 
    7123 29CF  E8 34DE R             1		call	maccod 
    7124 29D2  5B                    1		POP	BX 
    7125 29D3  59                    1		pop	cx 
    7126 29D4  EB 03 90              1		jmp	??0126 
    7127 29D7  8A C4                 1	??0125:	MOV  AL,AH 
    7128 29D9                        1	??0126: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-133


    7129 29D9				cbyte:	compil	0,<MOV  AH,0>,'MOV  AH,0'
    7130 296E                        1	DATASEG	SEGMENT 
    7131 296E  4D 4F 56 20 20 41     1		DB 'MOV  AH,0',0 
    7132 2978                        1	DATASEG ENDS 
    7133 29D9  51                    1		push	cx 
    7134 29DA  53                    1		PUSH	BX 
    7135 29DB  B9 0002               1		MOV	CX,offset (??0128-??0127) 
    7136 29DE  BE 29EC R             1		mov	si,offset ??0127 
    7137 29E1  BB 296E R             1		MOV	BX,offset STRA 
    7138 29E4  E8 34DE R             1		call	maccod 
    7139 29E7  5B                    1		POP	BX 
    7140 29E8  59                    1		pop	cx 
    7141 29E9  EB 03 90              1		jmp	??0128 
    7142 29EC  B4 00                 1	??0127:	MOV  AH,0 
    7143 29EE                        1	??0128: 
    7144 29EE  E9 115C R			jmp	cmaknum
    7145				
    7146				lisp$subru 'low-byte',clowbyte,numarg
    7147 2978                        1	dataseg segment 
    7148 2978  2953 R                1		DW NXTSBR 
    7149 297A  29F1 R                1		dw CODEADDR 
    7150 297C  29F9 R                1		dw clowbyte 
    7151 297E  6C 6F 77 2D 62 79     1	  	DB 'low-byte',0 
    7152 2987                        1	dataseg ends 
    7153 29F1  E8 0F1A R             1		CALL	numarg 
    7154 29F4  B4 00				mov	ah,0
    7155 29F6  E9 05C9 R			jmp	maknum
    7156 29F9				clowbyte:
    7157 29F9  E8 3C59 R			call	cnumar1
    7158 29FC  EB DB				jmp	cbyte
    7159				
    7160				lisp$subru 'peek',cpeek,twonum
    7161 2987                        1	dataseg segment 
    7162 2987  2978 R                1		DW NXTSBR 
    7163 2989  29FE R                1		dw CODEADDR 
    7164 298B  2A0B R                1		dw cpeek 
    7165 298D  70 65 65 6B 00        1	  	DB 'peek',0 
    7166 2992                        1	dataseg ends 
    7167 29FE  E8 0F4B R             1		CALL	twonum 
    7168 2A01  8E C0				mov	es,ax
    7169 2A03  26: 8B 07			mov	ax,es:[bx]
    7170 2A06  B4 00				mov	ah,0
    7171 2A08  E9 05C9 R			jmp	maknum
    7172 2A0B  E8 2A21 R		cpeek:	call	cpeek1
    7173 2A0E  EB C9				jmp	cbyte
    7174				
    7175				lisp$subru 'peekw',cpeekw,twonum
    7176 2992                        1	dataseg segment 
    7177 2992  2987 R                1		DW NXTSBR 
    7178 2994  2A10 R                1		dw CODEADDR 
    7179 2996  2A1B R                1		dw cpeekw 
    7180 2998  70 65 65 6B 77 00     1	  	DB 'peekw',0 
    7181 299E                        1	dataseg ends 
    7182 2A10  E8 0F4B R             1		CALL	twonum 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-134


    7183 2A13  8E C0				mov	es,ax
    7184 2A15  26: 8B 07			mov	ax,es:[bx]
    7185 2A18  E9 05C9 R			jmp	maknum
    7186 2A1B  E8 2A21 R		cpeekw:	call	cpeek1
    7187 2A1E  E9 115C R			JMP	CMAKNUM
    7188 2A21  E8 3C6F R		cpeek1:	call	ctwonu1
    7189					compil	0,<MOV ES,AX>,'MOV  ES,AX'
    7190 299E                        1	DATASEG	SEGMENT 
    7191 299E  4D 4F 56 20 20 45     1		DB 'MOV  ES,AX',0 
    7192 29A9                        1	DATASEG ENDS 
    7193 2A24  51                    1		push	cx 
    7194 2A25  53                    1		PUSH	BX 
    7195 2A26  B9 0002               1		MOV	CX,offset (??012A-??0129) 
    7196 2A29  BE 2A37 R             1		mov	si,offset ??0129 
    7197 2A2C  BB 299E R             1		MOV	BX,offset STRA 
    7198 2A2F  E8 34DE R             1		call	maccod 
    7199 2A32  5B                    1		POP	BX 
    7200 2A33  59                    1		pop	cx 
    7201 2A34  EB 03 90              1		jmp	??012A 
    7202 2A37  8E C0                 1	??0129:	MOV ES,AX 
    7203 2A39                        1	??012A: 
    7204					compil	0,<MOV AX,ES:[BX]>,'MOV  AX,ES:[BX]'
    7205 29A9                        1	DATASEG	SEGMENT 
    7206 29A9  4D 4F 56 20 20 41     1		DB 'MOV  AX,ES:[BX]',0 
    7207 29B9                        1	DATASEG ENDS 
    7208 2A39  51                    1		push	cx 
    7209 2A3A  53                    1		PUSH	BX 
    7210 2A3B  B9 0003               1		MOV	CX,offset (??012C-??012B) 
    7211 2A3E  BE 2A4C R             1		mov	si,offset ??012B 
    7212 2A41  BB 29A9 R             1		MOV	BX,offset STRA 
    7213 2A44  E8 34DE R             1		call	maccod 
    7214 2A47  5B                    1		POP	BX 
    7215 2A48  59                    1		pop	cx 
    7216 2A49  EB 04 90              1		jmp	??012C 
    7217 2A4C  26: 8B 07             1	??012B:	MOV AX,ES:[BX] 
    7218 2A4F                        1	??012C: 
    7219 2A4F  C3				ret
    7220				
    7221				lisp$subru 'poke',cpoke
    7222 29B9                        1	dataseg segment 
    7223 29B9  2992 R                1		DW NXTSBR 
    7224 29BB  2A50 R                1		dw CODEADDR 
    7225 29BD  2AC1 R                1		dw cpoke 
    7226 29BF  70 6F 6B 65 00        1	  	DB 'poke',0 
    7227 29C4                        1	dataseg ends 
    7228 2A50  E8 0F1A R			call	numarg
    7229 2A53  50				push	ax
    7230 2A54  E8 0F1A R			call	numarg
    7231 2A57  50				push	ax
    7232 2A58  E8 0F1A R			call	numarg
    7233 2A5B  5B				pop	bx
    7234 2A5C  07				pop	es
    7235 2A5D  26: 88 07			mov	es:[bx],al
    7236 2A60  E9 019E R			jmp	tret
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-135


    7237				lisp$subru 'pokew',cpokew
    7238 29C4                        1	dataseg segment 
    7239 29C4  29B9 R                1		DW NXTSBR 
    7240 29C6  2A63 R                1		dw CODEADDR 
    7241 29C8  2ADB R                1		dw cpokew 
    7242 29CA  70 6F 6B 65 77 00     1	  	DB 'pokew',0 
    7243 29D0                        1	dataseg ends 
    7244 2A63  E8 0F1A R			call	numarg
    7245 2A66  50				push	ax
    7246 2A67  E8 0F1A R			call	numarg
    7247 2A6A  50				push	ax
    7248 2A6B  E8 0F1A R			call	numarg
    7249 2A6E  5B				pop	bx
    7250 2A6F  07				pop	es
    7251 2A70  26: 89 07			mov	es:[bx],ax
    7252 2A73  E9 019E R			jmp	tret
    7253 2A76				cpoke1:
    7254					car$cdr	a,b,bx
    7255 2A76  E8 0DCB R             3		CALL	NEWCARabx 
    7256 2A79  E8 022A R             3		CALL	NEWCDRb 
    7257 2A7C  53				push	bx
    7258 2A7D  E8 3D15 R			call	numeriz
    7259 2A80  E8 382F R			call	push_ax
    7260 2A83  5B				pop	bx
    7261					car$cdr	a,b,bx
    7262 2A84  E8 0DCB R             3		CALL	NEWCARabx 
    7263 2A87  E8 022A R             3		CALL	NEWCDRb 
    7264 2A8A  53				push	bx
    7265 2A8B  E8 3D15 R			call	numeriz
    7266 2A8E  E8 382F R			call	push_ax
    7267 2A91  5B				pop	bx
    7268					car	a,bx
    7269 2A92  E8 0DCB R             2		CALL	NEWCARabx 
    7270 2A95  E8 3D15 R			call	numeriz
    7271					compil	0,<POP BX>,'POP  BX'
    7272 29D0                        1	DATASEG	SEGMENT 
    7273 29D0  50 4F 50 20 20 42     1		DB 'POP  BX',0 
    7274 29D8                        1	DATASEG ENDS 
    7275 2A98  51                    1		push	cx 
    7276 2A99  53                    1		PUSH	BX 
    7277 2A9A  B9 0001               1		MOV	CX,offset (??012E-??012D) 
    7278 2A9D  BE 2AAB R             1		mov	si,offset ??012D 
    7279 2AA0  BB 29D0 R             1		MOV	BX,offset STRA 
    7280 2AA3  E8 34DE R             1		call	maccod 
    7281 2AA6  5B                    1		POP	BX 
    7282 2AA7  59                    1		pop	cx 
    7283 2AA8  EB 02 90              1		jmp	??012E 
    7284 2AAB  5B                    1	??012D:	POP BX 
    7285 2AAC                        1	??012E: 
    7286					compil	0,<POP ES>,'POP  ES'
    7287 29D8                        1	DATASEG	SEGMENT 
    7288 29D8  50 4F 50 20 20 45     1		DB 'POP  ES',0 
    7289 29E0                        1	DATASEG ENDS 
    7290 2AAC  51                    1		push	cx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-136


    7291 2AAD  53                    1		PUSH	BX 
    7292 2AAE  B9 0001               1		MOV	CX,offset (??0130-??012F) 
    7293 2AB1  BE 2ABF R             1		mov	si,offset ??012F 
    7294 2AB4  BB 29D8 R             1		MOV	BX,offset STRA 
    7295 2AB7  E8 34DE R             1		call	maccod 
    7296 2ABA  5B                    1		POP	BX 
    7297 2ABB  59                    1		pop	cx 
    7298 2ABC  EB 02 90              1		jmp	??0130 
    7299 2ABF  07                    1	??012F:	POP ES 
    7300 2AC0                        1	??0130: 
    7301 2AC0  C3				RET
    7302 2AC1				cpoke:
    7303 2AC1  E8 2A76 R			call	cpoke1
    7304					compil  0,<MOV  ES:[BX],AL>,'MOV  ES:[BX],AL'
    7305 29E0                        1	DATASEG	SEGMENT 
    7306 29E0  4D 4F 56 20 20 45     1		DB 'MOV  ES:[BX],AL',0 
    7307 29F0                        1	DATASEG ENDS 
    7308 2AC4  51                    1		push	cx 
    7309 2AC5  53                    1		PUSH	BX 
    7310 2AC6  B9 0003               1		MOV	CX,offset (??0132-??0131) 
    7311 2AC9  BE 2AD7 R             1		mov	si,offset ??0131 
    7312 2ACC  BB 29E0 R             1		MOV	BX,offset STRA 
    7313 2ACF  E8 34DE R             1		call	maccod 
    7314 2AD2  5B                    1		POP	BX 
    7315 2AD3  59                    1		pop	cx 
    7316 2AD4  EB 04 90              1		jmp	??0132 
    7317 2AD7  26: 88 07             1	??0131:	MOV  ES:[BX],AL 
    7318 2ADA                        1	??0132: 
    7319 2ADA  C3				RET
    7320 2ADB				cpokew:	
    7321 2ADB  E8 2A76 R			call	cpoke1
    7322					compil  0,<MOV  ES:[BX],AX>,'MOV  ES:[BX],AX'
    7323 29F0                        1	DATASEG	SEGMENT 
    7324 29F0  4D 4F 56 20 20 45     1		DB 'MOV  ES:[BX],AX',0 
    7325 2A00                        1	DATASEG ENDS 
    7326 2ADE  51                    1		push	cx 
    7327 2ADF  53                    1		PUSH	BX 
    7328 2AE0  B9 0003               1		MOV	CX,offset (??0134-??0133) 
    7329 2AE3  BE 2AF1 R             1		mov	si,offset ??0133 
    7330 2AE6  BB 29F0 R             1		MOV	BX,offset STRA 
    7331 2AE9  E8 34DE R             1		call	maccod 
    7332 2AEC  5B                    1		POP	BX 
    7333 2AED  59                    1		pop	cx 
    7334 2AEE  EB 04 90              1		jmp	??0134 
    7335 2AF1  26: 89 07             1	??0133:	MOV  ES:[BX],AX 
    7336 2AF4                        1	??0134: 
    7337 2AF4  C3				RET
    7338				
    7339				lisp$subru 'input-byte',cnumarg,numarg
    7340 2A00                        1	dataseg segment 
    7341 2A00  29C4 R                1		DW NXTSBR 
    7342 2A02  2AF5 R                1		dw CODEADDR 
    7343 2A04  3C68 R                1		dw cnumarg 
    7344 2A06  69 6E 70 75 74 2D     1	  	DB 'input-byte',0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-137


    7345 2A11                        1	dataseg ends 
    7346 2AF5  E8 0F1A R             1		CALL	numarg 
    7347 2AF8  8B D0				mov	dx,ax
    7348 2AFA  EC				in	al,dx
    7349 2AFB  B4 00				mov	ah,0
    7350 2AFD  E9 05C9 R			jmp	maknum
    7351				
    7352				lisp$subru 'output-byte',ctwonum,twonum
    7353 2A11                        1	dataseg segment 
    7354 2A11  2A00 R                1		DW NXTSBR 
    7355 2A13  2B00 R                1		dw CODEADDR 
    7356 2A15  3D69 R                1		dw ctwonum 
    7357 2A17  6F 75 74 70 75 74     1	  	DB 'output-byte',0 
    7358 2A23                        1	dataseg ends 
    7359 2B00  E8 0F4B R             1		CALL	twonum 
    7360 2B03  8B D0				mov	dx,ax
    7361 2B05  8B C3				mov	ax,bx
    7362 2B07  EE				out	dx,al
    7363 2B08  E9 019E R			jmp	tret
    7364				lisp$subru 'joystick',cnoarg
    7365 2A23                        1	dataseg segment 
    7366 2A23  2A11 R                1		DW NXTSBR 
    7367 2A25  2B0B R                1		dw CODEADDR 
    7368 2A27  3B6F R                1		dw cnoarg 
    7369 2A29  6A 6F 79 73 74 69     1	  	DB 'joystick',0 
    7370 2A32                        1	dataseg ends 
    7371 2B0B  BA 0201				mov	dx,201h
    7372 2B0E  EE				out	dx,al
    7373 2B0F  BB 0000				mov	bx,0
    7374 2B12  BF 0000				mov	di,0
    7375 2B15  BE 0000				mov	si,0
    7376 2B18  EC			joysti1:in	al,dx
    7377 2B19  A8 03				test	al,3
    7378 2B1B  74 0F				jz	joysti2
    7379 2B1D  A8 01				test	al,1
    7380 2B1F  74 02				jz	x_done
    7381 2B21  8B FB				mov	di,bx
    7382 2B23  A8 02			x_done:	test	al,2
    7383 2B25  74 02				jz	y_done
    7384 2B27  8B F3				mov	si,bx
    7385 2B29  43			y_done:	inc	bx
    7386 2B2A  EB EC				jmp	joysti1
    7387 2B2C  57			joysti2:push	di
    7388 2B2D  8B C6				mov	ax,si
    7389 2B2F  E8 05C9 R			call	maknum
    7390 2B32  5F				pop	di
    7391 2B33  50				push	ax
    7392 2B34  8B C7				mov	ax,di
    7393 2B36  E8 05C9 R			call	maknum
    7394 2B39  5B				pop	bx
    7395 2B3A  E9 05AE R			jmp	cons
    7396				
    7397				any$reg	macro	onereg,str
    7398					local	gggval
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-138


    7399					local   cggval
    7400					LISP$SUBRU str,c&onereg,evalarg
    7401					j$nil	ax,gggval
    7402					call	NUMVAL
    7403					mov	onereg&reg,ax
    7404					jmp	tret
    7405				gggval:	mov	ax,onereg&reg
    7406					jmp	maknum
    7407					dataseg	segment
    7408						onereg&reg	dw	0
    7409					dataseg ends
    7410				c&onereg:
    7411					j$nil	bx,cggval
    7412					car	a,bx
    7413					call	numeriz
    7414					compil  0,<MOV onereg&reg,AX>,<'MOV [',str,'],AX'>
    7415					ret
    7416				cggval:	compil	0,<MOV AX,onereg&reg>,<'MOV AX,[',str,']'>
    7417					jmp	cmaknum
    7418					ret
    7419				 endm
    7420				
    7421				any$reg	ax,'AX-reg'
    7422 2A32                        2	dataseg segment 
    7423 2A32  2A23 R                2		DW NXTSBR 
    7424 2A34  2B3D R                2		dw CODEADDR 
    7425 2A36  2B58 R                2		dw cax 
    7426 2A38  41 58 2D 72 65 67     2	  	DB 'AX-reg',0 
    7427 2A3F                        2	dataseg ends 
    7428 2B3D  E8 0EC7 R             2		CALL	evalarg 
    7429 2B40  3D 0000               2		CMP	ax,0 
    7430 2B43  75 03                 3		JnZ	$+5 
    7431 2B45  EB 0B 90              3		JMP	??0135 
    7432 2B48  90                    3		nop 
    7433 2B49  E8 0F1D R             1		call	NUMVAL 
    7434 2B4C  A3 2A3F R             1		mov	axreg,ax 
    7435 2B4F  E9 019E R             1		jmp	tret 
    7436 2B52  A1 2A3F R             1	??0135:	mov	ax,axreg 
    7437 2B55  E9 05C9 R             1		jmp	maknum 
    7438 2A3F                        1		dataseg	segment 
    7439 2A3F  0000                  1			axreg	dw	0 
    7440 2A41                        1		dataseg ends 
    7441 2B58                        1	cax: 
    7442 2B58  83 FB 00              2		CMP	bx,0 
    7443 2B5B  75 03                 3		JnZ	$+5 
    7444 2B5D  EB 1F 90              3		JMP	??0136 
    7445 2B60  90                    3		nop 
    7446 2B61  E8 0DCB R             3		CALL	NEWCARabx 
    7447 2B64  E8 3D15 R             1		call	numeriz 
    7448 2A41                        2	DATASEG	SEGMENT 
    7449 2A41  4D 4F 56 20 5B 41     2		DB 'MOV [','AX-reg','],AX',0 
    7450 2A51                        2	DATASEG ENDS 
    7451 2B67  51                    2		push	cx 
    7452 2B68  53                    2		PUSH	BX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-139


    7453 2B69  B9 0003               2		MOV	CX,offset (??0138-??0137) 
    7454 2B6C  BE 2B7A R             2		mov	si,offset ??0137 
    7455 2B6F  BB 2A41 R             2		MOV	BX,offset STRA 
    7456 2B72  E8 34DE R             2		call	maccod 
    7457 2B75  5B                    2		POP	BX 
    7458 2B76  59                    2		pop	cx 
    7459 2B77  EB 04 90              2		jmp	??0138 
    7460 2B7A  A3 2A3F R             2	??0137:	MOV axreg,AX 
    7461 2B7D                        2	??0138: 
    7462 2B7D  C3                    1		ret 
    7463 2B7E                        1	??0136:	compil	0,<MOV AX,axreg>,<'MOV AX,[','AX-reg',']'> 
    7464 2A51                        2	DATASEG	SEGMENT 
    7465 2A51  4D 4F 56 20 41 58     2		DB 'MOV AX,[','AX-reg',']',0 
    7466 2A61                        2	DATASEG ENDS 
    7467 2B7E  51                    2		push	cx 
    7468 2B7F  53                    2		PUSH	BX 
    7469 2B80  B9 0003               2		MOV	CX,offset (??013A-??0139) 
    7470 2B83  BE 2B91 R             2		mov	si,offset ??0139 
    7471 2B86  BB 2A51 R             2		MOV	BX,offset STRA 
    7472 2B89  E8 34DE R             2		call	maccod 
    7473 2B8C  5B                    2		POP	BX 
    7474 2B8D  59                    2		pop	cx 
    7475 2B8E  EB 04 90              2		jmp	??013A 
    7476 2B91  A1 2A3F R             2	??0139:	MOV AX,axreg 
    7477 2B94                        2	??013A: 
    7478 2B94  E9 115C R             1		jmp	cmaknum 
    7479 2B97  C3                    1		ret 
    7480				any$reg	bx,'BX-reg'
    7481 2A61                        2	dataseg segment 
    7482 2A61  2A32 R                2		DW NXTSBR 
    7483 2A63  2B98 R                2		dw CODEADDR 
    7484 2A65  2BB3 R                2		dw cbx 
    7485 2A67  42 58 2D 72 65 67     2	  	DB 'BX-reg',0 
    7486 2A6E                        2	dataseg ends 
    7487 2B98  E8 0EC7 R             2		CALL	evalarg 
    7488 2B9B  3D 0000               2		CMP	ax,0 
    7489 2B9E  75 03                 3		JnZ	$+5 
    7490 2BA0  EB 0B 90              3		JMP	??013B 
    7491 2BA3  90                    3		nop 
    7492 2BA4  E8 0F1D R             1		call	NUMVAL 
    7493 2BA7  A3 2A6E R             1		mov	bxreg,ax 
    7494 2BAA  E9 019E R             1		jmp	tret 
    7495 2BAD  A1 2A6E R             1	??013B:	mov	ax,bxreg 
    7496 2BB0  E9 05C9 R             1		jmp	maknum 
    7497 2A6E                        1		dataseg	segment 
    7498 2A6E  0000                  1			bxreg	dw	0 
    7499 2A70                        1		dataseg ends 
    7500 2BB3                        1	cbx: 
    7501 2BB3  83 FB 00              2		CMP	bx,0 
    7502 2BB6  75 03                 3		JnZ	$+5 
    7503 2BB8  EB 1F 90              3		JMP	??013C 
    7504 2BBB  90                    3		nop 
    7505 2BBC  E8 0DCB R             3		CALL	NEWCARabx 
    7506 2BBF  E8 3D15 R             1		call	numeriz 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-140


    7507 2A70                        2	DATASEG	SEGMENT 
    7508 2A70  4D 4F 56 20 5B 42     2		DB 'MOV [','BX-reg','],AX',0 
    7509 2A80                        2	DATASEG ENDS 
    7510 2BC2  51                    2		push	cx 
    7511 2BC3  53                    2		PUSH	BX 
    7512 2BC4  B9 0003               2		MOV	CX,offset (??013E-??013D) 
    7513 2BC7  BE 2BD5 R             2		mov	si,offset ??013D 
    7514 2BCA  BB 2A70 R             2		MOV	BX,offset STRA 
    7515 2BCD  E8 34DE R             2		call	maccod 
    7516 2BD0  5B                    2		POP	BX 
    7517 2BD1  59                    2		pop	cx 
    7518 2BD2  EB 04 90              2		jmp	??013E 
    7519 2BD5  A3 2A6E R             2	??013D:	MOV bxreg,AX 
    7520 2BD8                        2	??013E: 
    7521 2BD8  C3                    1		ret 
    7522 2BD9                        1	??013C:	compil	0,<MOV AX,bxreg>,<'MOV AX,[','BX-reg',']'> 
    7523 2A80                        2	DATASEG	SEGMENT 
    7524 2A80  4D 4F 56 20 41 58     2		DB 'MOV AX,[','BX-reg',']',0 
    7525 2A90                        2	DATASEG ENDS 
    7526 2BD9  51                    2		push	cx 
    7527 2BDA  53                    2		PUSH	BX 
    7528 2BDB  B9 0003               2		MOV	CX,offset (??0140-??013F) 
    7529 2BDE  BE 2BEC R             2		mov	si,offset ??013F 
    7530 2BE1  BB 2A80 R             2		MOV	BX,offset STRA 
    7531 2BE4  E8 34DE R             2		call	maccod 
    7532 2BE7  5B                    2		POP	BX 
    7533 2BE8  59                    2		pop	cx 
    7534 2BE9  EB 04 90              2		jmp	??0140 
    7535 2BEC  A1 2A6E R             2	??013F:	MOV AX,bxreg 
    7536 2BEF                        2	??0140: 
    7537 2BEF  E9 115C R             1		jmp	cmaknum 
    7538 2BF2  C3                    1		ret 
    7539				any$reg	cx,'CX-reg'
    7540 2A90                        2	dataseg segment 
    7541 2A90  2A61 R                2		DW NXTSBR 
    7542 2A92  2BF3 R                2		dw CODEADDR 
    7543 2A94  2C0E R                2		dw ccx 
    7544 2A96  43 58 2D 72 65 67     2	  	DB 'CX-reg',0 
    7545 2A9D                        2	dataseg ends 
    7546 2BF3  E8 0EC7 R             2		CALL	evalarg 
    7547 2BF6  3D 0000               2		CMP	ax,0 
    7548 2BF9  75 03                 3		JnZ	$+5 
    7549 2BFB  EB 0B 90              3		JMP	??0141 
    7550 2BFE  90                    3		nop 
    7551 2BFF  E8 0F1D R             1		call	NUMVAL 
    7552 2C02  A3 2A9D R             1		mov	cxreg,ax 
    7553 2C05  E9 019E R             1		jmp	tret 
    7554 2C08  A1 2A9D R             1	??0141:	mov	ax,cxreg 
    7555 2C0B  E9 05C9 R             1		jmp	maknum 
    7556 2A9D                        1		dataseg	segment 
    7557 2A9D  0000                  1			cxreg	dw	0 
    7558 2A9F                        1		dataseg ends 
    7559 2C0E                        1	ccx: 
    7560 2C0E  83 FB 00              2		CMP	bx,0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-141


    7561 2C11  75 03                 3		JnZ	$+5 
    7562 2C13  EB 1F 90              3		JMP	??0142 
    7563 2C16  90                    3		nop 
    7564 2C17  E8 0DCB R             3		CALL	NEWCARabx 
    7565 2C1A  E8 3D15 R             1		call	numeriz 
    7566 2A9F                        2	DATASEG	SEGMENT 
    7567 2A9F  4D 4F 56 20 5B 43     2		DB 'MOV [','CX-reg','],AX',0 
    7568 2AAF                        2	DATASEG ENDS 
    7569 2C1D  51                    2		push	cx 
    7570 2C1E  53                    2		PUSH	BX 
    7571 2C1F  B9 0003               2		MOV	CX,offset (??0144-??0143) 
    7572 2C22  BE 2C30 R             2		mov	si,offset ??0143 
    7573 2C25  BB 2A9F R             2		MOV	BX,offset STRA 
    7574 2C28  E8 34DE R             2		call	maccod 
    7575 2C2B  5B                    2		POP	BX 
    7576 2C2C  59                    2		pop	cx 
    7577 2C2D  EB 04 90              2		jmp	??0144 
    7578 2C30  A3 2A9D R             2	??0143:	MOV cxreg,AX 
    7579 2C33                        2	??0144: 
    7580 2C33  C3                    1		ret 
    7581 2C34                        1	??0142:	compil	0,<MOV AX,cxreg>,<'MOV AX,[','CX-reg',']'> 
    7582 2AAF                        2	DATASEG	SEGMENT 
    7583 2AAF  4D 4F 56 20 41 58     2		DB 'MOV AX,[','CX-reg',']',0 
    7584 2ABF                        2	DATASEG ENDS 
    7585 2C34  51                    2		push	cx 
    7586 2C35  53                    2		PUSH	BX 
    7587 2C36  B9 0003               2		MOV	CX,offset (??0146-??0145) 
    7588 2C39  BE 2C47 R             2		mov	si,offset ??0145 
    7589 2C3C  BB 2AAF R             2		MOV	BX,offset STRA 
    7590 2C3F  E8 34DE R             2		call	maccod 
    7591 2C42  5B                    2		POP	BX 
    7592 2C43  59                    2		pop	cx 
    7593 2C44  EB 04 90              2		jmp	??0146 
    7594 2C47  A1 2A9D R             2	??0145:	MOV AX,cxreg 
    7595 2C4A                        2	??0146: 
    7596 2C4A  E9 115C R             1		jmp	cmaknum 
    7597 2C4D  C3                    1		ret 
    7598				any$reg	dx,'DX-reg'
    7599 2ABF                        2	dataseg segment 
    7600 2ABF  2A90 R                2		DW NXTSBR 
    7601 2AC1  2C4E R                2		dw CODEADDR 
    7602 2AC3  2C69 R                2		dw cdx 
    7603 2AC5  44 58 2D 72 65 67     2	  	DB 'DX-reg',0 
    7604 2ACC                        2	dataseg ends 
    7605 2C4E  E8 0EC7 R             2		CALL	evalarg 
    7606 2C51  3D 0000               2		CMP	ax,0 
    7607 2C54  75 03                 3		JnZ	$+5 
    7608 2C56  EB 0B 90              3		JMP	??0147 
    7609 2C59  90                    3		nop 
    7610 2C5A  E8 0F1D R             1		call	NUMVAL 
    7611 2C5D  A3 2ACC R             1		mov	dxreg,ax 
    7612 2C60  E9 019E R             1		jmp	tret 
    7613 2C63  A1 2ACC R             1	??0147:	mov	ax,dxreg 
    7614 2C66  E9 05C9 R             1		jmp	maknum 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-142


    7615 2ACC                        1		dataseg	segment 
    7616 2ACC  0000                  1			dxreg	dw	0 
    7617 2ACE                        1		dataseg ends 
    7618 2C69                        1	cdx: 
    7619 2C69  83 FB 00              2		CMP	bx,0 
    7620 2C6C  75 03                 3		JnZ	$+5 
    7621 2C6E  EB 1F 90              3		JMP	??0148 
    7622 2C71  90                    3		nop 
    7623 2C72  E8 0DCB R             3		CALL	NEWCARabx 
    7624 2C75  E8 3D15 R             1		call	numeriz 
    7625 2ACE                        2	DATASEG	SEGMENT 
    7626 2ACE  4D 4F 56 20 5B 44     2		DB 'MOV [','DX-reg','],AX',0 
    7627 2ADE                        2	DATASEG ENDS 
    7628 2C78  51                    2		push	cx 
    7629 2C79  53                    2		PUSH	BX 
    7630 2C7A  B9 0003               2		MOV	CX,offset (??014A-??0149) 
    7631 2C7D  BE 2C8B R             2		mov	si,offset ??0149 
    7632 2C80  BB 2ACE R             2		MOV	BX,offset STRA 
    7633 2C83  E8 34DE R             2		call	maccod 
    7634 2C86  5B                    2		POP	BX 
    7635 2C87  59                    2		pop	cx 
    7636 2C88  EB 04 90              2		jmp	??014A 
    7637 2C8B  A3 2ACC R             2	??0149:	MOV dxreg,AX 
    7638 2C8E                        2	??014A: 
    7639 2C8E  C3                    1		ret 
    7640 2C8F                        1	??0148:	compil	0,<MOV AX,dxreg>,<'MOV AX,[','DX-reg',']'> 
    7641 2ADE                        2	DATASEG	SEGMENT 
    7642 2ADE  4D 4F 56 20 41 58     2		DB 'MOV AX,[','DX-reg',']',0 
    7643 2AEE                        2	DATASEG ENDS 
    7644 2C8F  51                    2		push	cx 
    7645 2C90  53                    2		PUSH	BX 
    7646 2C91  B9 0003               2		MOV	CX,offset (??014C-??014B) 
    7647 2C94  BE 2CA2 R             2		mov	si,offset ??014B 
    7648 2C97  BB 2ADE R             2		MOV	BX,offset STRA 
    7649 2C9A  E8 34DE R             2		call	maccod 
    7650 2C9D  5B                    2		POP	BX 
    7651 2C9E  59                    2		pop	cx 
    7652 2C9F  EB 04 90              2		jmp	??014C 
    7653 2CA2  A1 2ACC R             2	??014B:	MOV AX,dxreg 
    7654 2CA5                        2	??014C: 
    7655 2CA5  E9 115C R             1		jmp	cmaknum 
    7656 2CA8  C3                    1		ret 
    7657				any$reg	ES,'ES-reg'
    7658 2AEE                        2	dataseg segment 
    7659 2AEE  2ABF R                2		DW NXTSBR 
    7660 2AF0  2CA9 R                2		dw CODEADDR 
    7661 2AF2  2CC4 R                2		dw cES 
    7662 2AF4  45 53 2D 72 65 67     2	  	DB 'ES-reg',0 
    7663 2AFB                        2	dataseg ends 
    7664 2CA9  E8 0EC7 R             2		CALL	evalarg 
    7665 2CAC  3D 0000               2		CMP	ax,0 
    7666 2CAF  75 03                 3		JnZ	$+5 
    7667 2CB1  EB 0B 90              3		JMP	??014D 
    7668 2CB4  90                    3		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-143


    7669 2CB5  E8 0F1D R             1		call	NUMVAL 
    7670 2CB8  A3 2AFB R             1		mov	ESreg,ax 
    7671 2CBB  E9 019E R             1		jmp	tret 
    7672 2CBE  A1 2AFB R             1	??014D:	mov	ax,ESreg 
    7673 2CC1  E9 05C9 R             1		jmp	maknum 
    7674 2AFB                        1		dataseg	segment 
    7675 2AFB  0000                  1			ESreg	dw	0 
    7676 2AFD                        1		dataseg ends 
    7677 2CC4                        1	cES: 
    7678 2CC4  83 FB 00              2		CMP	bx,0 
    7679 2CC7  75 03                 3		JnZ	$+5 
    7680 2CC9  EB 1F 90              3		JMP	??014E 
    7681 2CCC  90                    3		nop 
    7682 2CCD  E8 0DCB R             3		CALL	NEWCARabx 
    7683 2CD0  E8 3D15 R             1		call	numeriz 
    7684 2AFD                        2	DATASEG	SEGMENT 
    7685 2AFD  4D 4F 56 20 5B 45     2		DB 'MOV [','ES-reg','],AX',0 
    7686 2B0D                        2	DATASEG ENDS 
    7687 2CD3  51                    2		push	cx 
    7688 2CD4  53                    2		PUSH	BX 
    7689 2CD5  B9 0003               2		MOV	CX,offset (??0150-??014F) 
    7690 2CD8  BE 2CE6 R             2		mov	si,offset ??014F 
    7691 2CDB  BB 2AFD R             2		MOV	BX,offset STRA 
    7692 2CDE  E8 34DE R             2		call	maccod 
    7693 2CE1  5B                    2		POP	BX 
    7694 2CE2  59                    2		pop	cx 
    7695 2CE3  EB 04 90              2		jmp	??0150 
    7696 2CE6  A3 2AFB R             2	??014F:	MOV ESreg,AX 
    7697 2CE9                        2	??0150: 
    7698 2CE9  C3                    1		ret 
    7699 2CEA                        1	??014E:	compil	0,<MOV AX,ESreg>,<'MOV AX,[','ES-reg',']'> 
    7700 2B0D                        2	DATASEG	SEGMENT 
    7701 2B0D  4D 4F 56 20 41 58     2		DB 'MOV AX,[','ES-reg',']',0 
    7702 2B1D                        2	DATASEG ENDS 
    7703 2CEA  51                    2		push	cx 
    7704 2CEB  53                    2		PUSH	BX 
    7705 2CEC  B9 0003               2		MOV	CX,offset (??0152-??0151) 
    7706 2CEF  BE 2CFD R             2		mov	si,offset ??0151 
    7707 2CF2  BB 2B0D R             2		MOV	BX,offset STRA 
    7708 2CF5  E8 34DE R             2		call	maccod 
    7709 2CF8  5B                    2		POP	BX 
    7710 2CF9  59                    2		pop	cx 
    7711 2CFA  EB 04 90              2		jmp	??0152 
    7712 2CFD  A1 2AFB R             2	??0151:	MOV AX,ESreg 
    7713 2D00                        2	??0152: 
    7714 2D00  E9 115C R             1		jmp	cmaknum 
    7715 2D03  C3                    1		ret 
    7716				any$reg ds,'DS-reg'
    7717 2B1D                        2	dataseg segment 
    7718 2B1D  2AEE R                2		DW NXTSBR 
    7719 2B1F  2D04 R                2		dw CODEADDR 
    7720 2B21  2D1F R                2		dw cds 
    7721 2B23  44 53 2D 72 65 67     2	  	DB 'DS-reg',0 
    7722 2B2A                        2	dataseg ends 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-144


    7723 2D04  E8 0EC7 R             2		CALL	evalarg 
    7724 2D07  3D 0000               2		CMP	ax,0 
    7725 2D0A  75 03                 3		JnZ	$+5 
    7726 2D0C  EB 0B 90              3		JMP	??0153 
    7727 2D0F  90                    3		nop 
    7728 2D10  E8 0F1D R             1		call	NUMVAL 
    7729 2D13  A3 2B2A R             1		mov	dsreg,ax 
    7730 2D16  E9 019E R             1		jmp	tret 
    7731 2D19  A1 2B2A R             1	??0153:	mov	ax,dsreg 
    7732 2D1C  E9 05C9 R             1		jmp	maknum 
    7733 2B2A                        1		dataseg	segment 
    7734 2B2A  0000                  1			dsreg	dw	0 
    7735 2B2C                        1		dataseg ends 
    7736 2D1F                        1	cds: 
    7737 2D1F  83 FB 00              2		CMP	bx,0 
    7738 2D22  75 03                 3		JnZ	$+5 
    7739 2D24  EB 1F 90              3		JMP	??0154 
    7740 2D27  90                    3		nop 
    7741 2D28  E8 0DCB R             3		CALL	NEWCARabx 
    7742 2D2B  E8 3D15 R             1		call	numeriz 
    7743 2B2C                        2	DATASEG	SEGMENT 
    7744 2B2C  4D 4F 56 20 5B 44     2		DB 'MOV [','DS-reg','],AX',0 
    7745 2B3C                        2	DATASEG ENDS 
    7746 2D2E  51                    2		push	cx 
    7747 2D2F  53                    2		PUSH	BX 
    7748 2D30  B9 0003               2		MOV	CX,offset (??0156-??0155) 
    7749 2D33  BE 2D41 R             2		mov	si,offset ??0155 
    7750 2D36  BB 2B2C R             2		MOV	BX,offset STRA 
    7751 2D39  E8 34DE R             2		call	maccod 
    7752 2D3C  5B                    2		POP	BX 
    7753 2D3D  59                    2		pop	cx 
    7754 2D3E  EB 04 90              2		jmp	??0156 
    7755 2D41  A3 2B2A R             2	??0155:	MOV dsreg,AX 
    7756 2D44                        2	??0156: 
    7757 2D44  C3                    1		ret 
    7758 2D45                        1	??0154:	compil	0,<MOV AX,dsreg>,<'MOV AX,[','DS-reg',']'> 
    7759 2B3C                        2	DATASEG	SEGMENT 
    7760 2B3C  4D 4F 56 20 41 58     2		DB 'MOV AX,[','DS-reg',']',0 
    7761 2B4C                        2	DATASEG ENDS 
    7762 2D45  51                    2		push	cx 
    7763 2D46  53                    2		PUSH	BX 
    7764 2D47  B9 0003               2		MOV	CX,offset (??0158-??0157) 
    7765 2D4A  BE 2D58 R             2		mov	si,offset ??0157 
    7766 2D4D  BB 2B3C R             2		MOV	BX,offset STRA 
    7767 2D50  E8 34DE R             2		call	maccod 
    7768 2D53  5B                    2		POP	BX 
    7769 2D54  59                    2		pop	cx 
    7770 2D55  EB 04 90              2		jmp	??0158 
    7771 2D58  A1 2B2A R             2	??0157:	MOV AX,dsreg 
    7772 2D5B                        2	??0158: 
    7773 2D5B  E9 115C R             1		jmp	cmaknum 
    7774 2D5E  C3                    1		ret 
    7775				any$reg	si,'SI-reg'
    7776 2B4C                        2	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-145


    7777 2B4C  2B1D R                2		DW NXTSBR 
    7778 2B4E  2D5F R                2		dw CODEADDR 
    7779 2B50  2D7A R                2		dw csi 
    7780 2B52  53 49 2D 72 65 67     2	  	DB 'SI-reg',0 
    7781 2B59                        2	dataseg ends 
    7782 2D5F  E8 0EC7 R             2		CALL	evalarg 
    7783 2D62  3D 0000               2		CMP	ax,0 
    7784 2D65  75 03                 3		JnZ	$+5 
    7785 2D67  EB 0B 90              3		JMP	??0159 
    7786 2D6A  90                    3		nop 
    7787 2D6B  E8 0F1D R             1		call	NUMVAL 
    7788 2D6E  A3 2B59 R             1		mov	sireg,ax 
    7789 2D71  E9 019E R             1		jmp	tret 
    7790 2D74  A1 2B59 R             1	??0159:	mov	ax,sireg 
    7791 2D77  E9 05C9 R             1		jmp	maknum 
    7792 2B59                        1		dataseg	segment 
    7793 2B59  0000                  1			sireg	dw	0 
    7794 2B5B                        1		dataseg ends 
    7795 2D7A                        1	csi: 
    7796 2D7A  83 FB 00              2		CMP	bx,0 
    7797 2D7D  75 03                 3		JnZ	$+5 
    7798 2D7F  EB 1F 90              3		JMP	??015A 
    7799 2D82  90                    3		nop 
    7800 2D83  E8 0DCB R             3		CALL	NEWCARabx 
    7801 2D86  E8 3D15 R             1		call	numeriz 
    7802 2B5B                        2	DATASEG	SEGMENT 
    7803 2B5B  4D 4F 56 20 5B 53     2		DB 'MOV [','SI-reg','],AX',0 
    7804 2B6B                        2	DATASEG ENDS 
    7805 2D89  51                    2		push	cx 
    7806 2D8A  53                    2		PUSH	BX 
    7807 2D8B  B9 0003               2		MOV	CX,offset (??015C-??015B) 
    7808 2D8E  BE 2D9C R             2		mov	si,offset ??015B 
    7809 2D91  BB 2B5B R             2		MOV	BX,offset STRA 
    7810 2D94  E8 34DE R             2		call	maccod 
    7811 2D97  5B                    2		POP	BX 
    7812 2D98  59                    2		pop	cx 
    7813 2D99  EB 04 90              2		jmp	??015C 
    7814 2D9C  A3 2B59 R             2	??015B:	MOV sireg,AX 
    7815 2D9F                        2	??015C: 
    7816 2D9F  C3                    1		ret 
    7817 2DA0                        1	??015A:	compil	0,<MOV AX,sireg>,<'MOV AX,[','SI-reg',']'> 
    7818 2B6B                        2	DATASEG	SEGMENT 
    7819 2B6B  4D 4F 56 20 41 58     2		DB 'MOV AX,[','SI-reg',']',0 
    7820 2B7B                        2	DATASEG ENDS 
    7821 2DA0  51                    2		push	cx 
    7822 2DA1  53                    2		PUSH	BX 
    7823 2DA2  B9 0003               2		MOV	CX,offset (??015E-??015D) 
    7824 2DA5  BE 2DB3 R             2		mov	si,offset ??015D 
    7825 2DA8  BB 2B6B R             2		MOV	BX,offset STRA 
    7826 2DAB  E8 34DE R             2		call	maccod 
    7827 2DAE  5B                    2		POP	BX 
    7828 2DAF  59                    2		pop	cx 
    7829 2DB0  EB 04 90              2		jmp	??015E 
    7830 2DB3  A1 2B59 R             2	??015D:	MOV AX,sireg 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-146


    7831 2DB6                        2	??015E: 
    7832 2DB6  E9 115C R             1		jmp	cmaknum 
    7833 2DB9  C3                    1		ret 
    7834				any$reg	di,'DI-reg'
    7835 2B7B                        2	dataseg segment 
    7836 2B7B  2B4C R                2		DW NXTSBR 
    7837 2B7D  2DBA R                2		dw CODEADDR 
    7838 2B7F  2DD5 R                2		dw cdi 
    7839 2B81  44 49 2D 72 65 67     2	  	DB 'DI-reg',0 
    7840 2B88                        2	dataseg ends 
    7841 2DBA  E8 0EC7 R             2		CALL	evalarg 
    7842 2DBD  3D 0000               2		CMP	ax,0 
    7843 2DC0  75 03                 3		JnZ	$+5 
    7844 2DC2  EB 0B 90              3		JMP	??015F 
    7845 2DC5  90                    3		nop 
    7846 2DC6  E8 0F1D R             1		call	NUMVAL 
    7847 2DC9  A3 2B88 R             1		mov	direg,ax 
    7848 2DCC  E9 019E R             1		jmp	tret 
    7849 2DCF  A1 2B88 R             1	??015F:	mov	ax,direg 
    7850 2DD2  E9 05C9 R             1		jmp	maknum 
    7851 2B88                        1		dataseg	segment 
    7852 2B88  0000                  1			direg	dw	0 
    7853 2B8A                        1		dataseg ends 
    7854 2DD5                        1	cdi: 
    7855 2DD5  83 FB 00              2		CMP	bx,0 
    7856 2DD8  75 03                 3		JnZ	$+5 
    7857 2DDA  EB 1F 90              3		JMP	??0160 
    7858 2DDD  90                    3		nop 
    7859 2DDE  E8 0DCB R             3		CALL	NEWCARabx 
    7860 2DE1  E8 3D15 R             1		call	numeriz 
    7861 2B8A                        2	DATASEG	SEGMENT 
    7862 2B8A  4D 4F 56 20 5B 44     2		DB 'MOV [','DI-reg','],AX',0 
    7863 2B9A                        2	DATASEG ENDS 
    7864 2DE4  51                    2		push	cx 
    7865 2DE5  53                    2		PUSH	BX 
    7866 2DE6  B9 0003               2		MOV	CX,offset (??0162-??0161) 
    7867 2DE9  BE 2DF7 R             2		mov	si,offset ??0161 
    7868 2DEC  BB 2B8A R             2		MOV	BX,offset STRA 
    7869 2DEF  E8 34DE R             2		call	maccod 
    7870 2DF2  5B                    2		POP	BX 
    7871 2DF3  59                    2		pop	cx 
    7872 2DF4  EB 04 90              2		jmp	??0162 
    7873 2DF7  A3 2B88 R             2	??0161:	MOV direg,AX 
    7874 2DFA                        2	??0162: 
    7875 2DFA  C3                    1		ret 
    7876 2DFB                        1	??0160:	compil	0,<MOV AX,direg>,<'MOV AX,[','DI-reg',']'> 
    7877 2B9A                        2	DATASEG	SEGMENT 
    7878 2B9A  4D 4F 56 20 41 58     2		DB 'MOV AX,[','DI-reg',']',0 
    7879 2BAA                        2	DATASEG ENDS 
    7880 2DFB  51                    2		push	cx 
    7881 2DFC  53                    2		PUSH	BX 
    7882 2DFD  B9 0003               2		MOV	CX,offset (??0164-??0163) 
    7883 2E00  BE 2E0E R             2		mov	si,offset ??0163 
    7884 2E03  BB 2B9A R             2		MOV	BX,offset STRA 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-147


    7885 2E06  E8 34DE R             2		call	maccod 
    7886 2E09  5B                    2		POP	BX 
    7887 2E0A  59                    2		pop	cx 
    7888 2E0B  EB 04 90              2		jmp	??0164 
    7889 2E0E  A1 2B88 R             2	??0163:	MOV AX,direg 
    7890 2E11                        2	??0164: 
    7891 2E11  E9 115C R             1		jmp	cmaknum 
    7892 2E14  C3                    1		ret 
    7893				purge any$reg
    7894				
    7895				LISP$subru 'INT-',CNUMARG,NUMARG
    7896 2BAA                        1	dataseg segment 
    7897 2BAA  2B7B R                1		DW NXTSBR 
    7898 2BAC  2E15 R                1		dw CODEADDR 
    7899 2BAE  3C68 R                1		dw CNUMARG 
    7900 2BB0  49 4E 54 2D 00        1	  	DB 'INT-',0 
    7901 2BB5                        1	dataseg ends 
    7902 2E15  E8 0F1A R             1		CALL	NUMARG 
    7903 2E18  2E: A2 2E42 R			mov     byte ptr cs:[intarg],al
    7904 2E1C  2E: C6 06 2E41 R CD		mov	byte ptr cs:[intarg-1],11001101b ; INT
    7905 2E22  A1 2A3F R		ldaregs:mov	ax,[axreg]
    7906 2E25  8B 1E 2A6E R			mov	bx,[bxreg]
    7907 2E29  8B 0E 2A9D R			mov	cx,[cxreg]
    7908 2E2D  8B 16 2ACC R			mov	dx,[dxreg]
    7909 2E31  8E 06 2AFB R			mov	es,[esreg]
    7910 2E35  8B 3E 2B88 R			mov	di,[direg]
    7911 2E39  8B 36 2B59 R			mov	si,[sireg]
    7912 2E3D  8E 1E 2B2A R			mov	ds,[dsreg]
    7913 2E41  C3				ret
    7914 2E42  00			intarg:	db	0
    7915 2E43  2E: 8E 1E 3F4D R		setregs:mov	ds,cs:[cs_dataseg]
    7916 2E48  8C 1E 2B2A R			mov	[dsreg],ds
    7917 2E4C  A3 2A3F R			mov	[axreg],ax
    7918 2E4F  89 1E 2A6E R			mov	[bxreg],bx
    7919 2E53  89 0E 2A9D R			mov	[cxreg],cx
    7920 2E57  89 16 2ACC R			mov	[dxreg],dx
    7921 2E5B  8C 06 2AFB R			mov	[esreg],es
    7922 2E5F  89 3E 2B88 R			mov	[direg],di
    7923 2E63  89 36 2B59 R			mov	[sireg],si
    7924 2E67  2E: C6 06 2E41 R C3		mov	byte ptr cs:[intarg-1],0C3H ; ret
    7925					test$resu	nc
    7926 2E6D  B8 0001               1		mov	ax,1 
    7927 2E70  73 01                 1		jnc	$+3 
    7928 2E72  48                    1		dec	ax 
    7929 2E73  C3                    1		ret 
    7930				
    7931				
    7932 2BB5				DATASEG SEGMENT
    7933 2BB5  0000				BPreg dw 0
    7934 2BB7				DATASEG ENDS
    7935				
    7936				LISP$SUBRU 'lisp-DS',cnoarg
    7937 2BB7                        1	dataseg segment 
    7938 2BB7  2BAA R                1		DW NXTSBR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-148


    7939 2BB9  2E74 R                1		dw CODEADDR 
    7940 2BBB  3B6F R                1		dw cnoarg 
    7941 2BBD  6C 69 73 70 2D 44     1	  	DB 'lisp-DS',0 
    7942 2BC5                        1	dataseg ends 
    7943 2E74  8C D8				mov	ax,ds
    7944 2E76  E9 05C9 R			jmp	maknum
    7945				LISP$SUBRU 'lisp-CS',cnoarg
    7946 2BC5                        1	dataseg segment 
    7947 2BC5  2BB7 R                1		DW NXTSBR 
    7948 2BC7  2E79 R                1		dw CODEADDR 
    7949 2BC9  3B6F R                1		dw cnoarg 
    7950 2BCB  6C 69 73 70 2D 43     1	  	DB 'lisp-CS',0 
    7951 2BD3                        1	dataseg ends 
    7952 2E79  8C C8				mov	ax,cs
    7953 2E7B  E9 05C9 R			jmp	maknum
    7954				
    7955				lisp$subru 'plm-call-far',cplmcall
    7956 2BD3                        1	dataseg segment 
    7957 2BD3  2BC5 R                1		DW NXTSBR 
    7958 2BD5  2E7E R                1		dw CODEADDR 
    7959 2BD7  2ED2 R                1		dw cplmcall 
    7960 2BD9  70 6C 6D 2D 63 61     1	  	DB 'plm-call-far',0 
    7961 2BE6                        1	dataseg ends 
    7962 2E7E  89 26 2BB5 R			mov	[BPREG],SP
    7963 2E82  E8 0F1A R			CALL	NUMARG
    7964 2E85  2E: A3 2EA9 R			MOV	CS:[PLMSEG],AX
    7965 2E89  E8 0F1A R			CALL	NUMARG
    7966 2E8C  2E: A3 2EA7 R			MOV	CS:[PLMOFF],AX
    7967 2E90  E8 0EC7 R		plMARG:	call	evalarg
    7968					j$nil	ax,nomorearg
    7969 2E93  3D 0000               1		CMP	ax,0 
    7970 2E96  75 03                 2		JnZ	$+5 
    7971 2E98  EB 08 90              2		JMP	nomorearg 
    7972 2E9B  90                    2		nop 
    7973 2E9C  E8 0F1D R			call	NUMVAL
    7974 2E9F  50				push	AX
    7975 2EA0  EB EE				jmp	plmarg
    7976 2EA2				NOMOREARG:
    7977 2EA2  8B 2E 2BB5 R			MOV	BP,[BPREG]
    7978 2EA6  9A				db 9AH ; CALL FAR
    7979 2EA7  0000				plmoff	dw 0
    7980 2EA9  0000				plmseg  dw 0
    7981 2EAB  EB 96				jmp	SETREGS
    7982				
    7983 2EAD				eval_C_num:
    7984					car$cdr	a,b,bx
    7985 2EAD  E8 0DCB R             3		CALL	NEWCARabx 
    7986 2EB0  E8 022A R             3		CALL	NEWCDRb 
    7987 2EB3  53				push	bx
    7988 2EB4  E8 0CA5 R			call	eval
    7989 2EB7  E8 0F1D R			call	numval
    7990 2EBA  5B				pop	bx
    7991 2EBB  C3				ret
    7992				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-149


    7993 2EBC				pus_nums:
    7994					R$NIL	BX
    7995 2EBC  83 FB 00              1		CMP	BX,0 
    7996 2EBF  75 01                 2		JNZ	$+3 
    7997 2EC1  C3                    2		RET 
    7998					car$cdr	a,b,bx
    7999 2EC2  E8 0DCB R             3		CALL	NEWCARabx 
    8000 2EC5  E8 022A R             3		CALL	NEWCDRb 
    8001 2EC8  53				push	bx
    8002 2EC9  E8 3D15 R			call	numeriz
    8003 2ECC  E8 382F R			call	push_ax
    8004 2ECF  5B				pop	bx
    8005 2ED0  EB EA				jmp	pus_nums
    8006				
    8007 2ED2				cplmcall:
    8008 2ED2  53				push	bx
    8009					compil	0,<mov	[BPREG],SP>,'MOV  [BPREG],SP'
    8010 2BE6                        1	DATASEG	SEGMENT 
    8011 2BE6  4D 4F 56 20 20 5B     1		DB 'MOV  [BPREG],SP',0 
    8012 2BF6                        1	DATASEG ENDS 
    8013 2ED3  51                    1		push	cx 
    8014 2ED4  53                    1		PUSH	BX 
    8015 2ED5  B9 0004               1		MOV	CX,offset (??0166-??0165) 
    8016 2ED8  BE 2EE6 R             1		mov	si,offset ??0165 
    8017 2EDB  BB 2BE6 R             1		MOV	BX,offset STRA 
    8018 2EDE  E8 34DE R             1		call	maccod 
    8019 2EE1  5B                    1		POP	BX 
    8020 2EE2  59                    1		pop	cx 
    8021 2EE3  EB 05 90              1		jmp	??0166 
    8022 2EE6  89 26 2BB5 R          1	??0165:	mov	[BPREG],SP 
    8023 2EEA                        1	??0166: 
    8024 2EEA  5B				pop	bx
    8025 2EEB  E8 2EAD R			call	eval_C_num
    8026 2EEE  2E: A3 2EA9 R			MOV	CS:[PLMSEG],AX
    8027 2EF2  E8 2EAD R			call	eval_c_num
    8028 2EF5  2E: A3 2EA7 R			MOV	CS:[PLMOFF],AX
    8029 2EF9  E8 2EBC R			call	pus_nums
    8030					compil	0,<MOV	BP,[BPREG]>,'MOV  BP,[BPREG]'
    8031 2BF6                        1	DATASEG	SEGMENT 
    8032 2BF6  4D 4F 56 20 20 42     1		DB 'MOV  BP,[BPREG]',0 
    8033 2C06                        1	DATASEG ENDS 
    8034 2EFC  51                    1		push	cx 
    8035 2EFD  53                    1		PUSH	BX 
    8036 2EFE  B9 0004               1		MOV	CX,offset (??0168-??0167) 
    8037 2F01  BE 2F0F R             1		mov	si,offset ??0167 
    8038 2F04  BB 2BF6 R             1		MOV	BX,offset STRA 
    8039 2F07  E8 34DE R             1		call	maccod 
    8040 2F0A  5B                    1		POP	BX 
    8041 2F0B  59                    1		pop	cx 
    8042 2F0C  EB 05 90              1		jmp	??0168 
    8043 2F0F  8B 2E 2BB5 R          1	??0167:	MOV	BP,[BPREG] 
    8044 2F13                        1	??0168: 
    8045					compil  1,<db 9AH>,'CALL FAR '
    8046 2C06                        1	DATASEG	SEGMENT 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-150


    8047 2C06  43 41 4C 4C 20 46     1		DB 'CALL FAR ',0 
    8048 2C10                        1	DATASEG ENDS 
    8049 2F13  51                    1		push	cx 
    8050 2F14  53                    1		PUSH	BX 
    8051 2F15  B9 0001               1		mov	cx,1 
    8052 2F18  BE 2F26 R             1		mov	si,offset ??0169 
    8053 2F1B  BB 2C06 R             1		MOV	BX,offset STRA 
    8054 2F1E  E8 34DE R             1		call	maccod 
    8055 2F21  5B                    1		POP	BX 
    8056 2F22  59                    1		pop	cx 
    8057 2F23  EB 02 90              1		jmp	??016A 
    8058 2F26  9A                    1	??0169:	db 9AH 
    8059 2F27                        1	??016A: 
    8060 2F27  2E: A1 2EA7 R			MOV	AX,CS:[PLMOFF]
    8061 2F2B  E8 3547 R			call	cword
    8062					comptext '/'
    8063 2F2E  8A 16 2CFE R          1		mov	dl,[codebug] 
    8064 2F32  80 FA 00              1		cmp	dl,0 
    8065 2F35  74 08                 1		jz	??016B 
    8066 2C10                        2	dataseg segment 
    8067 2C10  2F 00                 2		DB '/',0 
    8068 2C12                        2	dataseg ends 
    8069 2F37  53                    2		push	bx 
    8070 2F38  BB 2C10 R             2		mov	bx,offset tempaddr 
    8071 2F3B  E8 018C R             2		CALL	PRINTS 
    8072 2F3E  5B                    2		pop	bx 
    8073 2F3F                        1	??016B: 
    8074 2F3F  2E: A1 2EA9 R			MOV	AX,CS:[PLMSEG]
    8075 2F43  E8 3547 R			call	cword
    8076					cocall	SETREGS,'SETREGS'
    8077 2F46  B8 2E43 R             1		mov	ax,offset SETREGS 
    8078 2F49  E8 35FD R             1		call	ccall 
    8079 2F4C  8A 16 2CFE R          1		mov	dl,[codebug] 
    8080 2F50  80 FA 00              1		cmp	dl,0 
    8081 2F53  74 10                 1		jz	??016C 
    8082 2C12                        2	dataseg segment 
    8083 2C12  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    8084 2C1B                        2	dataseg ends 
    8085 2F55  53                    2		push	bx 
    8086 2F56  BB 2C12 R             2		mov	bx,offset tempaddr 
    8087 2F59  E8 018C R             2		CALL	PRINTS 
    8088 2F5C  5B                    2		pop	bx 
    8089 2C1B                        2	dataseg segment 
    8090 2C1B  53 45 54 52 45 47     2		DB 'SETREGS',0 
    8091 2C23                        2	dataseg ends 
    8092 2F5D  53                    2		push	bx 
    8093 2F5E  BB 2C1B R             2		mov	bx,offset tempaddr 
    8094 2F61  E8 018C R             2		CALL	PRINTS 
    8095 2F64  5B                    2		pop	bx 
    8096 2F65                        1	??016C: 
    8097 2F65  C3				RET
    8098				
    8099				
    8100				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-151


    8101				;================================================
    8102				; grafiikka
    8103				IFNDEF	DXLISP
    8104 2C23				dataseg segment
    8105 2C23  0000				Egabx dw 0
    8106 2C25  01				color db 1
    8107 2C26  0000				x_origo dw 0
    8108 2C28  0000				y_origo dw 0
    8109 2C2A  03E8				x_max dw 1000
    8110 2C2C  01F4				y_max dw 500
    8111 2C2E  0000				X_loc dw 0
    8112 2C30  0000				y_LOC DW 0
    8113 2C32  0000				X_YLOS	DW 0
    8114 2C34  0000				Y_YLOS	DW 0
    8115 2C36  0000				delta_x	dw 0
    8116 2C38  0000				DELTA_Y	DW 0
    8117 2C3A  0000				X_APU	DW 0
    8118 2C3C  0000				Y_APU	DW 0
    8119 2C3E  0000				MAXI	DW 0
    8120 2C40  0000				EPOS	DW 0
    8121 2C42  0000				ENEG	DW 0
    8122 2C44  0000				E	DW 0
    8123 2C46  00				DISPMODE DB 0
    8124 2C47  005A				V90	DW 90
    8125 2C49  00				g_char_mode db 0
    8126 2C4A				dataseg ends
    8127				
    8128				lisp$subru 'g-char-mode',cnumarg,numarg
    8129 2C4A                        1	dataseg segment 
    8130 2C4A  2BD3 R                1		DW NXTSBR 
    8131 2C4C  2F66 R                1		dw CODEADDR 
    8132 2C4E  3C68 R                1		dw cnumarg 
    8133 2C50  67 2D 63 68 61 72     1	  	DB 'g-char-mode',0 
    8134 2C5C                        1	dataseg ends 
    8135 2F66  E8 0F1A R             1		CALL	numarg 
    8136 2F69  A2 2C49 R			Mov	[g_char_mode],al
    8137 2F6C  E9 019E R			JMP	TRET
    8138				
    8139				lisp$subru 'display-mode',cnumarg,numarg
    8140 2C5C                        1	dataseg segment 
    8141 2C5C  2C4A R                1		DW NXTSBR 
    8142 2C5E  2F6F R                1		dw CODEADDR 
    8143 2C60  3C68 R                1		dw cnumarg 
    8144 2C62  64 69 73 70 6C 61     1	  	DB 'display-mode',0 
    8145 2C6F                        1	dataseg ends 
    8146 2F6F  E8 0F1A R             1		CALL	numarg 
    8147 2F72  A2 2C46 R			mov	[dispmode],al
    8148 2F75  3C 63				cmp	al,99
    8149 2F77  74 0A				jz	nokpix3
    8150 2F79  3C 80				CMP	AL,80h
    8151 2F7B  74 14				JZ	HGC
    8152 2F7D  24 7F				and	al,7FH
    8153 2F7F  B4 00				mov	AH,0
    8154 2F81  CD 10				INT	10H
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-152


    8155 2F83  C6 06 2C49 R 00		nokpix3:Mov	[g_char_mode],0
    8156 2F88  E9 019E R			JMP	TRET
    8157				
    8158 2F8B  9A			hgc2:	db 9ah
    8159 2F8C  0000				dw 0
    8160 2F8E  0000				dw 0
    8161 2F90  C3				ret
    8162				
    8163 2F91  C6 06 2C49 R 00		HGC:	Mov	[g_char_mode],0
    8164 2F96  B8 B000				MOV	AX,0B000h
    8165 2F99  8E C0				MOV	ES,AX
    8166 2F9B  B9 FFFF				mOV	CX,0FFFFH
    8167 2F9E  BF 0000				mov	di,0
    8168 2FA1  B0 00				mov	al,0
    8169 2FA3  F3/ AA				rep 	stosb
    8170				
    8171 2FA5  33 C0				XOR	AX,AX
    8172 2FA7  8E C0				MOV	ES,AX
    8173 2FA9  26: C4 36 03A8			LES	SI,ES:[3A8h]
    8174 2FAE  26: C4 34			LES	SI,ES:[SI]
    8175 2FB1  26: C4 74 34			LES	SI,ES:[SI+34h]
    8176 2FB5  26: C4 74 04			LES	SI,ES:[SI+4h]
    8177 2FB9  2E: 89 36 2F8C R			mov	word ptr cs:[hgc2+1],si
    8178 2FBE  2E: 8C 06 2F8E R			mov	word ptr cs:[hgc2+3],es
    8179 2FC3  B4 15				MOV	AH,21
    8180 2FC5  B3 03				MOV	BL,3
    8181 2FC7  E8 2F8B R			CALL	hgc2
    8182 2FCA  B4 1D				MOV	AH,29
    8183 2FCC  E8 2F8B R			call	hgc2
    8184 2FCF  E9 019E R			JMP	TRET
    8185				
    8186				lisp$subru 'color',cnumarg,numarg
    8187 2C6F                        1	dataseg segment 
    8188 2C6F  2C5C R                1		DW NXTSBR 
    8189 2C71  2FD2 R                1		dw CODEADDR 
    8190 2C73  3C68 R                1		dw cnumarg 
    8191 2C75  63 6F 6C 6F 72 00     1	  	DB 'color',0 
    8192 2C7B                        1	dataseg ends 
    8193 2FD2  E8 0F1A R             1		CALL	numarg 
    8194 2FD5  A2 2C25 R			mov	[color],aL
    8195 2FD8  C3				ret
    8196				LISP$SUBRU 'point',ctwonum,twonum
    8197 2C7B                        1	dataseg segment 
    8198 2C7B  2C6F R                1		DW NXTSBR 
    8199 2C7D  2FD9 R                1		dw CODEADDR 
    8200 2C7F  3D69 R                1		dw ctwonum 
    8201 2C81  70 6F 69 6E 74 00     1	  	DB 'point',0 
    8202 2C87                        1	dataseg ends 
    8203 2FD9  E8 0F4B R             1		CALL	twonum 
    8204 2FDC  A3 2C2E R		 	mov	[x_loc],ax
    8205 2FDF  89 1E 2C30 R			mov	[y_loc],bx
    8206 2FE3  B8 0001				mov	ax,t
    8207 2FE6  C3				ret
    8208				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-153


    8209				lisp$subru 'draw',ctwonum,twonum
    8210 2C87                        1	dataseg segment 
    8211 2C87  2C7B R                1		DW NXTSBR 
    8212 2C89  2FE7 R                1		dw CODEADDR 
    8213 2C8B  3D69 R                1		dw ctwonum 
    8214 2C8D  64 72 61 77 00        1	  	DB 'draw',0 
    8215 2C92                        1	dataseg ends 
    8216 2FE7  E8 0F4B R             1		CALL	twonum 
    8217 2FEA  B9 0001				mov	cx,1
    8218 2FED  89 0E 2C32 R			mov	[x_ylos],cx
    8219 2FF1  89 0E 2C34 R			mov	[y_ylos],cx
    8220 2FF5  2B 06 2C2E R			SUB	AX,[X_LOC]
    8221 2FF9  2B 1E 2C30 R			SUB	BX,[Y_LOC]
    8222 2FFD  A9 8000				TEST	AX,8000H
    8223 3000  74 08				JZ	SK0
    8224 3002  C7 06 2C32 R FFFF		MOV	[X_YLOS],-1
    8225 3008  F7 D8				NEG	AX
    8226 300A  F7 C3 8000		SK0:	TEST	BX,8000H
    8227 300E  74 08				JZ	SK00
    8228 3010  C7 06 2C34 R FFFF		MOV	[Y_YLOS],-1
    8229 3016  F7 DB				NEG	BX
    8230 3018  3B C3			SK00:	CMP	ax,bx
    8231 301A  75 06				jnz	sk000
    8232 301C  3D 0000				cmp	ax,0
    8233					rz
    8234 301F  75 01                 1		JNZ	$+3 
    8235 3021  C3                    1		RET 
    8236 3022  8B 0E 2C32 R		sk000:	MOV	cx,[X_ylos]
    8237 3026  89 0E 2C3A R			MOV	[X_APU],CX
    8238 302A  8B 0E 2C34 R			MOV	cx,[y_ylos]
    8239 302E  89 0E 2C3C R			MOV	[y_APU],CX
    8240 3032  2B C9				SUB	CX,CX
    8241 3034  3B C3				CMP	AX,BX
    8242 3036  73 0C				JNC	DXNPDY
    8243 3038  89 0E 2C3A R			MOV	[X_APU],CX
    8244 303C  89 1E 2C3E R			MOV	[MAXI],BX
    8245 3040  93				XCHG	AX,BX
    8246 3041  EB 08 90				JMP	EOIF
    8247 3044  89 0E 2C3C R		dxNPDY:	MOV	[Y_APU],CX
    8248 3048  A3 2C3E R			MOV	[MAXI],AX
    8249 304B  A3 2C36 R		EOIF:	MOV	[DELTA_X],AX
    8250 304E  89 1E 2C38 R			MOV	[DELTA_Y],BX
    8251 3052  2B D8				SUB	BX,AX
    8252 3054  D1 E3				SHL	BX,1
    8253 3056  89 1E 2C40 R			MOV	[EPOS],BX
    8254 305A  8B 1E 2C38 R			MOV	BX,[DELTA_Y]
    8255 305E  D1 E3				SHL	BX,1
    8256 3060  89 1E 2C42 R			MOV	[ENEG],BX
    8257 3064  2B D8				SUB	BX,AX
    8258 3066  89 1E 2C44 R			MOV	[E],BX
    8259 306A  8B 0E 2C3E R			MOV	CX,[MAXI]
    8260 306E  51			VIIVA:	PUSH	CX
    8261 306F  E8 30FA R			CALL	SETXYPIX
    8262 3072  A1 2C44 R			MOV	AX,[E]
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-154


    8263 3075  8B 1E 2C2E R			MOV	BX,[X_LOC]
    8264 3079  8B 0E 2C30 R			MOV	CX,[Y_LOC]
    8265 307D  A9 8000				TEST	AX,8000H
    8266 3080  75 0F				JNZ	EP0
    8267 3082  03 1E 2C32 R			ADD	BX,[X_YLOS]
    8268 3086  03 0E 2C34 R			ADD	CX,[Y_YLOS]
    8269 308A  03 06 2C40 R			ADD	AX,[EPOS]
    8270 308E  EB 0D 90				JMP	EP02
    8271 3091  03 1E 2C3A R		EP0:	ADD	BX,[X_APU]
    8272 3095  03 0E 2C3C R			ADD	CX,[Y_APU]
    8273 3099  03 06 2C42 R			ADD	AX,[ENEG]
    8274 309D  A3 2C44 R		EP02:	MOV	[E],AX
    8275 30A0  89 1E 2C2E R			MOV	[X_LOC],BX
    8276 30A4  89 0E 2C30 R			MOV	[Y_LOC],CX
    8277 30A8  59				POP	CX
    8278 30A9  E2 C3				LOOP	VIIVA
    8279 30AB  E9 019E R			JMP	TRET
    8280				
    8281				lisp$subru 'graph-borders',ctwonum,twonum
    8282 2C92                        1	dataseg segment 
    8283 2C92  2C87 R                1		DW NXTSBR 
    8284 2C94  30AE R                1		dw CODEADDR 
    8285 2C96  3D69 R                1		dw ctwonum 
    8286 2C98  67 72 61 70 68 2D     1	  	DB 'graph-borders',0 
    8287 2CA6                        1	dataseg ends 
    8288 30AE  E8 0F4B R             1		CALL	twonum 
    8289 30B1  8B 0E 2C2E R			mov	cx,[x_loc]
    8290 30B5  89 0E 2C26 R			mov	[x_origo],cx
    8291 30B9  03 C1				add	ax,cx
    8292 30BB  A3 2C2A R			mov	[x_max],ax
    8293 30BE  8B 0E 2C30 R			mov	cx,[y_loc]
    8294 30C2  89 0E 2C28 R			mov	[y_origo],cx
    8295 30C6  03 D9				add	bx,cx
    8296 30C8  89 1E 2C2C R			mov	[y_max],bx
    8297 30CC  E9 019E R			jmp	tret
    8298				
    8299 30CF				rajat:
    8300 30CF  3B 0E 2C28 R			cmp	cx,[y_origo]
    8301 30D3  72 13				jc	ohiruu
    8302 30D5  3B 0E 2C2C R			cmp	CX,[y_max]
    8303 30D9  73 0D				Jnc	OHIRUU
    8304 30DB  3B 16 2C26 R			cmp	dx,[x_origo]
    8305 30DF  72 07				jc	ohiruu
    8306 30E1  3B 16 2C2A R			cmp	DX,[x_max]
    8307 30E5  73 01				jnC	OHIRUU
    8308 30E7  C3				ret
    8309 30E8  5B			ohiruu:	pop	bx
    8310 30E9  C3				ret
    8311				
    8312				lisp$subru 'set-pix',ctwonum,twonum
    8313 2CA6                        1	dataseg segment 
    8314 2CA6  2C92 R                1		DW NXTSBR 
    8315 2CA8  30EA R                1		dw CODEADDR 
    8316 2CAA  3D69 R                1		dw ctwonum 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-155


    8317 2CAC  73 65 74 2D 70 69     1	  	DB 'set-pix',0 
    8318 2CB4                        1	dataseg ends 
    8319 30EA  E8 0F4B R             1		CALL	twonum 
    8320 30ED  A3 2C2E R			mov	[x_loc],ax
    8321 30F0  89 1E 2C30 R			mov	[y_loc],bx
    8322 30F4  E8 30FA R			call	setxypix
    8323 30F7  E9 019E R			jmp	tret
    8324 30FA				SETXYPIX:
    8325 30FA  8B 16 2C2E R			MOV	DX,[X_LOC]
    8326 30FE  8B 0E 2C30 R			MOV	CX,[Y_LOC]
    8327 3102  E8 30CF R			call	rajat
    8328 3105  A0 2C46 R			MOV	AL,[DISPMODE]
    8329 3108  3C 80				cmp	al,80h
    8330					jmpn	nz,hgcpix
    8331 310A  75 03                 1		Jnz	$+5 
    8332 310C  E9 3231 R             1		JMP	hgcpix 
    8333 310F  90                    1		nop 
    8334 3110  BB 0050			        MOV	BX,80
    8335 3113  3C 12			        CMP	AL,18
    8336				        JMPN	NZ,VGAPIX
    8337 3115  75 03                 1		JNZ	$+5 
    8338 3117  E9 319F R             1		JMP	VGAPIX 
    8339 311A  90                    1		nop 
    8340 311B  BB 0064			        MOV	BX,100
    8341 311E  3C 58			        CMP	AL,88
    8342				        JMPN	NZ,VGAPIX
    8343 3120  75 03                 1		JNZ	$+5 
    8344 3122  EB 7B 90              1		JMP	VGAPIX 
    8345 3125  90                    1		nop 
    8346 3126  3C 5E				CMP	AL,5EH
    8347					JMPN	NZ,E5pix
    8348 3128  75 03                 1		JNZ	$+5 
    8349 312A  E9 31F3 R             1		JMP	E5pix 
    8350 312D  90                    1		nop 
    8351 312E  3C 06				CMP	AL,6
    8352					JMPN	NZ,HPPIX
    8353 3130  75 03                 1		JNZ	$+5 
    8354 3132  EB 18 90              1		JMP	HPPIX 
    8355 3135  90                    1		nop 
    8356 3136  3C 63				CMP	AL,99
    8357					JMPN	NZ,NOKPIX
    8358 3138  75 03                 1		JNZ	$+5 
    8359 313A  EB 05 90              1		JMP	NOKPIX 
    8360 313D  90                    1		nop 
    8361 313E  E9 325C R			JMP	MUUTPIX
    8362				
    8363				
    8364 3141  B8 B800			NOKPIX:	mov	ax,0b800H
    8365 3144  8E C0				mov	es,ax
    8366 3146  BB 0000				mov	bx,0
    8367 3149  EB 13 90				jmp	nokp2
    8368				
    8369				
    8370 314C  B8 B800			HPPIX:	mov	ax,0b800H
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-156


    8371 314F  8E C0				mov	es,ax
    8372 3151  BB 0000				mov	bx,0
    8373 3154  F6 C1 01				test	cl,1
    8374 3157  74 03				jz	even_row
    8375 3159  BB 2000				mov	bx,2000h
    8376 315C				even_row:
    8377 315C  D1 E9				shr	cx,1
    8378 315E  B0 50			nokp2:	mov	al,80
    8379 3160  F6 E1				mul	cl
    8380 3162  D1 EA				shr	dx,1
    8381 3164  D1 EA				shr	dx,1
    8382 3166  D1 EA				shr	dx,1
    8383 3168  03 C2				add	ax,dx
    8384 316A  03 D8				add	bx,ax
    8385 316C  8B 0E 2C2E R		onbyt:	mov	cx,[x_loc]
    8386 3170  F7 D1				not	cx
    8387 3172  80 E1 07				and	cl,111b
    8388 3175  26: 8A 27			mov	ah,es:[bx]
    8389 3178  D2 CC				ror	ah,cl
    8390 317A  A0 2C25 R			mov	al,[color]
    8391 317D  24 81				and	al,81H
    8392 317F  A8 80				test	al,80h
    8393 3181  74 06				jz	setcol
    8394 3183  24 0F				and	al,0FH
    8395 3185  32 E0				xor	ah,al
    8396 3187  EB 05				jmp	short xorcol
    8397 3189  80 E4 FE			setcol:	and	ah,11111110b
    8398 318C  0A E0				or	ah,al
    8399 318E  D2 C4			xorcol:	rol	ah,cl
    8400 3190  26: 88 27			mov	es:[bx],ah
    8401 3193  C3				ret
    8402				
    8403 3194  BA 03CE			VGAALI:	MOV	DX,3CEH
    8404 3197  86 E0				XCHG	AH,AL
    8405 3199  EE				OUT	DX,AL
    8406 319A  42			        INC	DX
    8407 319B  8A C4				MOV	AL,AH
    8408 319D  EE			        OUT	DX,AL
    8409 319E  C3			        RET
    8410				
    8411 319F  F6 06 2C25 R 80		VGAPIX:	TEST	[COLOR],80H
    8412 31A4  74 06				JZ	NORVGA
    8413 31A6  B8 0318			        MOV	AX,0318H
    8414 31A9  E8 3194 R		        CALL	VGAALI
    8415 31AC  B8 A000			NORVGA:	MOV	AX,0A000H
    8416 31AF  8E C0			        MOV	ES,AX
    8417 31B1  B8 0502				MOV	AX,0502H
    8418 31B4  E8 3194 R			CALL	VGAALI
    8419 31B7  8B C3				mov	ax,bx
    8420 31B9  F7 E1			        mul	cX
    8421 31BB  8B 16 2C2E R		        MOV	DX,[X_LOC]
    8422 31BF  D1 EA				shr	dx,1
    8423 31C1  D1 EA				shr	dx,1
    8424 31C3  D1 EA				shr	dx,1
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-157


    8425 31C5  03 C2				add	ax,dx
    8426 31C7  8B D8				MOV	bx,ax
    8427 31C9  8B 0E 2C2E R			mov	cx,[x_loc]
    8428 31CD  80 E1 07				and	cl,111b
    8429 31D0  B0 80				mov	al,80H
    8430 31D2  D2 C8				ror	al,cl
    8431 31D4  B4 08				mov	AH,8
    8432 31D6  E8 3194 R		        CALL	VGAALI
    8433 31D9  26: 8A 07		        MOV	AL,ES:[BX]
    8434 31DC  A0 2C25 R		        MOV	AL,[COLOR]
    8435 31DF  26: 88 07		        MOV	ES:[BX],AL
    8436 31E2  B8 08FF			        MOV	AX,08FFH
    8437 31E5  E8 3194 R		        CALL	VGAALI
    8438 31E8  B8 0300			        MOV	AX,0300H
    8439 31EB  E8 3194 R		        CALL	VGAALI
    8440 31EE  B8 0500			        MOV	AX,0500H
    8441 31F1  EB A1			        JMP	VGAALI
    8442				        
    8443 31F3  BA 03CE			E5pix:	MOV	DX,3CEH
    8444 31F6  B0 09				MOV	AL,9
    8445 31F8  EE				OUT	DX,AL
    8446 31F9  A1 2C30 R			MOV	AX,[Y_LOC]
    8447 31FC  BB 0060				MOV	BX,96
    8448 31FF  BA 0000				MOV	DX,0
    8449 3202  F7 FB				IDIV	BX
    8450 3204  BB 000F				MOV	BX,15
    8451 3207  F7 EB				IMUL	BX
    8452 3209  BA 03CF				MOV	DX,3CFH
    8453 320C  EE				OUT	DX,AL
    8454 320D  B8 A000				MOV	AX,0A000H
    8455 3210  8E C0				MOV	ES,AX
    8456 3212  A1 2C30 R			MOV	AX,[Y_LOC]
    8457 3215  BB 0060				MOV	BX,96
    8458 3218  BA 0000				MOV	DX,0
    8459 321B  F7 FB				IDIV	BX
    8460 321D  B8 0280				MOV	AX,640
    8461 3220  F7 EA				IMUL	DX
    8462 3222  03 06 2C2E R			ADD	AX,[X_LOC]
    8463 3226  8B D8				MOV	BX,AX
    8464 3228  A0 2C25 R			MOV	AL,[COLOR]
    8465 322B  26: 88 07			MOV	ES:[BX],AL
    8466 322E  E9 019E R			JMP	TRET
    8467				
    8468 3231  8B C1			hgcpix:	MOV	AX,CX
    8469 3233  25 0003				AND	AX,3
    8470 3236  8A E0				MOV	AH,AL
    8471 3238  32 C0				XOR	AL,AL
    8472 323A  D1 E0				SHL	AX,1
    8473 323C  D1 E0				SHL	AX,1
    8474 323E  05 B000				ADD	AX,0b000H
    8475 3241  8E C0				MOV	ES,AX
    8476 3243  8B C1				MOV	AX,CX
    8477 3245  D1 E8				SHR	AX,1
    8478 3247  D1 E8				SHR	AX,1
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-158


    8479 3249  F7 2E 2C47 R			IMUL	V90
    8480 324D  8B 1E 2C2E R			MOV	BX,[X_loc]
    8481 3251  D1 EB				SHR	BX,1
    8482 3253  D1 EB				SHR	BX,1
    8483 3255  D1 EB				SHR	BX,1
    8484 3257  03 D8				ADD	BX,AX
    8485 3259  E9 316C R			jmp	onbyt
    8486				
    8487				
    8488 325C				MUUTPIX:
    8489 325C  87 D1				XCHG	DX,CX
    8490 325E  8B 1E 2C23 R			MOV	BX,[Egabx]
    8491 3262  A0 2C25 R			MOV	AL,[color]
    8492 3265  B4 0C				MOV	AH,0ch
    8493 3267  CD 10				INT	10h
    8494 3269  C3				RET
    8495				
    8496				lisp$subru 'ega-bx',cnumarg,numarg
    8497 2CB4                        1	dataseg segment 
    8498 2CB4  2CA6 R                1		DW NXTSBR 
    8499 2CB6  326A R                1		dw CODEADDR 
    8500 2CB8  3C68 R                1		dw cnumarg 
    8501 2CBA  65 67 61 2D 62 78     1	  	DB 'ega-bx',0 
    8502 2CC1                        1	dataseg ends 
    8503 326A  E8 0F1A R             1		CALL	numarg 
    8504 326D  A3 2C23 R			Mov	[egabx],AX
    8505 3270  E9 019E R			jmp 	tret
    8506					
    8507				lisp$subru 'graph-region',ctwonum,twonum
    8508 2CC1                        1	dataseg segment 
    8509 2CC1  2CB4 R                1		DW NXTSBR 
    8510 2CC3  3273 R                1		dw CODEADDR 
    8511 2CC5  3D69 R                1		dw ctwonum 
    8512 2CC7  67 72 61 70 68 2D     1	  	DB 'graph-region',0 
    8513 2CD4                        1	dataseg ends 
    8514 3273  E8 0F4B R             1		CALL	twonum 
    8515 3276  53			recolu:	push	bx
    8516 3277  50				push	ax
    8517 3278  8B C8				mov	cx,ax
    8518 327A  FF 36 2C2E R			push	[x_loc]
    8519 327E  51			rerivi:	push	cx
    8520 327F  E8 30FA R			call	setxypix
    8521 3282  59				pop	cx
    8522 3283  FF 06 2C2E R			inc	[x_loc]
    8523 3287  E2 F5				loop	rerivi
    8524 3289  FF 06 2C30 R			inc	[y_loc]
    8525 328D  8F 06 2C2E R			pop	[x_loc]
    8526 3291  58				pop	ax
    8527 3292  5B				pop	bx
    8528 3293  4B				dec	bx
    8529 3294  75 E0				jnz	recolu
    8530 3296  E9 019E R			jmp	tret
    8531				
    8532 2CD4				dataseg segment
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-159


    8533 2CD4  09				kypa db 9
    8534 2CD5				dataseg ends
    8535				
    8536				LISP$SUBRU 'graph-char',cnumarg,numarg
    8537 2CD5                        1	dataseg segment 
    8538 2CD5  2CC1 R                1		DW NXTSBR 
    8539 2CD7  3299 R                1		dw CODEADDR 
    8540 2CD9  3C68 R                1		dw cnumarg 
    8541 2CDB  67 72 61 70 68 2D     1	  	DB 'graph-char',0 
    8542 2CE6                        1	dataseg ends 
    8543 3299  E8 0F1A R             1		CALL	numarg 
    8544 329C  3C 20			graphc:	cmp	al,20h
    8545 329E  73 1D				jnc	tavch
    8546 32A0  3C 0D				cmp	al,13
    8547 32A2  75 0E				jnz	ehkbs
    8548 32A4  C7 06 2C2E R 000A		mov	[x_loc],10
    8549 32AA  83 06 2C30 R 09			add	[y_loc],9
    8550					rc
    8551 32AF  73 01                 1		JNC	$+3 
    8552 32B1  C3                    1		RET 
    8553 32B2  3C 08			ehkbs:	cmp	al,8
    8554					rnz
    8555 32B4  74 01                 1		JZ	$+3 
    8556 32B6  C3                    1		RET 
    8557 32B7  83 2E 2C2E R 06			sub	[x_loc],6
    8558 32BC  C3				ret
    8559 32BD  2C 20			tavch:	SUB	Al,20h
    8560 32BF  F6 2E 2CD4 R			IMUL	kypa
    8561 32C3  05 3066 R			ADD	AX,OFFSET MERKIT
    8562 32C6  8B D8				MOV	BX,AX
    8563 32C8  B9 0009				MOV	CX,9
    8564 32CB  53			uurivi:	PUSH	BX
    8565 32CC  51				PUSH	CX
    8566 32CD  B9 0005				mov	Cx,5
    8567 32D0  8A 07				MOV	AL,[BX]
    8568 32D2  D0 E0				SHL	AL,1
    8569 32D4  D0 E0				SHL	AL,1
    8570 32D6  D0 E0				SHL	AL,1
    8571 32D8  51			RRIVI:	PUSH	CX
    8572 32D9  50				PUSH	AX
    8573 32DA  A8 80				TEST	AL,80H
    8574 32DC  74 03				JZ	NNOTSET
    8575 32DE  E8 30FA R			CALL	SETXYPIX
    8576 32E1				NNOTSET:
    8577 32E1  FF 06 2C2E R			INC	[X_LOC]
    8578 32E5  58				POP	AX
    8579 32E6  D0 E0				SHL	AL,1
    8580 32E8  59				POP	CX
    8581 32E9  E2 ED				LOOP	RRIVI
    8582 32EB  59				POP	CX
    8583 32EC  5B				pop	Bx
    8584 32ED  FF 06 2C30 R			inc	[y_loc]
    8585 32F1  83 06 2C2E R FB			add	[x_loc],-5
    8586 32F6  43				inc	bx
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-160


    8587 32F7  E2 D2				loop	uurivi
    8588 32F9  83 06 2C2E R 06		LLOPPU:	add	[x_loc],6
    8589 32FE  83 06 2C30 R F7			add	[y_loc],-9
    8590 3303  B8 0001				mov	ax,t
    8591 3306  C3				ret
    8592				ENDIF
    8593				
    8594				LISP$SUBRU 'make-fsym',cantcomp,evalarg
    8595 2CE6                        1	dataseg segment 
    8596 2CE6  2CD5 R                1		DW NXTSBR 
    8597 2CE8  3307 R                1		dw CODEADDR 
    8598 2CEA  3B6A R                1		dw cantcomp 
    8599 2CEC  6D 61 6B 65 2D 66     1	  	DB 'make-fsym',0 
    8600 2CF6                        1	dataseg ends 
    8601 3307  E8 0EC7 R             1		CALL	evalarg 
    8602 330A				makefsym:
    8603					typeof	dl,ax
    8604 330A  8B F8                 1		MOV     DI,ax 
    8605 330C  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    8606 3311  74 05                 1		JZ	??016D 
    8607 3313  E8 0023 R             1		CALL	EMSADDR 
    8608 3316  EB 04                 1		jmp	short ??016E 
    8609 3318                        1	??016D: 
    8610 3318  8E 06 0100 R          1		mov	ES,[NODTYP] 
    8611 331C                        1	??016E: 
    8612 331C  26: 8A 15             1		MOV	dl,ES:[DI] 
    8613 331F  80 FA 06				cmp	dl,fsymbo
    8614					rz
    8615 3322  75 01                 1		JNZ	$+3 
    8616 3324  C3                    1		RET 
    8617 3325  53				push	bx
    8618 3326  51				push	cx
    8619 3327  80 FA 05				cmp	dl,symbol
    8620					jmpn	z,namerr
    8621 332A  74 03                 1		Jz	$+5 
    8622 332C  E9 0FBB R             1		JMP	namerr 
    8623 332F  90                    1		nop 
    8624					car	c,ax
    8625 3330  E8 0936 R             2		CALL	NEWCARcax 
    8626					settype	ax,fsymbo
    8627 3333  8B F8                 1		MOV     DI,ax 
    8628 3335  B2 06                 1		MOV	DL,fsymbo 
    8629 3337  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    8630 333C  74 05                 1		JZ	??016F 
    8631 333E  E8 0023 R             1		CALL	EMSADDR 
    8632 3341  EB 04                 1		jmp	short ??0170 
    8633 3343                        1	??016F: 
    8634 3343  8E 06 0100 R          1		mov	ES,[NODTYP] 
    8635 3347                        1	??0170: 
    8636 3347  26: 88 15             1		MOV     ES:[DI],DL 
    8637 334A  8B 1E 0122 R			mov	bx,[fsymbc]
    8638					rplaca	ax,b
    8639 334E  8B F8                 1		MOV	DI,ax 
    8640 3350  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-161


    8641 3355  74 09                 2		JZ	??0171 
    8642 3357  E8 0023 R             2		CALL	EMSADDR 
    8643 335A  26: 89 5D 04          2		MOV	ES:[DI+4],bX 
    8644 335E  EB 0E                 2		JMP	SHORT ??0172 
    8645 3360  8E 06 0102 R          2	??0171:	mov	ES,[CARLOW] 
    8646 3364  26: 88 1D             2		mov     ES:[DI],bL 
    8647 3367  8E 06 0104 R          2		mov	ES,[CARHIG] 
    8648 336B  26: 88 3D             2		mov	ES:[DI],bH 
    8649 336E                        2	??0172: 
    8650 336E  89 0F				mov	[bx],cx
    8651 3370  83 C3 02				add	bx,2
    8652 3373  89 1E 0122 R			mov	[fsymbc],bx
    8653 3377  59				pop	cx
    8654 3378  5B				pop	bx
    8655 3379  C3				ret
    8656				
    8657				
    8658				;===============================================
    8659				; compileri
    8660				
    8661 2CF6				dataseg segment
    8662 2CF6  3B6A R				functype	dw	cantcomp
    8663 2CF8  4194 R				PCLOC	DW	FREECODE
    8664 2CFA  0000				THISADDR	dw	0
    8665 2CFC  0000				THISCLAUSE	dw	0
    8666 2CFE  00				CODEBUG		DB 	0
    8667 2CFF  00				RETNUMBER	DB	0
    8668 2D00  00				RETZERO		DB	0
    8669 2D01				dataseg ends
    8670				
    8671				LISP$SUBRU	'comp-debug',cantcomp,evalarg
    8672 2D01                        1	dataseg segment 
    8673 2D01  2CE6 R                1		DW NXTSBR 
    8674 2D03  337A R                1		dw CODEADDR 
    8675 2D05  3B6A R                1		dw cantcomp 
    8676 2D07  63 6F 6D 70 2D 64     1	  	DB 'comp-debug',0 
    8677 2D12                        1	dataseg ends 
    8678 337A  E8 0EC7 R             1		CALL	evalarg 
    8679 337D  A2 2CFE R			mov	[codebug],al
    8680 3380  C3				ret
    8681				
    8682				lisp$subru 'no-compiled-code',cantcomp,evalarg
    8683 2D12                        1	dataseg segment 
    8684 2D12  2D01 R                1		DW NXTSBR 
    8685 2D14  3381 R                1		dw CODEADDR 
    8686 2D16  3B6A R                1		dw cantcomp 
    8687 2D18  6E 6F 2D 63 6F 6D     1	  	DB 'no-compiled-code',0 
    8688 2D29                        1	dataseg ends 
    8689 3381  E8 0EC7 R             1		CALL	evalarg 
    8690 3384  3D 0000				cmp	ax,nil
    8691					jmpn	z,uptohe
    8692 3387  74 03                 1		Jz	$+5 
    8693 3389  E9 3412 R             1		JMP	uptohe 
    8694 338C  90                    1		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-162


    8695 338D  A3 0118 R			mov	[macdat],ax
    8696 3390  A3 011A R			mov	[theseclauses],ax
    8697 3393  A3 2CFC R			mov	[thisclause],ax
    8698 3396  B8 4194 R			mov	ax,offset freecode
    8699 3399  A3 2CF8 R			mov	[pcloc],ax
    8700 339C  C7 06 0122 R 0124 R		mov	word ptr [FSYMBC],offset FSYMBS
    8701 33A2  A1 010C R			mov	ax,[oblist]
    8702 33A5  3D 0000			nococo:	cmp	ax,nil	
    8703					rz
    8704 33A8  75 01                 1		JNZ	$+3 
    8705 33AA  C3                    1		RET 
    8706					car$cdr	a,b,ax
    8707 33AB  E8 02EB R             3		CALL	NEWCARaax 
    8708 33AE  E8 022A R             3		CALL	NEWCDRb 
    8709 33B1  53				push	bx
    8710					typeof	dl,ax
    8711 33B2  8B F8                 1		MOV     DI,ax 
    8712 33B4  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    8713 33B9  74 05                 1		JZ	??0173 
    8714 33BB  E8 0023 R             1		CALL	EMSADDR 
    8715 33BE  EB 04                 1		jmp	short ??0174 
    8716 33C0                        1	??0173: 
    8717 33C0  8E 06 0100 R          1		mov	ES,[NODTYP] 
    8718 33C4                        1	??0174: 
    8719 33C4  26: 8A 15             1		MOV	dl,ES:[DI] 
    8720					when	fsymbo,rstosy
    8721 33C7  80 FA 06              1		CMP	DL,fsymbo 
    8722 33CA  75 03                 2		JNZ	$+5 
    8723 33CC  EB 05 90              2		JMP	rstosy 
    8724 33CF  90                    2		nop 
    8725 33D0  58				pop	ax
    8726 33D1  EB D2				jmp	nococo
    8727 33D3				rstosy:	settype	ax,symbol
    8728 33D3  8B F8                 1		MOV     DI,ax 
    8729 33D5  B2 05                 1		MOV	DL,symbol 
    8730 33D7  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    8731 33DC  74 05                 1		JZ	??0175 
    8732 33DE  E8 0023 R             1		CALL	EMSADDR 
    8733 33E1  EB 04                 1		jmp	short ??0176 
    8734 33E3                        1	??0175: 
    8735 33E3  8E 06 0100 R          1		mov	ES,[NODTYP] 
    8736 33E7                        1	??0176: 
    8737 33E7  26: 88 15             1		MOV     ES:[DI],DL 
    8738					car	b
    8739 33EA  E8 0CF6 R             2		CALL	NEWCARb 
    8740 33ED  8B 1F				mov	bx,[bx]
    8741					rplaca	ax,b
    8742 33EF  8B F8                 1		MOV	DI,ax 
    8743 33F1  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    8744 33F6  74 09                 2		JZ	??0177 
    8745 33F8  E8 0023 R             2		CALL	EMSADDR 
    8746 33FB  26: 89 5D 04          2		MOV	ES:[DI+4],bX 
    8747 33FF  EB 0E                 2		JMP	SHORT ??0178 
    8748 3401  8E 06 0102 R          2	??0177:	mov	ES,[CARLOW] 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-163


    8749 3405  26: 88 1D             2		mov     ES:[DI],bL 
    8750 3408  8E 06 0104 R          2		mov	ES,[CARHIG] 
    8751 340C  26: 88 3D             2		mov	ES:[DI],bH 
    8752 340F                        2	??0178: 
    8753 340F  58				pop	ax
    8754 3410  EB 93				jmp	nococo
    8755				
    8756 3412				uptohe:	typeof	dl,ax
    8757 3412  8B F8                 1		MOV     DI,ax 
    8758 3414  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    8759 3419  74 05                 1		JZ	??0179 
    8760 341B  E8 0023 R             1		CALL	EMSADDR 
    8761 341E  EB 04                 1		jmp	short ??017A 
    8762 3420                        1	??0179: 
    8763 3420  8E 06 0100 R          1		mov	ES,[NODTYP] 
    8764 3424                        1	??017A: 
    8765 3424  26: 8A 15             1		MOV	dl,ES:[DI] 
    8766 3427  80 FA 07				cmp	dl,subru
    8767					jmpn	z,nilret
    8768 342A  74 03                 1		Jz	$+5 
    8769 342C  E9 019A R             1		JMP	nilret 
    8770 342F  90                    1		nop 
    8771					car	a
    8772 3430  E8 024B R             2		CALL	NEWCARa 
    8773 3433  A3 2CF8 R			mov	[pcloc],ax
    8774 3436  E9 019E R			jmp	tret
    8775				
    8776				
    8777				lisp$subru 'ncompile',cantcomp,evalarg
    8778 2D29                        1	dataseg segment 
    8779 2D29  2D12 R                1		DW NXTSBR 
    8780 2D2B  3439 R                1		dw CODEADDR 
    8781 2D2D  3B6A R                1		dw cantcomp 
    8782 2D2F  6E 63 6F 6D 70 69     1	  	DB 'ncompile',0 
    8783 2D38                        1	dataseg ends 
    8784 3439  E8 0EC7 R             1		CALL	evalarg 
    8785 343C				cfunc2:
    8786 343C  FF 36 2CFA R			push	[thisaddr]
    8787 3440  FF 36 2CF6 R			push	[functype]
    8788 3444  FF 36 2CFC R			push	[thisclause]
    8789 3448  50				push	ax
    8790 3449  A1 2CFA R			mov	ax,[thisaddr]
    8791 344C  8B 1E 2CF6 R			mov	bx,[functype]
    8792 3450  E8 05AE R			call	cons
    8793 3453  8B D8				mov	bx,ax
    8794 3455  A1 2CFC R			mov	ax,[thisclause]
    8795 3458  E8 05AE R			call	cons
    8796 345B  8B 1E 011A R			mov	bx,[theseclauses]
    8797 345F  E8 05AE R			call	cons
    8798 3462  A3 011A R			mov	[theseclauses],ax
    8799 3465  58				pop	ax
    8800 3466  C7 06 2CF6 R 3B6F R		mov	[functype],offset cnoarg
    8801 346C  8B 1E 2CF8 R			mov	bx,[pcloc]
    8802 3470  89 1E 2CFA R			mov	[thisaddr],bx
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-164


    8803 3474  A3 2CFC R			mov	[thisclause],ax
    8804 3477  E8 3844 R			call	ncompi
    8805 347A  B8 1DA7 R			mov	ax,offset frame_ret
    8806 347D  E8 3632 R			call	cjmp
    8807 3480  A1 2CFA R			mov	ax,[thisaddr]
    8808 3483  8B 1E 2CF6 R			mov	bx,[functype]
    8809 3487  E8 05F0 R			call	maksbr
    8810 348A  8B 1E 011A R			mov	bx,[theseclauses]
    8811					cdr	b,bx
    8812 348E  E8 0D5F R             2		CALL	NEWCDRbbx 
    8813 3491  89 1E 011A R			mov	[theseclauses],bx
    8814 3495  8F 06 2CFC R			pop	[thisclause]
    8815 3499  8F 06 2CF6 R			pop	[functype]
    8816 349D  8F 06 2CFA R			pop	[thisaddr]
    8817 34A1  C3				ret
    8818				
    8819 34A2				spaceforjump:
    8820 34A2  8B 0E 2CF8 R			mov	cx,[pcloc]
    8821 34A6  51				push	cx
    8822 34A7  50				push	ax
    8823 34A8  53				push	bx
    8824					compil 0,<JMP ERHE>,'JMP  ??	; see below'
    8825 2D38                        1	DATASEG	SEGMENT 
    8826 2D38  4A 4D 50 20 20 3F     1		DB 'JMP  ??	; see below',0 
    8827 2D4C                        1	DATASEG ENDS 
    8828 34A9  51                    1		push	cx 
    8829 34AA  53                    1		PUSH	BX 
    8830 34AB  B9 0003               1		MOV	CX,offset (??017C-??017B) 
    8831 34AE  BE 34BC R             1		mov	si,offset ??017B 
    8832 34B1  BB 2D38 R             1		MOV	BX,offset STRA 
    8833 34B4  E8 34DE R             1		call	maccod 
    8834 34B7  5B                    1		POP	BX 
    8835 34B8  59                    1		pop	cx 
    8836 34B9  EB 04 90              1		jmp	??017C 
    8837 34BC  E9 4044 R             1	??017B:	JMP ERHE 
    8838 34BF                        1	??017C: 
    8839 34BF  5B				pop	bx
    8840 34C0  58				pop	ax
    8841 34C1  59				pop	cx
    8842 34C2  C3				ret
    8843 34C3				CFUNC1:
    8844 34C3  E8 34A2 R			call	spaceforjump
    8845 34C6  51				push	cx
    8846 34C7  E8 343C R			call	cfunc2
    8847 34CA  59				pop	cx
    8848 34CB  50				push	ax
    8849 34CC  E8 36D8 R			call	jmpfrcxhere
    8850 34CF  58				pop	ax
    8851 34D0  C3				RET
    8852				
    8853				lisp$subru 'function',cfunction,arg
    8854 2D4C                        1	dataseg segment 
    8855 2D4C  2D29 R                1		DW NXTSBR 
    8856 2D4E  34D1 R                1		dw CODEADDR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-165


    8857 2D50  34D5 R                1		dw cfunction 
    8858 2D52  66 75 6E 63 74 69     1	  	DB 'function',0 
    8859 2D5B                        1	dataseg ends 
    8860 34D1  E8 0E53 R             1		CALL	arg 
    8861 34D4  C3				ret
    8862 34D5				cfunction:
    8863					car	a,bx
    8864 34D5  E8 0DCB R             2		CALL	NEWCARabx 
    8865 34D8  E8 34C3 R			CALL	CFUNC1
    8866 34DB  E9 39E4 R			jmp	csex
    8867				
    8868 34DE  8B 3E 2CF8 R		maccod:	mov	di,[pcloc]
    8869 34E2  50				push	ax
    8870 34E3  53				push	bx
    8871 34E4  57				push	di
    8872 34E5  2E: 8A 04		macco2:	mov	al,cs:[si]
    8873 34E8  2E: 88 05			mov	cs:[Di],al
    8874 34EB  46				inc	si
    8875 34EC  47				inc	di
    8876 34ED  E2 F6				loop	macco2
    8877 34EF  89 3E 2CF8 R			mov	[pcloc],di
    8878 34F3  8A 16 2CFE R			mov	dl,[codebug]
    8879 34F7  80 FA 00				cmp	dl,0
    8880 34FA  74 22				jz	macco3
    8881 34FC  E8 0C7E R			call	crlf
    8882 34FF  8C C8				MOV	AX,CS
    8883 3501  E8 3D86 R			CALL	HEXWORD
    8884					PRITHS ':'
    8885 2D5B                        1	dataseg segment 
    8886 2D5B  3A 00                 1		DB ':',0 
    8887 2D5D                        1	dataseg ends 
    8888 3504  53                    1		push	bx 
    8889 3505  BB 2D5B R             1		mov	bx,offset tempaddr 
    8890 3508  E8 018C R             1		CALL	PRINTS 
    8891 350B  5B                    1		pop	bx 
    8892 350C  58				pop	ax
    8893 350D  E8 3D86 R			call	HEXWORD
    8894					PRITHS	':   '
    8895 2D5D                        1	dataseg segment 
    8896 2D5D  3A 20 20 20 00        1		DB ':   ',0 
    8897 2D62                        1	dataseg ends 
    8898 3510  53                    1		push	bx 
    8899 3511  BB 2D5D R             1		mov	bx,offset tempaddr 
    8900 3514  E8 018C R             1		CALL	PRINTS 
    8901 3517  5B                    1		pop	bx 
    8902 3518  5B				pop	bx
    8903 3519  E8 018C R			CALL	PRINTS
    8904 351C  58				pop	ax
    8905 351D  C3				ret
    8906 351E  58			macco3:	pop	ax
    8907 351F  58				pop	ax
    8908 3520  58				pop	ax
    8909 3521  C3				ret
    8910				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-166


    8911 3522				comerr:	lisp$error ' CODE MEMORY FULL '
    8912 2D62                        1		dataseg segment 
    8913 2D62  20 43 4F 44 45 20     1		   db ' CODE MEMORY FULL ',0 
    8914 2D75                        1		dataseg ends 
    8915 3522  C7 06 1896 R 0000     1		mov	[throwtag],nil 
    8916 3528  BB 2D62 R             1		MOV	BX,OFFSET tempaddr 
    8917 352B  89 1E 18B5 R          1		mov	[erheen_syy],bx 
    8918 352F  E8 4044 R             1		call	ERHE 
    8919 3532  C3                    1		ret 
    8920				
    8921 3533  8B 3E 2CF8 R		cword1:	mov	di,[pcloc]
    8922 3537  81 FF FF00			cmp	di,0FF00H
    8923 353B  73 E5				jnc	comerr
    8924 353D  2E: 89 05			mov	CS:[di],ax
    8925 3540  47				inc	di
    8926 3541  47				inc	di
    8927 3542  89 3E 2CF8 R			mov	[pcloc],di
    8928 3546  C3				ret
    8929 3547  E8 3533 R		cword:	call	cword1
    8930 354A  8A 16 2CFE R			mov	dl,[codebug]
    8931 354E  80 FA 00				cmp	dl,0
    8932					rz
    8933 3551  75 01                 1		JNZ	$+3 
    8934 3553  C3                    1		RET 
    8935 3554  E8 3D86 R			call	HEXWORD
    8936 3557  C3				ret
    8937				
    8938				lisp$subru 'mach-code',cmcode
    8939 2D75                        1	dataseg segment 
    8940 2D75  2D4C R                1		DW NXTSBR 
    8941 2D77  3558 R                1		dw CODEADDR 
    8942 2D79  3586 R                1		dw cmcode 
    8943 2D7B  6D 61 63 68 2D 63     1	  	DB 'mach-code',0 
    8944 2D85                        1	dataseg ends 
    8945 3558  FF 36 2CF8 R			push	[pcloc]
    8946 355C  C6 06 2CFE R 00			mov	[codebug],0
    8947 3561  A1 0110 R			mov	ax,[argsta]
    8948					car	b,ax
    8949 3564  E8 049D R             2		CALL	NEWCARbax 
    8950 3567  E8 3586 R			call	cmcode
    8951					compil	0,<ret>,'RET'
    8952 2D85                        1	DATASEG	SEGMENT 
    8953 2D85  52 45 54 00           1		DB 'RET',0 
    8954 2D89                        1	DATASEG ENDS 
    8955 356A  51                    1		push	cx 
    8956 356B  53                    1		PUSH	BX 
    8957 356C  B9 0001               1		MOV	CX,offset (??017E-??017D) 
    8958 356F  BE 357D R             1		mov	si,offset ??017D 
    8959 3572  BB 2D85 R             1		MOV	BX,offset STRA 
    8960 3575  E8 34DE R             1		call	maccod 
    8961 3578  5B                    1		POP	BX 
    8962 3579  59                    1		pop	cx 
    8963 357A  EB 02 90              1		jmp	??017E 
    8964 357D  C3                    1	??017D:	ret 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-167


    8965 357E                        1	??017E: 
    8966 357E  8F 06 2CF8 R			pop	[pcloc]
    8967 3582  FF 26 2CF8 R			jmp	[pcloc]
    8968				
    8969 3586  53			cmcode:	push	bx
    8970					cocall LDAREGS,'LDAREGS, '
    8971 3587  B8 2E22 R             1		mov	ax,offset LDAREGS 
    8972 358A  E8 35FD R             1		call	ccall 
    8973 358D  8A 16 2CFE R          1		mov	dl,[codebug] 
    8974 3591  80 FA 00              1		cmp	dl,0 
    8975 3594  74 10                 1		jz	??017F 
    8976 2D89                        2	dataseg segment 
    8977 2D89  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    8978 2D92                        2	dataseg ends 
    8979 3596  53                    2		push	bx 
    8980 3597  BB 2D89 R             2		mov	bx,offset tempaddr 
    8981 359A  E8 018C R             2		CALL	PRINTS 
    8982 359D  5B                    2		pop	bx 
    8983 2D92                        2	dataseg segment 
    8984 2D92  4C 44 41 52 45 47     2		DB 'LDAREGS, ',0 
    8985 2D9C                        2	dataseg ends 
    8986 359E  53                    2		push	bx 
    8987 359F  BB 2D92 R             2		mov	bx,offset tempaddr 
    8988 35A2  E8 018C R             2		CALL	PRINTS 
    8989 35A5  5B                    2		pop	bx 
    8990 35A6                        1	??017F: 
    8991 35A6  5B				pop	bx
    8992 35A7  E8 35CA R			call	cmc2
    8993					cocall SETREGS,'SETREGS'
    8994 35AA  B8 2E43 R             1		mov	ax,offset SETREGS 
    8995 35AD  E8 35FD R             1		call	ccall 
    8996 35B0  8A 16 2CFE R          1		mov	dl,[codebug] 
    8997 35B4  80 FA 00              1		cmp	dl,0 
    8998 35B7  74 10                 1		jz	??0180 
    8999 2D9C                        2	dataseg segment 
    9000 2D9C  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    9001 2DA5                        2	dataseg ends 
    9002 35B9  53                    2		push	bx 
    9003 35BA  BB 2D9C R             2		mov	bx,offset tempaddr 
    9004 35BD  E8 018C R             2		CALL	PRINTS 
    9005 35C0  5B                    2		pop	bx 
    9006 2DA5                        2	dataseg segment 
    9007 2DA5  53 45 54 52 45 47     2		DB 'SETREGS',0 
    9008 2DAD                        2	dataseg ends 
    9009 35C1  53                    2		push	bx 
    9010 35C2  BB 2DA5 R             2		mov	bx,offset tempaddr 
    9011 35C5  E8 018C R             2		CALL	PRINTS 
    9012 35C8  5B                    2		pop	bx 
    9013 35C9                        1	??0180: 
    9014 35C9  C3				ret
    9015				
    9016 35CA				cmc2:	r$nil	bx
    9017 35CA  83 FB 00              1		CMP	bx,0 
    9018 35CD  75 01                 2		JNZ	$+3 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-168


    9019 35CF  C3                    2		RET 
    9020					car$cdr	a,b,bx
    9021 35D0  E8 0DCB R             3		CALL	NEWCARabx 
    9022 35D3  E8 022A R             3		CALL	NEWCDRb 
    9023					car	a,ax
    9024 35D6  E8 02EB R             2		CALL	NEWCARaax 
    9025 35D9  8B 3E 2CF8 R			mov	di,[pcloc]
    9026 35DD  2E: 88 05			mov	CS:[di],al
    9027 35E0  47				inc	di
    9028 35E1  89 3E 2CF8 R			mov	[pcloc],di
    9029 35E5  8A 16 2CFE R			mov	dl,[codebug]
    9030 35E9  80 FA 00				cmp	dl,0
    9031 35EC  74 DC				jz	cmc2
    9032 35EE  53				push	bx
    9033 35EF  E8 3D96 R			call	HEXBYTE
    9034					priths ', '
    9035 2DAD                        1	dataseg segment 
    9036 2DAD  2C 20 00              1		DB ', ',0 
    9037 2DB0                        1	dataseg ends 
    9038 35F2  53                    1		push	bx 
    9039 35F3  BB 2DAD R             1		mov	bx,offset tempaddr 
    9040 35F6  E8 018C R             1		CALL	PRINTS 
    9041 35F9  5B                    1		pop	bx 
    9042 35FA  5B				pop	bx
    9043 35FB  EB CD				jmp	short cmc2
    9044				
    9045 35FD  50			ccall:	push	ax
    9046 35FE  8B 1E 2CF8 R			mov	bx,[pcloc]
    9047 3602  53				push	bx
    9048					compil	1,<call EVAL>,'CALL '
    9049 2DB0                        1	DATASEG	SEGMENT 
    9050 2DB0  43 41 4C 4C 20 00     1		DB 'CALL ',0 
    9051 2DB6                        1	DATASEG ENDS 
    9052 3603  51                    1		push	cx 
    9053 3604  53                    1		PUSH	BX 
    9054 3605  B9 0001               1		mov	cx,1 
    9055 3608  BE 3616 R             1		mov	si,offset ??0181 
    9056 360B  BB 2DB0 R             1		MOV	BX,offset STRA 
    9057 360E  E8 34DE R             1		call	maccod 
    9058 3611  5B                    1		POP	BX 
    9059 3612  59                    1		pop	cx 
    9060 3613  EB 04 90              1		jmp	??0182 
    9061 3616  E8 0CA5 R             1	??0181:	call EVAL 
    9062 3619                        1	??0182: 
    9063 3619  5B			reladr:	pop	bx
    9064 361A  83 C3 03				add	bx,3
    9065 361D  58				pop	ax
    9066 361E  50				push	ax
    9067 361F  2B C3				sub	ax,bx
    9068 3621  E8 3533 R			call	cword1
    9069 3624  58				pop	ax
    9070 3625  8A 16 2CFE R			mov	dl,[codebug]
    9071 3629  80 FA 00				cmp	dl,0
    9072					rz
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-169


    9073 362C  75 01                 1		JNZ	$+3 
    9074 362E  C3                    1		RET 
    9075 362F  E9 3D86 R			jmp	hexword
    9076 3632  50			cjmp:	push	ax
    9077 3633  8B 1E 2CF8 R			mov	bx,[pcloc]
    9078 3637  53				push	bx
    9079					compil	1,<jmp EVAL>,'JMP  '
    9080 2DB6                        1	DATASEG	SEGMENT 
    9081 2DB6  4A 4D 50 20 20 00     1		DB 'JMP  ',0 
    9082 2DBC                        1	DATASEG ENDS 
    9083 3638  51                    1		push	cx 
    9084 3639  53                    1		PUSH	BX 
    9085 363A  B9 0001               1		mov	cx,1 
    9086 363D  BE 364B R             1		mov	si,offset ??0183 
    9087 3640  BB 2DB6 R             1		MOV	BX,offset STRA 
    9088 3643  E8 34DE R             1		call	maccod 
    9089 3646  5B                    1		POP	BX 
    9090 3647  59                    1		pop	cx 
    9091 3648  EB 04 90              1		jmp	??0184 
    9092 364B  E9 0CA5 R             1	??0183:	jmp EVAL 
    9093 364E                        1	??0184: 
    9094 364E  EB C9				jmp	reladr
    9095				
    9096 3650				TESTNIL:COMPIL	0,<OR AX,AX>,'OR   AX,AX	; AX=NIL?'
    9097 2DBC                        1	DATASEG	SEGMENT 
    9098 2DBC  4F 52 20 20 20 41     1		DB 'OR   AX,AX	; AX=NIL?',0 
    9099 2DD1                        1	DATASEG ENDS 
    9100 3650  51                    1		push	cx 
    9101 3651  53                    1		PUSH	BX 
    9102 3652  B9 0002               1		MOV	CX,offset (??0186-??0185) 
    9103 3655  BE 3663 R             1		mov	si,offset ??0185 
    9104 3658  BB 2DBC R             1		MOV	BX,offset STRA 
    9105 365B  E8 34DE R             1		call	maccod 
    9106 365E  5B                    1		POP	BX 
    9107 365F  59                    1		pop	cx 
    9108 3660  EB 03 90              1		jmp	??0186 
    9109 3663  0B C0                 1	??0185:	OR AX,AX 
    9110 3665                        1	??0186: 
    9111 3665  C3				RET
    9112 3666				SKPNIL:	COMPIL	0,<JZ $+5>,'JZ   $+5'
    9113 2DD1                        1	DATASEG	SEGMENT 
    9114 2DD1  4A 5A 20 20 20 24     1		DB 'JZ   $+5',0 
    9115 2DDA                        1	DATASEG ENDS 
    9116 3666  51                    1		push	cx 
    9117 3667  53                    1		PUSH	BX 
    9118 3668  B9 0002               1		MOV	CX,offset (??0188-??0187) 
    9119 366B  BE 3679 R             1		mov	si,offset ??0187 
    9120 366E  BB 2DD1 R             1		MOV	BX,offset STRA 
    9121 3671  E8 34DE R             1		call	maccod 
    9122 3674  5B                    1		POP	BX 
    9123 3675  59                    1		pop	cx 
    9124 3676  EB 03 90              1		jmp	??0188 
    9125 3679  74 03                 1	??0187:	JZ $+5 
    9126 367B                        1	??0188: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-170


    9127 367B  C3				ret
    9128 367C				SKPT:	COMPIL	0,<JNZ $+5>,'JNZ  $+5'
    9129 2DDA                        1	DATASEG	SEGMENT 
    9130 2DDA  4A 4E 5A 20 20 24     1		DB 'JNZ  $+5',0 
    9131 2DE3                        1	DATASEG ENDS 
    9132 367C  51                    1		push	cx 
    9133 367D  53                    1		PUSH	BX 
    9134 367E  B9 0002               1		MOV	CX,offset (??018A-??0189) 
    9135 3681  BE 368F R             1		mov	si,offset ??0189 
    9136 3684  BB 2DDA R             1		MOV	BX,offset STRA 
    9137 3687  E8 34DE R             1		call	maccod 
    9138 368A  5B                    1		POP	BX 
    9139 368B  59                    1		pop	cx 
    9140 368C  EB 03 90              1		jmp	??018A 
    9141 368F  75 03                 1	??0189:	JNZ $+5 
    9142 3691                        1	??018A: 
    9143 3691  C3				ret
    9144				
    9145 3692				SKPTARG:	
    9146 3692  E8 38C0 R			call	ncompi_type
    9147 3695  A0 2D00 R			mov	al,[retzero]
    9148 3698  C6 06 2D00 R 00			mov	[retzero],0
    9149 369D  3C 00				cmp	al,0
    9150 369F  75 C5				jnz	skpnil
    9151 36A1  E8 3650 R			call	testnil
    9152 36A4  EB D6				jmp	skpt
    9153 36A6				SKPNILARG:	
    9154 36A6  E8 38C0 R			call	ncompi_type
    9155 36A9  A0 2D00 R			mov	al,[retzero]
    9156 36AC  C6 06 2D00 R 00			mov	[retzero],0
    9157 36B1  3C 00				cmp	al,0
    9158 36B3  75 C7				jnz	skpt
    9159 36B5  E8 3650 R			call	testnil
    9160 36B8  EB AC				jmp	skpnil
    9161				
    9162 36BA  8B 0E 2CF8 R		CREPEUN:MOV	CX,[PCLOC]
    9163 36BE  51				PUSH	CX
    9164					CAR$CDR	A,B,BX
    9165 36BF  E8 0DCB R             3		CALL	NEWCARABX 
    9166 36C2  E8 022A R             3		CALL	NEWCDRB 
    9167 36C5  53				PUSH	BX
    9168 36C6  E8 36A6 R			call	skpnilarg
    9169 36C9  5B			COREP2:	POP	BX
    9170 36CA  E8 34A2 R			call	spaceforjump
    9171 36CD  51				PUSH	CX
    9172 36CE  E8 1F25 R			CALL	COMPPROGN
    9173 36D1  59				POP	CX
    9174 36D2  58				POP	AX
    9175 36D3  51				PUSH	CX
    9176 36D4  E8 3632 R			CALL	CJMP
    9177 36D7  59				POP	CX
    9178 36D8				JMPFRCXHERE:
    9179 36D8  A1 2CF8 R			MOV	AX,[PCLOC]
    9180 36DB  50				PUSH	AX
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-171


    9181 36DC  89 0E 2CF8 R			MOV	[PCLOC],CX
    9182 36E0  E8 3632 R			CALL	cjmp
    9183 36E3  58				pop	AX
    9184 36E4  A3 2CF8 R			MOV	[PCLOC],aX
    9185 36E7  C3				RET
    9186 36E8  8B 0E 2CF8 R		CWHILE:	MOV	CX,[PCLOC]
    9187 36EC  51				PUSH	CX
    9188					CAR$CDR	A,B,BX
    9189 36ED  E8 0DCB R             3		CALL	NEWCARABX 
    9190 36F0  E8 022A R             3		CALL	NEWCDRB 
    9191 36F3  53				PUSH	BX
    9192 36F4  E8 3692 R			call	skptarg
    9193 36F7  EB D0				JMP	COREP2
    9194 36F9  A1 2CF8 R		CREPEAT:mov	ax,[pcloc]
    9195 36FC  50				push	ax
    9196 36FD  E8 1F25 R			call	compprogn
    9197 3700  E8 3650 R			call	testnil
    9198 3703  E8 367C R			call	skpt
    9199 3706  58				pop	ax
    9200 3707  E9 3632 R			jmp	cjmp
    9201 370A				CREPEATTIMES:
    9202 370A  53				PUSH	BX
    9203 370B  E8 3C59 R			CALL	CNUMAR1
    9204 370E  E8 382F R			call	push_AX
    9205 3711  A1 2CF8 R			MOV	AX,[PCLOC]
    9206 3714  50				PUSH	AX
    9207 3715  E8 3BAF R			call	POP_AX
    9208 3718  E8 3650 R			CALL	TESTNIL
    9209 371B  E8 367C R			CALL	SKPT
    9210 371E  E8 34A2 R			call	spaceforjump
    9211 3721  51				push	cx
    9212					COMPIL	0,<DEC AX>,'DEC  AX'
    9213 2DE3                        1	DATASEG	SEGMENT 
    9214 2DE3  44 45 43 20 20 41     1		DB 'DEC  AX',0 
    9215 2DEB                        1	DATASEG ENDS 
    9216 3722  51                    1		push	cx 
    9217 3723  53                    1		PUSH	BX 
    9218 3724  B9 0001               1		MOV	CX,offset (??018C-??018B) 
    9219 3727  BE 3735 R             1		mov	si,offset ??018B 
    9220 372A  BB 2DE3 R             1		MOV	BX,offset STRA 
    9221 372D  E8 34DE R             1		call	maccod 
    9222 3730  5B                    1		POP	BX 
    9223 3731  59                    1		pop	cx 
    9224 3732  EB 02 90              1		jmp	??018C 
    9225 3735  48                    1	??018B:	DEC AX 
    9226 3736                        1	??018C: 
    9227 3736  E8 382F R			call	push_AX
    9228 3739  8B EC				MOV	BP,SP
    9229 373B  8B 5E 04				MOV	BX,[BP+4] 
    9230					CDR	B,BX
    9231 373E  E8 0D5F R             2		CALL	NEWCDRBBX 
    9232 3741  E8 1F25 R			CALL	COMPPROGN
    9233 3744  8B EC				MOV	BP,SP
    9234 3746  8B 46 02				MOV	AX,[BP+2]
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-172


    9235 3749  E8 3632 R			CALL	CJMP
    9236 374C  59				POP	CX
    9237 374D  E8 36D8 R			CALL	JMPFRCXHERE
    9238 3750  58				POP	AX
    9239 3751  58				POP	AX
    9240 3752  C3				RET
    9241 3753				CIF:	CAR$CDR	A,B,BX
    9242 3753  E8 0DCB R             3		CALL	NEWCARABX 
    9243 3756  E8 022A R             3		CALL	NEWCDRB 
    9244 3759  53				PUSH	BX
    9245 375A  E8 3692 R			CALL	SKPTarg
    9246 375D  5B				POP	bx
    9247 375E  E8 34A2 R			call	spaceforjump
    9248 3761  51				push	cx
    9249					CAR$CDR	A,B,BX
    9250 3762  E8 0DCB R             3		CALL	NEWCARABX 
    9251 3765  E8 022A R             3		CALL	NEWCDRB 
    9252 3768  53				PUSH	BX
    9253 3769  E8 3844 R			CALL	NCOMPI
    9254 376C  5B				POP	BX
    9255 376D  E8 34A2 R			call	spaceforjump
    9256 3770  51				push	cx
    9257					CAR	A,BX
    9258 3771  E8 0DCB R             2		CALL	NEWCARABX 
    9259 3774  50				PUSH	AX
    9260 3775  8B EC				MOV	BP,SP
    9261 3777  8B 4E 04				MOV	CX,[BP+4]
    9262 377A  E8 36D8 R			CALL	JMPFRCXHERE
    9263 377D  58				POP	AX
    9264 377E  E8 3844 R			CALL	NCOMPI
    9265 3781  59				POP	CX
    9266 3782  E8 36D8 R			CALL	JMPFRCXHERE
    9267 3785  59				POP	CX
    9268 3786  C3				RET
    9269				
    9270 3787  53			CCOND:	PUSH	BX
    9271 3788  8B 0E 2CF8 R			mov	cx,[pcloc]	
    9272 378C  51				push	cx
    9273 378D  83 C1 03				add	cx,3
    9274 3790  51				push	cx
    9275 3791  83 C1 03				add	cx,3
    9276 3794  89 0E 2CF8 R			mov	[pcloc],cx
    9277 3798  8B EC			ccondl:	MOV	BP,SP
    9278 379A  8B 4E 02				MOV	CX,[BP+2]
    9279 379D  E8 36D8 R			call	jmpfrcxhere
    9280 37A0  8B 46 04				mov	ax,[bp+4]
    9281					j$nil	ax,ccondend
    9282 37A3  3D 0000               1		CMP	ax,0 
    9283 37A6  75 03                 2		JnZ	$+5 
    9284 37A8  EB 5D 90              2		JMP	ccondend 
    9285 37AB  90                    2		nop 
    9286					CAR$CDR	A,B,ax
    9287 37AC  E8 02EB R             3		CALL	NEWCARAax 
    9288 37AF  E8 022A R             3		CALL	NEWCDRB 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-173


    9289 37B2  89 5E 04				MOV	[BP+4],BX
    9290					CAR$CDR	A,B,Ax
    9291 37B5  E8 02EB R             3		CALL	NEWCARAAx 
    9292 37B8  E8 022A R             3		CALL	NEWCDRB 
    9293 37BB  3D 0001				cmp	ax,t
    9294 37BE  74 3B				jz	coelse
    9295 37C0  53				PUSH	BX
    9296					j$nil	bx,rettest
    9297 37C1  83 FB 00              1		CMP	bx,0 
    9298 37C4  75 03                 2		JnZ	$+5 
    9299 37C6  EB 08 90              2		JMP	rettest 
    9300 37C9  90                    2		nop 
    9301 37CA  E8 3692 R			call	skptarg
    9302 37CD  EB 0A 90				jmp	norett
    9303 37D0  E8 3844 R		rettest:call	ncompi
    9304 37D3  E8 3650 R			call	testnil
    9305 37D6  E8 367C R			CALL	SKPT
    9306 37D9  5B			norett:	pop	bx
    9307 37DA  A1 2CF8 R			mov	ax,[pcloc]
    9308 37DD  8B EC				mov	bp,sp
    9309 37DF  89 46 02				mov	[bp+2],ax
    9310 37E2  05 0003				add	ax,3
    9311 37E5  A3 2CF8 R			mov	[pcloc],ax
    9312					j$nil	bx,eijama1
    9313 37E8  83 FB 00              1		CMP	bx,0 
    9314 37EB  75 03                 2		JnZ	$+5 
    9315 37ED  EB 05 90              2		JMP	eijama1 
    9316 37F0  90                    2		nop 
    9317 37F1  E8 1F25 R			call	compprogn
    9318 37F4  58			eijama1:pop	ax
    9319 37F5  50				push	ax
    9320 37F6  E8 3632 R			call	cjmp
    9321 37F9  EB 9D				jmp	ccondl
    9322 37FB				coelse:	j$nil	bx,ccondend
    9323 37FB  83 FB 00              1		CMP	bx,0 
    9324 37FE  75 03                 2		JnZ	$+5 
    9325 3800  EB 05 90              2		JMP	ccondend 
    9326 3803  90                    2		nop 
    9327 3804  E8 1F25 R			call	compprogn
    9328 3807				ccondend:
    9329 3807  59				pop	cx
    9330 3808  E8 36D8 R			call	jmpfrcxhere
    9331 380B  58				pop	ax
    9332 380C  58				pop	ax
    9333 380D  C3				ret
    9334				
    9335 380E				STACKARG:
    9336					typeof	dl,AX
    9337 380E  8B F8                 1		MOV     DI,AX 
    9338 3810  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    9339 3815  74 05                 1		JZ	??018D 
    9340 3817  E8 0023 R             1		CALL	EMSADDR 
    9341 381A  EB 04                 1		jmp	short ??018E 
    9342 381C                        1	??018D: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-174


    9343 381C  8E 06 0100 R          1		mov	ES,[NODTYP] 
    9344 3820                        1	??018E: 
    9345 3820  26: 8A 15             1		MOV	dl,ES:[DI] 
    9346 3823  80 FA 06				cmp	dl,fsymbo
    9347 3826  75 04				jnz	ncompi_pus
    9348 3828  E8 2362 R			call	pusvar
    9349 382B  C3				ret
    9350 382C				NCOMPI_PUS:
    9351 382C  E8 3844 R			call	NCOMPI
    9352 382F				push_AX:compil	0,<PUSH AX>,'PUSH AX'
    9353 2DEB                        1	DATASEG	SEGMENT 
    9354 2DEB  50 55 53 48 20 41     1		DB 'PUSH AX',0 
    9355 2DF3                        1	DATASEG ENDS 
    9356 382F  51                    1		push	cx 
    9357 3830  53                    1		PUSH	BX 
    9358 3831  B9 0001               1		MOV	CX,offset (??0190-??018F) 
    9359 3834  BE 3842 R             1		mov	si,offset ??018F 
    9360 3837  BB 2DEB R             1		MOV	BX,offset STRA 
    9361 383A  E8 34DE R             1		call	maccod 
    9362 383D  5B                    1		POP	BX 
    9363 383E  59                    1		pop	cx 
    9364 383F  EB 02 90              1		jmp	??0190 
    9365 3842  50                    1	??018F:	PUSH AX 
    9366 3843                        1	??0190: 
    9367 3843  C3				RET
    9368				
    9369 3844  E8 38C0 R		NCOMPI:	call	NCOMPI_TYPE
    9370 3847  80 3E 2CFF R 00			cmp	[retnumber],0
    9371 384C  75 4D				jnz	ncompn
    9372 384E  80 3E 2D00 R 00			cmp	[retzero],0
    9373 3853  75 01				jnz	ncompb
    9374 3855  C3				ret
    9375 3856  C6 06 2D00 R 00		ncompb:	mov	[retzero],0
    9376					compil	0,<MOV  AX,1>,'MOV  AX,1'
    9377 2DF3                        1	DATASEG	SEGMENT 
    9378 2DF3  4D 4F 56 20 20 41     1		DB 'MOV  AX,1',0 
    9379 2DFD                        1	DATASEG ENDS 
    9380 385B  51                    1		push	cx 
    9381 385C  53                    1		PUSH	BX 
    9382 385D  B9 0003               1		MOV	CX,offset (??0192-??0191) 
    9383 3860  BE 386E R             1		mov	si,offset ??0191 
    9384 3863  BB 2DF3 R             1		MOV	BX,offset STRA 
    9385 3866  E8 34DE R             1		call	maccod 
    9386 3869  5B                    1		POP	BX 
    9387 386A  59                    1		pop	cx 
    9388 386B  EB 04 90              1		jmp	??0192 
    9389 386E  B8 0001               1	??0191:	MOV  AX,1 
    9390 3871                        1	??0192: 
    9391					compil  0,<JZ $+3>,'JZ   $+3'
    9392 2DFD                        1	DATASEG	SEGMENT 
    9393 2DFD  4A 5A 20 20 20 24     1		DB 'JZ   $+3',0 
    9394 2E06                        1	DATASEG ENDS 
    9395 3871  51                    1		push	cx 
    9396 3872  53                    1		PUSH	BX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-175


    9397 3873  B9 0002               1		MOV	CX,offset (??0194-??0193) 
    9398 3876  BE 3884 R             1		mov	si,offset ??0193 
    9399 3879  BB 2DFD R             1		MOV	BX,offset STRA 
    9400 387C  E8 34DE R             1		call	maccod 
    9401 387F  5B                    1		POP	BX 
    9402 3880  59                    1		pop	cx 
    9403 3881  EB 03 90              1		jmp	??0194 
    9404 3884  74 01                 1	??0193:	JZ $+3 
    9405 3886                        1	??0194: 
    9406					compil  0,<DEC AX>,'DEC  AX'
    9407 2E06                        1	DATASEG	SEGMENT 
    9408 2E06  44 45 43 20 20 41     1		DB 'DEC  AX',0 
    9409 2E0E                        1	DATASEG ENDS 
    9410 3886  51                    1		push	cx 
    9411 3887  53                    1		PUSH	BX 
    9412 3888  B9 0001               1		MOV	CX,offset (??0196-??0195) 
    9413 388B  BE 3899 R             1		mov	si,offset ??0195 
    9414 388E  BB 2E06 R             1		MOV	BX,offset STRA 
    9415 3891  E8 34DE R             1		call	maccod 
    9416 3894  5B                    1		POP	BX 
    9417 3895  59                    1		pop	cx 
    9418 3896  EB 02 90              1		jmp	??0196 
    9419 3899  48                    1	??0195:	DEC AX 
    9420 389A                        1	??0196: 
    9421 389A  C3				ret
    9422 389B  C6 06 2CFF R 00		ncompn:	mov	[retnumber],0
    9423					cocall	maknum,'MAKNUM'
    9424 38A0  B8 05C9 R             1		mov	ax,offset maknum 
    9425 38A3  E8 35FD R             1		call	ccall 
    9426 38A6  8A 16 2CFE R          1		mov	dl,[codebug] 
    9427 38AA  80 FA 00              1		cmp	dl,0 
    9428 38AD  74 10                 1		jz	??0197 
    9429 2E0E                        2	dataseg segment 
    9430 2E0E  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    9431 2E17                        2	dataseg ends 
    9432 38AF  53                    2		push	bx 
    9433 38B0  BB 2E0E R             2		mov	bx,offset tempaddr 
    9434 38B3  E8 018C R             2		CALL	PRINTS 
    9435 38B6  5B                    2		pop	bx 
    9436 2E17                        2	dataseg segment 
    9437 2E17  4D 41 4B 4E 55 4D     2		DB 'MAKNUM',0 
    9438 2E1E                        2	dataseg ends 
    9439 38B7  53                    2		push	bx 
    9440 38B8  BB 2E17 R             2		mov	bx,offset tempaddr 
    9441 38BB  E8 018C R             2		CALL	PRINTS 
    9442 38BE  5B                    2		pop	bx 
    9443 38BF                        1	??0197: 
    9444 38BF  C3				ret
    9445				
    9446 2E1E				dataseg segment
    9447 2E1E  0000				original dw 0 ; for cantcomp
    9448 2E20				dataseg ends
    9449				
    9450 38C0				NCOMPI_TYPE:
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-176


    9451					j$ATOM	AX,ATOMCOMP
    9452 38C0  3D 0300               1		CMP	AX,FSTNODE 
    9453 38C3  73 03                 2		JNC	$+5 
    9454 38C5  E9 39BD R             2		JMP	ATOMCOMP 
    9455 38C8  90                    2		nop 
    9456 38C9  8B F8                 2		MOV     DI,AX 
    9457 38CB  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
    9458 38D0  74 05                 2		JZ	??0198 
    9459 38D2  E8 0023 R             2		CALL	EMSADDR 
    9460 38D5  EB 04                 2		jmp	short ??0199 
    9461 38D7                        2	??0198: 
    9462 38D7  8E 06 0100 R          2		mov	ES,[NODTYP] 
    9463 38DB                        2	??0199: 
    9464 38DB  26: 8A 15             2		MOV	DL,ES:[DI] 
    9465 38DE  80 FA 0F              1		CMP	DL,LIST 
    9466 38E1  74 03                 2		JZ	$+5 
    9467 38E3  E9 39BD R             2		JMP	ATOMCOMP 
    9468 38E6  90                    2		nop 
    9469 38E7  A3 2E1E R			mov	[original],ax
    9470					car$cdr	a,b,ax
    9471 38EA  E8 02EB R             3		CALL	NEWCARaax 
    9472 38ED  E8 022A R             3		CALL	NEWCDRb 
    9473					typeof	dl,AX
    9474 38F0  8B F8                 1		MOV     DI,AX 
    9475 38F2  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    9476 38F7  74 05                 1		JZ	??019A 
    9477 38F9  E8 0023 R             1		CALL	EMSADDR 
    9478 38FC  EB 04                 1		jmp	short ??019B 
    9479 38FE                        1	??019A: 
    9480 38FE  8E 06 0100 R          1		mov	ES,[NODTYP] 
    9481 3902                        1	??019B: 
    9482 3902  26: 8A 15             1		MOV	dl,ES:[DI] 
    9483					when	quote,coquot
    9484 3905  80 FA 02              1		CMP	DL,quote 
    9485 3908  75 03                 2		JNZ	$+5 
    9486 390A  E9 39B7 R             2		JMP	coquot 
    9487 390D  90                    2		nop 
    9488					when	symbol,contco
    9489 390E  80 FA 05              1		CMP	DL,symbol 
    9490 3911  75 03                 2		JNZ	$+5 
    9491 3913  EB 27 90              2		JMP	contco 
    9492 3916  90                    2		nop 
    9493					when	fsymbo,contco
    9494 3917  80 FA 06              1		CMP	DL,fsymbo 
    9495 391A  75 03                 2		JNZ	$+5 
    9496 391C  EB 1E 90              2		JMP	contco 
    9497 391F  90                    2		nop 
    9498					car	d,ax
    9499 3920  E8 0BB5 R             2		CALL	NEWCARdax 
    9500 3923  3B 16 3052 R			cmp	dx,FUNCTIONS
    9501					jmpn	z,CANTCOMP
    9502 3927  74 03                 1		Jz	$+5 
    9503 3929  E9 3B6A R             1		JMP	CANTCOMP 
    9504 392C  90                    1		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-177


    9505 392D  53				push	bx ; ((function ?
    9506 392E  50				push	ax
    9507 392F  E8 0CA5 R			call	eval
    9508 3932  E8 34C3 R			call	cfunc1
    9509 3935  8B C8				mov	cx,ax ; subru?
    9510 3937  58				pop	ax
    9511 3938  5B				pop	bx
    9512 3939  EB 13 90				jmp	contc2
    9513 393C  53			contco:	PUSH	BX
    9514 393D  50				PUSH	AX
    9515 393E  E8 0CA5 R			CALL	EVAL
    9516 3941  8B C8				MOV	CX,AX
    9517 3943  58				POP	AX
    9518 3944  5B				POP	BX
    9519					j$NIL	CX,CANTCOMP
    9520 3945  83 F9 00              1		CMP	CX,0 
    9521 3948  75 03                 2		JnZ	$+5 
    9522 394A  E9 3B6A R             2		JMP	CANTCOMP 
    9523 394D  90                    2		nop 
    9524 394E  8B 16 2CFC R		contc2:	mov	dx,[thisclause]
    9525 3952  3B D1				cmp	dx,cx
    9526					jmpn	nz,recursive
    9527 3954  75 03                 1		Jnz	$+5 
    9528 3956  EB 3B 90              1		JMP	recursive 
    9529 3959  90                    1		nop 
    9530 395A  53				PUSH	BX
    9531 395B  50				PUSH	AX
    9532 395C  51				PUSH	CX
    9533 395D  8B C1				MOV	AX,CX
    9534 395F  8B 1E 011A R			MOV	BX,[theseclauses]
    9535 3963  E8 16E6 R			CALL	ASSOC
    9536					JN$NIL	AX,recursive2
    9537 3966  3D 0000               1		CMP	AX,0 
    9538 3969  74 03                 2		JZ	$+5 
    9539 396B  EB 38 90              2		JMP	recursive2 
    9540 396E  90                    2		nop 
    9541 396F  59				POP	CX
    9542 3970  58				POP	AX
    9543 3971  5B				POP	BX
    9544					TYPEOF	DL,cX
    9545 3972  8B F9                 1		MOV     DI,cX 
    9546 3974  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    9547 3979  74 05                 1		JZ	??019C 
    9548 397B  E8 0023 R             1		CALL	EMSADDR 
    9549 397E  EB 04                 1		jmp	short ??019D 
    9550 3980                        1	??019C: 
    9551 3980  8E 06 0100 R          1		mov	ES,[NODTYP] 
    9552 3984                        1	??019D: 
    9553 3984  26: 8A 15             1		MOV	DL,ES:[DI] 
    9554					when	subru,compsu
    9555 3987  80 FA 07              1		CMP	DL,subru 
    9556 398A  75 03                 2		JNZ	$+5 
    9557 398C  EB 22 90              2		JMP	compsu 
    9558 398F  90                    2		nop 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-178


    9559 3990  E9 3B6A R			jmp	CANTCOMP
    9560 3993				recursive:
    9561 3993  53				push	bx
    9562 3994  A1 2CFA R			mov	ax,[thisaddr]
    9563 3997  8B 1E 2CF6 R			mov	bx,[functype]
    9564 399B  E8 05AE R			call	cons
    9565 399E  5B				pop	bx
    9566 399F  8B 0E 2CF6 R			mov	cx,[functype]
    9567 39A3  51				push	cx
    9568 39A4  C3				ret
    9569 39A5				recursive2:
    9570 39A5  59				POP	CX
    9571 39A6  59				POP	CX
    9572					cdr	a,ax
    9573 39A7  E8 08AB R             2		CALL	NEWCDRaax 
    9574					cdr	c,ax
    9575 39AA  E8 26C1 R             2		CALL	NEWCDRcax 
    9576 39AD  5B				pop	bx
    9577 39AE  51				push	cx
    9578 39AF  C3				ret
    9579 39B0  8B C1			compsu:	mov	ax,cx
    9580					cdr	c,cx
    9581 39B2  E8 09BC R             2		CALL	NEWCDRccx 
    9582 39B5  51				push	cx
    9583 39B6  C3				ret
    9584 39B7				coquot:	car	a,bx
    9585 39B7  E8 0DCB R             2		CALL	NEWCARabx 
    9586 39BA  EB 28 90				jmp	csex	
    9587 39BD				ATOMCOMP:
    9588					typeof	dl,ax
    9589 39BD  8B F8                 1		MOV     DI,ax 
    9590 39BF  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
    9591 39C4  74 05                 1		JZ	??019E 
    9592 39C6  E8 0023 R             1		CALL	EMSADDR 
    9593 39C9  EB 04                 1		jmp	short ??019F 
    9594 39CB                        1	??019E: 
    9595 39CB  8E 06 0100 R          1		mov	ES,[NODTYP] 
    9596 39CF                        1	??019F: 
    9597 39CF  26: 8A 15             1		MOV	dl,ES:[DI] 
    9598					when	symbol,cosymb
    9599 39D2  80 FA 05              1		CMP	DL,symbol 
    9600 39D5  75 03                 2		JNZ	$+5 
    9601 39D7  E9 3B16 R             2		JMP	cosymb 
    9602 39DA  90                    2		nop 
    9603					when	fsymbo,cosymb
    9604 39DB  80 FA 06              1		CMP	DL,fsymbo 
    9605 39DE  75 03                 2		JNZ	$+5 
    9606 39E0  E9 3B16 R             2		JMP	cosymb 
    9607 39E3  90                    2		nop 
    9608 39E4  E8 3A05 R		csex:	call	saveimm
    9609 39E7  50				push	ax
    9610 39E8  E8 3A2F R			call	cconst
    9611 39EB  58				pop	ax
    9612 39EC  8A 16 2CFE R			mov	dl,[codebug]
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-179


    9613 39F0  80 FA 00				cmp	dl,0
    9614					rz
    9615 39F3  75 01                 1		JNZ	$+3 
    9616 39F5  C3                    1		RET 
    9617					priths '	; S-object '
    9618 2E20                        1	dataseg segment 
    9619 2E20  09 3B 20 53 2D 6F     1		DB '	; S-object ',0 
    9620 2E2D                        1	dataseg ends 
    9621 39F6  53                    1		push	bx 
    9622 39F7  BB 2E20 R             1		mov	bx,offset tempaddr 
    9623 39FA  E8 018C R             1		CALL	PRINTS 
    9624 39FD  5B                    1		pop	bx 
    9625 39FE  E9 0A47 R			jmp	print
    9626				
    9627				lisp$subru 'macdat',cantcomp
    9628 2E2D                        1	dataseg segment 
    9629 2E2D  2D75 R                1		DW NXTSBR 
    9630 2E2F  3A01 R                1		dw CODEADDR 
    9631 2E31  3B6A R                1		dw cantcomp 
    9632 2E33  6D 61 63 64 61 74     1	  	DB 'macdat',0 
    9633 2E3A                        1	dataseg ends 
    9634 3A01  A1 0118 R			mov	ax,[macdat]
    9635 3A04  C3				ret
    9636				
    9637 3A05				saveimm:
    9638 3A05  3D 0200				cmp	ax,200H
    9639					rc
    9640 3A08  73 01                 1		JNC	$+3 
    9641 3A0A  C3                    1		RET 
    9642 3A0B  50				push	ax
    9643 3A0C  EB 13 90				JMP	SAVEIM2
    9644 3A0F  8B 1E 0118 R			mov	bx,[macdat]
    9645 3A13  E8 16A8 R			call	memeq
    9646					j$nil	ax,saveim2
    9647 3A16  3D 0000               1		CMP	ax,0 
    9648 3A19  75 03                 2		JnZ	$+5 
    9649 3A1B  EB 04 90              2		JMP	saveim2 
    9650 3A1E  90                    2		nop 
    9651 3A1F  58				pop	ax
    9652 3A20  C3				ret
    9653 3A21  58			saveim2:pop	ax
    9654 3A22  50			        push	ax
    9655 3A23  8B 1E 0118 R			mov	bx,[macdat]
    9656 3A27  E8 05AE R			call	cons
    9657 3A2A  A3 0118 R			mov	[macdat],ax
    9658 3A2D  58				pop	ax
    9659 3A2E  C3				ret
    9660				
    9661 3A2F				cconst:	compil	1,<mov ax,0>,'MOV  AX,'
    9662 2E3A                        1	DATASEG	SEGMENT 
    9663 2E3A  4D 4F 56 20 20 41     1		DB 'MOV  AX,',0 
    9664 2E43                        1	DATASEG ENDS 
    9665 3A2F  51                    1		push	cx 
    9666 3A30  53                    1		PUSH	BX 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-180


    9667 3A31  B9 0001               1		mov	cx,1 
    9668 3A34  BE 3A42 R             1		mov	si,offset ??01A0 
    9669 3A37  BB 2E3A R             1		MOV	BX,offset STRA 
    9670 3A3A  E8 34DE R             1		call	maccod 
    9671 3A3D  5B                    1		POP	BX 
    9672 3A3E  59                    1		pop	cx 
    9673 3A3F  EB 04 90              1		jmp	??01A1 
    9674 3A42  B8 0000               1	??01A0:	mov ax,0 
    9675 3A45                        1	??01A1: 
    9676 3A45  E8 3547 R			call	cword
    9677 3A48  C3				ret
    9678 3A49				cbonst:	compil	1,<mov bx,0>,'MOV  BX,'
    9679 2E43                        1	DATASEG	SEGMENT 
    9680 2E43  4D 4F 56 20 20 42     1		DB 'MOV  BX,',0 
    9681 2E4C                        1	DATASEG ENDS 
    9682 3A49  51                    1		push	cx 
    9683 3A4A  53                    1		PUSH	BX 
    9684 3A4B  B9 0001               1		mov	cx,1 
    9685 3A4E  BE 3A5C R             1		mov	si,offset ??01A2 
    9686 3A51  BB 2E43 R             1		MOV	BX,offset STRA 
    9687 3A54  E8 34DE R             1		call	maccod 
    9688 3A57  5B                    1		POP	BX 
    9689 3A58  59                    1		pop	cx 
    9690 3A59  EB 04 90              1		jmp	??01A3 
    9691 3A5C  BB 0000               1	??01A2:	mov bx,0 
    9692 3A5F                        1	??01A3: 
    9693 3A5F  E8 3547 R			call	cword
    9694 3A62  C3				ret
    9695 3A63				mvtoim:	compil	1,<mov [trace],ax>,'MOV  ['
    9696 2E4C                        1	DATASEG	SEGMENT 
    9697 2E4C  4D 4F 56 20 20 5B     1		DB 'MOV  [',0 
    9698 2E53                        1	DATASEG ENDS 
    9699 3A63  51                    1		push	cx 
    9700 3A64  53                    1		PUSH	BX 
    9701 3A65  B9 0001               1		mov	cx,1 
    9702 3A68  BE 3A76 R             1		mov	si,offset ??01A4 
    9703 3A6B  BB 2E4C R             1		MOV	BX,offset STRA 
    9704 3A6E  E8 34DE R             1		call	maccod 
    9705 3A71  5B                    1		POP	BX 
    9706 3A72  59                    1		pop	cx 
    9707 3A73  EB 04 90              1		jmp	??01A5 
    9708 3A76  A3 0114 R             1	??01A4:	mov [trace],ax 
    9709 3A79                        1	??01A5: 
    9710 3A79  E8 3547 R			call	cword
    9711					comptext '],AX'
    9712 3A7C  8A 16 2CFE R          1		mov	dl,[codebug] 
    9713 3A80  80 FA 00              1		cmp	dl,0 
    9714 3A83  74 08                 1		jz	??01A6 
    9715 2E53                        2	dataseg segment 
    9716 2E53  5D 2C 41 58 00        2		DB '],AX',0 
    9717 2E58                        2	dataseg ends 
    9718 3A85  53                    2		push	bx 
    9719 3A86  BB 2E53 R             2		mov	bx,offset tempaddr 
    9720 3A89  E8 018C R             2		CALL	PRINTS 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-181


    9721 3A8C  5B                    2		pop	bx 
    9722 3A8D                        1	??01A6: 
    9723 3A8D  C3				ret
    9724 3A8E				mvtbim:	compil	2,<mov  [trace],bx>,'MOV  ['
    9725 2E58                        1	DATASEG	SEGMENT 
    9726 2E58  4D 4F 56 20 20 5B     1		DB 'MOV  [',0 
    9727 2E5F                        1	DATASEG ENDS 
    9728 3A8E  51                    1		push	cx 
    9729 3A8F  53                    1		PUSH	BX 
    9730 3A90  B9 0002               1		mov	cx,2 
    9731 3A93  BE 3AA1 R             1		mov	si,offset ??01A7 
    9732 3A96  BB 2E58 R             1		MOV	BX,offset STRA 
    9733 3A99  E8 34DE R             1		call	maccod 
    9734 3A9C  5B                    1		POP	BX 
    9735 3A9D  59                    1		pop	cx 
    9736 3A9E  EB 05 90              1		jmp	??01A8 
    9737 3AA1  89 1E 0114 R          1	??01A7:	mov  [trace],bx 
    9738 3AA5                        1	??01A8: 
    9739 3AA5  E8 3547 R			call	cword
    9740					comptext '],BX'
    9741 3AA8  8A 16 2CFE R          1		mov	dl,[codebug] 
    9742 3AAC  80 FA 00              1		cmp	dl,0 
    9743 3AAF  74 08                 1		jz	??01A9 
    9744 2E5F                        2	dataseg segment 
    9745 2E5F  5D 2C 42 58 00        2		DB '],BX',0 
    9746 2E64                        2	dataseg ends 
    9747 3AB1  53                    2		push	bx 
    9748 3AB2  BB 2E5F R             2		mov	bx,offset tempaddr 
    9749 3AB5  E8 018C R             2		CALL	PRINTS 
    9750 3AB8  5B                    2		pop	bx 
    9751 3AB9                        1	??01A9: 
    9752 3AB9  C3				ret
    9753 3ABA				mvtcim:	compil	2,<mov  [trace],cx>,'MOV  ['
    9754 2E64                        1	DATASEG	SEGMENT 
    9755 2E64  4D 4F 56 20 20 5B     1		DB 'MOV  [',0 
    9756 2E6B                        1	DATASEG ENDS 
    9757 3ABA  51                    1		push	cx 
    9758 3ABB  53                    1		PUSH	BX 
    9759 3ABC  B9 0002               1		mov	cx,2 
    9760 3ABF  BE 3ACD R             1		mov	si,offset ??01AA 
    9761 3AC2  BB 2E64 R             1		MOV	BX,offset STRA 
    9762 3AC5  E8 34DE R             1		call	maccod 
    9763 3AC8  5B                    1		POP	BX 
    9764 3AC9  59                    1		pop	cx 
    9765 3ACA  EB 05 90              1		jmp	??01AB 
    9766 3ACD  89 0E 0114 R          1	??01AA:	mov  [trace],cx 
    9767 3AD1                        1	??01AB: 
    9768 3AD1  E8 3547 R			call	cword
    9769					comptext '],CX'
    9770 3AD4  8A 16 2CFE R          1		mov	dl,[codebug] 
    9771 3AD8  80 FA 00              1		cmp	dl,0 
    9772 3ADB  74 08                 1		jz	??01AC 
    9773 2E6B                        2	dataseg segment 
    9774 2E6B  5D 2C 43 58 00        2		DB '],CX',0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-182


    9775 2E70                        2	dataseg ends 
    9776 3ADD  53                    2		push	bx 
    9777 3ADE  BB 2E6B R             2		mov	bx,offset tempaddr 
    9778 3AE1  E8 018C R             2		CALL	PRINTS 
    9779 3AE4  5B                    2		pop	bx 
    9780 3AE5                        1	??01AC: 
    9781 3AE5  C3				ret
    9782 3AE6				mvtdim:	compil	2,<mov  [trace],dx>,'MOV  ['
    9783 2E70                        1	DATASEG	SEGMENT 
    9784 2E70  4D 4F 56 20 20 5B     1		DB 'MOV  [',0 
    9785 2E77                        1	DATASEG ENDS 
    9786 3AE6  51                    1		push	cx 
    9787 3AE7  53                    1		PUSH	BX 
    9788 3AE8  B9 0002               1		mov	cx,2 
    9789 3AEB  BE 3AF9 R             1		mov	si,offset ??01AD 
    9790 3AEE  BB 2E70 R             1		MOV	BX,offset STRA 
    9791 3AF1  E8 34DE R             1		call	maccod 
    9792 3AF4  5B                    1		POP	BX 
    9793 3AF5  59                    1		pop	cx 
    9794 3AF6  EB 05 90              1		jmp	??01AE 
    9795 3AF9  89 16 0114 R          1	??01AD:	mov  [trace],dx 
    9796 3AFD                        1	??01AE: 
    9797 3AFD  E8 3547 R			call	cword
    9798					comptext '],DX'
    9799 3B00  8A 16 2CFE R          1		mov	dl,[codebug] 
    9800 3B04  80 FA 00              1		cmp	dl,0 
    9801 3B07  74 08                 1		jz	??01AF 
    9802 2E77                        2	dataseg segment 
    9803 2E77  5D 2C 44 58 00        2		DB '],DX',0 
    9804 2E7C                        2	dataseg ends 
    9805 3B09  53                    2		push	bx 
    9806 3B0A  BB 2E77 R             2		mov	bx,offset tempaddr 
    9807 3B0D  E8 018C R             2		CALL	PRINTS 
    9808 3B10  5B                    2		pop	bx 
    9809 3B11                        1	??01AF: 
    9810 3B11  C3				ret
    9811				
    9812 3B12				VALOFSYMB:
    9813					car	a,ax
    9814 3B12  E8 02EB R             2		CALL	NEWCARaax 
    9815 3B15  C3				ret
    9816 3B16  E8 330A R		cosymb:	call	makefsym
    9817					compil	1,<MOV AX,[trace]>,'MOV  AX,['
    9818 2E7C                        1	DATASEG	SEGMENT 
    9819 2E7C  4D 4F 56 20 20 41     1		DB 'MOV  AX,[',0 
    9820 2E86                        1	DATASEG ENDS 
    9821 3B19  51                    1		push	cx 
    9822 3B1A  53                    1		PUSH	BX 
    9823 3B1B  B9 0001               1		mov	cx,1 
    9824 3B1E  BE 3B2C R             1		mov	si,offset ??01B0 
    9825 3B21  BB 2E7C R             1		MOV	BX,offset STRA 
    9826 3B24  E8 34DE R             1		call	maccod 
    9827 3B27  5B                    1		POP	BX 
    9828 3B28  59                    1		pop	cx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-183


    9829 3B29  EB 04 90              1		jmp	??01B1 
    9830 3B2C  A1 0114 R             1	??01B0:	MOV AX,[trace] 
    9831 3B2F                        1	??01B1: 
    9832					car	a,ax
    9833 3B2F  E8 02EB R             2		CALL	NEWCARaax 
    9834 3B32  E8 3547 R			call	cword
    9835					comptext ']'
    9836 3B35  8A 16 2CFE R          1		mov	dl,[codebug] 
    9837 3B39  80 FA 00              1		cmp	dl,0 
    9838 3B3C  74 08                 1		jz	??01B2 
    9839 2E86                        2	dataseg segment 
    9840 2E86  5D 00                 2		DB ']',0 
    9841 2E88                        2	dataseg ends 
    9842 3B3E  53                    2		push	bx 
    9843 3B3F  BB 2E86 R             2		mov	bx,offset tempaddr 
    9844 3B42  E8 018C R             2		CALL	PRINTS 
    9845 3B45  5B                    2		pop	bx 
    9846 3B46                        1	??01B2: 
    9847 3B46  C3				ret
    9848				
    9849 3B47				coeval:
    9850 3B47  E8 39E4 R			call	csex
    9851					cocall	eval,'EVAL'
    9852 3B4A  B8 0CA5 R             1		mov	ax,offset eval 
    9853 3B4D  E8 35FD R             1		call	ccall 
    9854 3B50  8A 16 2CFE R          1		mov	dl,[codebug] 
    9855 3B54  80 FA 00              1		cmp	dl,0 
    9856 3B57  74 10                 1		jz	??01B3 
    9857 2E88                        2	dataseg segment 
    9858 2E88  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
    9859 2E91                        2	dataseg ends 
    9860 3B59  53                    2		push	bx 
    9861 3B5A  BB 2E88 R             2		mov	bx,offset tempaddr 
    9862 3B5D  E8 018C R             2		CALL	PRINTS 
    9863 3B60  5B                    2		pop	bx 
    9864 2E91                        2	dataseg segment 
    9865 2E91  45 56 41 4C 00        2		DB 'EVAL',0 
    9866 2E96                        2	dataseg ends 
    9867 3B61  53                    2		push	bx 
    9868 3B62  BB 2E91 R             2		mov	bx,offset tempaddr 
    9869 3B65  E8 018C R             2		CALL	PRINTS 
    9870 3B68  5B                    2		pop	bx 
    9871 3B69                        1	??01B3: 
    9872 3B69  C3				ret
    9873				
    9874 3B6A				CANTCOMP:
    9875 3B6A  A1 2E1E R			mov	ax,[original]
    9876 3B6D  EB D8				JMP	COEVAL
    9877				
    9878 3B6F				CNOARG:	car	a,ax ; eval-osote
    9879 3B6F  E8 02EB R             2		CALL	NEWCARaax 
    9880 3B72  E8 35FD R			call	ccall
    9881 3B75  C3				ret
    9882 3B76				CONEARG:
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-184


    9883					car	a,ax
    9884 3B76  E8 02EB R             2		CALL	NEWCARaax 
    9885 3B79  05 0003				add	ax,3
    9886 3B7C  50				push	ax
    9887					car	a,bx
    9888 3B7D  E8 0DCB R             2		CALL	NEWCARabx 
    9889 3B80  E8 3844 R			call	ncompi
    9890 3B83  58				POP	AX
    9891 3B84  E8 35FD R			CALL	CCALL
    9892 3B87  C3				RET
    9893				
    9894 3B88				ONE_OF_M:
    9895					car$cdr	a,b,bx
    9896 3B88  E8 0DCB R             3		CALL	NEWCARabx 
    9897 3B8B  E8 022A R             3		CALL	NEWCDRb 
    9898 3B8E  53				push	bx
    9899 3B8F  E8 380E R			call	stackarg
    9900 3B92  5B				pop	bx
    9901 3B93  C3				ret
    9902				
    9903 3B94				CTWOARG:
    9904					car	a,ax
    9905 3B94  E8 02EB R             2		CALL	NEWCARaax 
    9906 3B97  05 0003				add	ax,3
    9907 3B9A  50				push	ax
    9908 3B9B  E8 3BA3 R			call	ctwoar1
    9909 3B9E  58				POP	AX
    9910 3B9F  E8 35FD R			CALL	CCALL
    9911 3BA2  C3				RET
    9912 3BA3				CTWOAR1:
    9913 3BA3  E8 3B88 R			call	one_of_m
    9914					car	a,bx
    9915 3BA6  E8 0DCB R             2		CALL	NEWCARabx 
    9916 3BA9  E8 3844 R			CALL	NCOMPI
    9917 3BAC  E8 3D70 R			call	mov_bx_ax
    9918 3BAF				POP_AX:	COMPIL 	0,<POP ax>,'POP  AX'
    9919 2E96                        1	DATASEG	SEGMENT 
    9920 2E96  50 4F 50 20 20 41     1		DB 'POP  AX',0 
    9921 2E9E                        1	DATASEG ENDS 
    9922 3BAF  51                    1		push	cx 
    9923 3BB0  53                    1		PUSH	BX 
    9924 3BB1  B9 0001               1		MOV	CX,offset (??01B5-??01B4) 
    9925 3BB4  BE 3BC2 R             1		mov	si,offset ??01B4 
    9926 3BB7  BB 2E96 R             1		MOV	BX,offset STRA 
    9927 3BBA  E8 34DE R             1		call	maccod 
    9928 3BBD  5B                    1		POP	BX 
    9929 3BBE  59                    1		pop	cx 
    9930 3BBF  EB 02 90              1		jmp	??01B5 
    9931 3BC2  58                    1	??01B4:	POP ax 
    9932 3BC3                        1	??01B5: 
    9933 3BC3  C3				RET
    9934				
    9935				
    9936				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-185


    9937 3BC4				CTREARG:
    9938					car	a,ax
    9939 3BC4  E8 02EB R             2		CALL	NEWCARaax 
    9940 3BC7  05 0003				add	ax,3
    9941 3BCA  50				push	ax
    9942 3BCB  E8 3B88 R			call	one_of_m
    9943 3BCE  E8 3B88 R			call	one_of_m
    9944					car	a,bx
    9945 3BD1  E8 0DCB R             2		CALL	NEWCARabx 
    9946 3BD4  E8 3844 R			CALL	NCOMPI
    9947					compil	0,<mov cx,ax>,'MOV  CX,AX'
    9948 2E9E                        1	DATASEG	SEGMENT 
    9949 2E9E  4D 4F 56 20 20 43     1		DB 'MOV  CX,AX',0 
    9950 2EA9                        1	DATASEG ENDS 
    9951 3BD7  51                    1		push	cx 
    9952 3BD8  53                    1		PUSH	BX 
    9953 3BD9  B9 0002               1		MOV	CX,offset (??01B7-??01B6) 
    9954 3BDC  BE 3BEA R             1		mov	si,offset ??01B6 
    9955 3BDF  BB 2E9E R             1		MOV	BX,offset STRA 
    9956 3BE2  E8 34DE R             1		call	maccod 
    9957 3BE5  5B                    1		POP	BX 
    9958 3BE6  59                    1		pop	cx 
    9959 3BE7  EB 03 90              1		jmp	??01B7 
    9960 3BEA  8B C8                 1	??01B6:	mov cx,ax 
    9961 3BEC                        1	??01B7: 
    9962 3BEC				cont3arg:
    9963					COMPIL 	0,<POP Bx>,'POP  BX'
    9964 2EA9                        1	DATASEG	SEGMENT 
    9965 2EA9  50 4F 50 20 20 42     1		DB 'POP  BX',0 
    9966 2EB1                        1	DATASEG ENDS 
    9967 3BEC  51                    1		push	cx 
    9968 3BED  53                    1		PUSH	BX 
    9969 3BEE  B9 0001               1		MOV	CX,offset (??01B9-??01B8) 
    9970 3BF1  BE 3BFF R             1		mov	si,offset ??01B8 
    9971 3BF4  BB 2EA9 R             1		MOV	BX,offset STRA 
    9972 3BF7  E8 34DE R             1		call	maccod 
    9973 3BFA  5B                    1		POP	BX 
    9974 3BFB  59                    1		pop	cx 
    9975 3BFC  EB 02 90              1		jmp	??01B9 
    9976 3BFF  5B                    1	??01B8:	POP Bx 
    9977 3C00                        1	??01B9: 
    9978 3C00  E8 3BAF R			call	pop_ax
    9979 3C03  58				POP	AX
    9980 3C04  E8 35FD R			CALL	CCALL
    9981 3C07  C3				RET
    9982				
    9983				
    9984 3C08				CFOUARG:
    9985					car	a,ax
    9986 3C08  E8 02EB R             2		CALL	NEWCARaax 
    9987 3C0B  05 0003				add	ax,3
    9988 3C0E  50				push	ax
    9989 3C0F  E8 3B88 R			call	one_of_m
    9990 3C12  E8 3B88 R			call	one_of_m
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-186


    9991 3C15  E8 3B88 R			call	one_of_m
    9992					car	a,bx
    9993 3C18  E8 0DCB R             2		CALL	NEWCARabx 
    9994 3C1B  E8 3844 R			CALL	NCOMPI
    9995					compil	0,<mov dx,ax>,'MOV  DX,AX'
    9996 2EB1                        1	DATASEG	SEGMENT 
    9997 2EB1  4D 4F 56 20 20 44     1		DB 'MOV  DX,AX',0 
    9998 2EBC                        1	DATASEG ENDS 
    9999 3C1E  51                    1		push	cx 
   10000 3C1F  53                    1		PUSH	BX 
   10001 3C20  B9 0002               1		MOV	CX,offset (??01BB-??01BA) 
   10002 3C23  BE 3C31 R             1		mov	si,offset ??01BA 
   10003 3C26  BB 2EB1 R             1		MOV	BX,offset STRA 
   10004 3C29  E8 34DE R             1		call	maccod 
   10005 3C2C  5B                    1		POP	BX 
   10006 3C2D  59                    1		pop	cx 
   10007 3C2E  EB 03 90              1		jmp	??01BB 
   10008 3C31  8B D0                 1	??01BA:	mov dx,ax 
   10009 3C33                        1	??01BB: 
   10010					COMPIL 	0,<POP Cx>,'POP  CX'
   10011 2EBC                        1	DATASEG	SEGMENT 
   10012 2EBC  50 4F 50 20 20 43     1		DB 'POP  CX',0 
   10013 2EC4                        1	DATASEG ENDS 
   10014 3C33  51                    1		push	cx 
   10015 3C34  53                    1		PUSH	BX 
   10016 3C35  B9 0001               1		MOV	CX,offset (??01BD-??01BC) 
   10017 3C38  BE 3C46 R             1		mov	si,offset ??01BC 
   10018 3C3B  BB 2EBC R             1		MOV	BX,offset STRA 
   10019 3C3E  E8 34DE R             1		call	maccod 
   10020 3C41  5B                    1		POP	BX 
   10021 3C42  59                    1		pop	cx 
   10022 3C43  EB 02 90              1		jmp	??01BD 
   10023 3C46  59                    1	??01BC:	POP Cx 
   10024 3C47                        1	??01BD: 
   10025 3C47  EB A3				jmp	cont3arg
   10026				
   10027 3C49				CARGLIST:
   10028 3C49  50				push	ax
   10029 3C4A  8B C3				mov	ax,bx
   10030 3C4C  E8 1365 R			CALL	clist
   10031 3C4F  58				pop	ax
   10032					car	a,ax
   10033 3C50  E8 02EB R             2		CALL	NEWCARaax 
   10034 3C53  05 0003				add	ax,3
   10035 3C56  E9 35FD R			jmp	ccall
   10036				
   10037 3C59				CNUMAR1:
   10038					car	a,ax
   10039 3C59  E8 02EB R             2		CALL	NEWCARaax 
   10040 3C5C  05 0003				add	ax,3
   10041 3C5F  50				push	ax
   10042					car	a,bx
   10043 3C60  E8 0DCB R             2		CALL	NEWCARabx 
   10044 3C63  E8 3D15 R			CALL	NUMERIZ
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-187


   10045 3C66  58				POP	AX
   10046 3C67  C3				RET
   10047 3C68  E8 3C59 R		CNUMARG:CALL	CNUMAR1
   10048 3C6B  E8 35FD R			CALL	CCALL
   10049 3C6E  C3				RET
   10050 3C6F				CTWONU1:car	a,ax
   10051 3C6F  E8 02EB R             2		CALL	NEWCARaax 
   10052 3C72  05 0003				add	ax,3
   10053 3C75  50				push	ax
   10054					car$cdr	a,b,bx
   10055 3C76  E8 0DCB R             3		CALL	NEWCARabx 
   10056 3C79  E8 022A R             3		CALL	NEWCDRb 
   10057					typeof	dl,ax
   10058 3C7C  8B F8                 1		MOV     DI,ax 
   10059 3C7E  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10060 3C83  74 05                 1		JZ	??01BE 
   10061 3C85  E8 0023 R             1		CALL	EMSADDR 
   10062 3C88  EB 04                 1		jmp	short ??01BF 
   10063 3C8A                        1	??01BE: 
   10064 3C8A  8E 06 0100 R          1		mov	ES,[NODTYP] 
   10065 3C8E                        1	??01BF: 
   10066 3C8E  26: 8A 15             1		MOV	dl,ES:[DI] 
   10067 3C91  80 FA 03				cmp	dl,number
   10068 3C94  74 0A				jz	dontpush
   10069 3C96  53				PUSH	BX
   10070 3C97  E8 3D15 R			call	nUMERIZ
   10071 3C9A  5B				pop	bx
   10072 3C9B  E8 3CCE R			call	seconum
   10073 3C9E  58				POP	AX
   10074 3C9F  C3				RET
   10075				
   10076 3CA0				dontpush:
   10077 3CA0  50				push	ax
   10078 3CA1  E8 3CAA R			call	seconu1
   10079 3CA4  58				pop	ax
   10080 3CA5  E8 3D15 R			call	numeriz
   10081 3CA8  58				pop	ax
   10082 3CA9  C3				ret
   10083 3CAA				seconu1:
   10084					car	a,bx
   10085 3CAA  E8 0DCB R             2		CALL	NEWCARabx 
   10086					typeof	dl,ax
   10087 3CAD  8B F8                 1		MOV     DI,ax 
   10088 3CAF  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10089 3CB4  74 05                 1		JZ	??01C0 
   10090 3CB6  E8 0023 R             1		CALL	EMSADDR 
   10091 3CB9  EB 04                 1		jmp	short ??01C1 
   10092 3CBB                        1	??01C0: 
   10093 3CBB  8E 06 0100 R          1		mov	ES,[NODTYP] 
   10094 3CBF                        1	??01C1: 
   10095 3CBF  26: 8A 15             1		MOV	dl,ES:[DI] 
   10096 3CC2  80 FA 03				cmp	dl,number
   10097 3CC5  74 30				jz	intobx
   10098 3CC7  E8 3D15 R			CALL	NUMERIZ
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-188


   10099 3CCA  E8 3D70 R			call	mov_bx_ax
   10100 3CCD  C3				ret
   10101 3CCE				seconum:
   10102					car	a,bx
   10103 3CCE  E8 0DCB R             2		CALL	NEWCARabx 
   10104					typeof	dl,ax
   10105 3CD1  8B F8                 1		MOV     DI,ax 
   10106 3CD3  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10107 3CD8  74 05                 1		JZ	??01C2 
   10108 3CDA  E8 0023 R             1		CALL	EMSADDR 
   10109 3CDD  EB 04                 1		jmp	short ??01C3 
   10110 3CDF                        1	??01C2: 
   10111 3CDF  8E 06 0100 R          1		mov	ES,[NODTYP] 
   10112 3CE3                        1	??01C3: 
   10113 3CE3  26: 8A 15             1		MOV	dl,ES:[DI] 
   10114 3CE6  80 FA 03				cmp	dl,number
   10115 3CE9  74 0C				jz	intobx
   10116 3CEB  50				push	ax
   10117 3CEC  E8 382F R			call	push_AX
   10118 3CEF  58				pop	ax
   10119 3CF0  E8 3CAA R			call	seconu1
   10120 3CF3  E8 3BAF R			call	POP_AX
   10121 3CF6  C3				ret
   10122				
   10123 3CF7  50			intobx:	push	ax
   10124					compil 	1,<MOV BX,0>,'MOV  BX,'
   10125 2EC4                        1	DATASEG	SEGMENT 
   10126 2EC4  4D 4F 56 20 20 42     1		DB 'MOV  BX,',0 
   10127 2ECD                        1	DATASEG ENDS 
   10128 3CF8  51                    1		push	cx 
   10129 3CF9  53                    1		PUSH	BX 
   10130 3CFA  B9 0001               1		mov	cx,1 
   10131 3CFD  BE 3D0B R             1		mov	si,offset ??01C4 
   10132 3D00  BB 2EC4 R             1		MOV	BX,offset STRA 
   10133 3D03  E8 34DE R             1		call	maccod 
   10134 3D06  5B                    1		POP	BX 
   10135 3D07  59                    1		pop	cx 
   10136 3D08  EB 04 90              1		jmp	??01C5 
   10137 3D0B  BB 0000               1	??01C4:	MOV BX,0 
   10138 3D0E                        1	??01C5: 
   10139 3D0E  58				pop	ax
   10140					car	a,ax
   10141 3D0F  E8 02EB R             2		CALL	NEWCARaax 
   10142 3D12  E9 3547 R			jmp	cword
   10143				
   10144 3D15				NUMERIZ:
   10145					TYPEOF	DL,AX
   10146 3D15  8B F8                 1		MOV     DI,AX 
   10147 3D17  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10148 3D1C  74 05                 1		JZ	??01C6 
   10149 3D1E  E8 0023 R             1		CALL	EMSADDR 
   10150 3D21  EB 04                 1		jmp	short ??01C7 
   10151 3D23                        1	??01C6: 
   10152 3D23  8E 06 0100 R          1		mov	ES,[NODTYP] 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-189


   10153 3D27                        1	??01C7: 
   10154 3D27  26: 8A 15             1		MOV	DL,ES:[DI] 
   10155					WHEN	NUMBER,immnum
   10156 3D2A  80 FA 03              1		CMP	DL,NUMBER 
   10157 3D2D  75 03                 2		JNZ	$+5 
   10158 3D2F  EB 32 90              2		JMP	immnum 
   10159 3D32  90                    2		nop 
   10160 3D33  E8 38C0 R			call	ncompi_type
   10161 3D36  A0 2CFF R			mov	al,[retnumber]
   10162 3D39  C6 06 2CFF R 00			mov	[retnumber],0
   10163 3D3E  3C 00				cmp	al,0
   10164					rnz
   10165 3D40  74 01                 1		JZ	$+3 
   10166 3D42  C3                    1		RET 
   10167					COCALL	NUMVAL,'NUMVAL'
   10168 3D43  B8 0F1D R             1		mov	ax,offset NUMVAL 
   10169 3D46  E8 35FD R             1		call	ccall 
   10170 3D49  8A 16 2CFE R          1		mov	dl,[codebug] 
   10171 3D4D  80 FA 00              1		cmp	dl,0 
   10172 3D50  74 10                 1		jz	??01C8 
   10173 2ECD                        2	dataseg segment 
   10174 2ECD  09 3B 20 43 41 4C     2		DB '	; CALL ',0 
   10175 2ED6                        2	dataseg ends 
   10176 3D52  53                    2		push	bx 
   10177 3D53  BB 2ECD R             2		mov	bx,offset tempaddr 
   10178 3D56  E8 018C R             2		CALL	PRINTS 
   10179 3D59  5B                    2		pop	bx 
   10180 2ED6                        2	dataseg segment 
   10181 2ED6  4E 55 4D 56 41 4C     2		DB 'NUMVAL',0 
   10182 2EDD                        2	dataseg ends 
   10183 3D5A  53                    2		push	bx 
   10184 3D5B  BB 2ED6 R             2		mov	bx,offset tempaddr 
   10185 3D5E  E8 018C R             2		CALL	PRINTS 
   10186 3D61  5B                    2		pop	bx 
   10187 3D62                        1	??01C8: 
   10188 3D62  C3				RET
   10189 3D63				immnum:	car	a
   10190 3D63  E8 024B R             2		CALL	NEWCARa 
   10191 3D66  E9 3A2F R			jmp	cconst
   10192				
   10193 3D69  E8 3C6F R		CTWONUM:CALL	CTWONU1
   10194 3D6C  E8 35FD R			CALL	CCALL
   10195 3D6F  C3				RET
   10196				
   10197 3D70				MOV_BX_AX:
   10198					compil	0,<mov bx,ax>,'MOV  BX,AX'
   10199 2EDD                        1	DATASEG	SEGMENT 
   10200 2EDD  4D 4F 56 20 20 42     1		DB 'MOV  BX,AX',0 
   10201 2EE8                        1	DATASEG ENDS 
   10202 3D70  51                    1		push	cx 
   10203 3D71  53                    1		PUSH	BX 
   10204 3D72  B9 0002               1		MOV	CX,offset (??01CA-??01C9) 
   10205 3D75  BE 3D83 R             1		mov	si,offset ??01C9 
   10206 3D78  BB 2EDD R             1		MOV	BX,offset STRA 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-190


   10207 3D7B  E8 34DE R             1		call	maccod 
   10208 3D7E  5B                    1		POP	BX 
   10209 3D7F  59                    1		pop	cx 
   10210 3D80  EB 03 90              1		jmp	??01CA 
   10211 3D83  8B D8                 1	??01C9:	mov bx,ax 
   10212 3D85                        1	??01CA: 
   10213 3D85  C3				ret
   10214				
   10215 3D86				HEXWORD:
   10216 3D86  B2 24				mov	dl,'$'
   10217 3D88  E8 2882 R			call	printc
   10218 3D8B  50				PUSH	AX
   10219 3D8C  8A C4				MOV	AL,aH
   10220 3D8E  3C 00				cmp	al,0
   10221 3D90  74 03				jz	ybyte
   10222 3D92  E8 3D96 R			CALL	HEXBYTE
   10223 3D95  58			ybyte:	POP	AX
   10224 3D96  50			HEXBYTE:PUSH	AX
   10225 3D97  D0 C8				ROR	AL,1
   10226 3D99  D0 C8				ROR	AL,1
   10227 3D9B  D0 C8				ROR	AL,1
   10228 3D9D  D0 C8				ROR	AL,1
   10229 3D9F  E8 3DA3 R			CALL	NIBBLE
   10230 3DA2  58				POP	AX
   10231 3DA3  24 0F			nibble:	and	al,0fh
   10232 3DA5  3C 0A				cmp	AL,0AH
   10233 3DA7  72 05				JC	DECIMAL
   10234 3DA9  04 37				ADD	AL,'A'-0AH
   10235 3DAB  EB 03 90				JMP	HCHAR
   10236 3DAE				DECIMAL:	
   10237 3DAE  04 30				ADD	AL,'0'
   10238 3DB0  8A D0			HCHAR:	MOV	DL,AL
   10239 3DB2  E9 2882 R			JMP	PRINTC
   10240				
   10241					
   10242				;===============================================
   10243				IFNDEF	DXLISP
   10244 2EE8				dataseg segment
   10245 2EE8  0007[				parameters dw 7 dup(0)
   10246	   0000			
   10247			 ]	
   10248				
   10249 2EF6  0000				keep_sp	dw 0
   10250 2EF8  0020[				spawn_name db 32 dup(0)
   10251	   00			
   10252			 ]	
   10253				
   10254 2F18  0020[				command_name db 32 dup(0)
   10255	   00			
   10256			 ]	
   10257				
   10258 2F38  0040[				com_par db 64 dup(0)
   10259	   00			
   10260			 ]	
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-191


   10261				
   10262 2F78				dataseg ends
   10263				
   10264				lisp$subru 'nspawn',cantcomp,evalarg
   10265 2F78                        1	dataseg segment 
   10266 2F78  2E2D R                1		DW NXTSBR 
   10267 2F7A  3DB5 R                1		dw CODEADDR 
   10268 2F7C  3B6A R                1		dw cantcomp 
   10269 2F7E  6E 73 70 61 77 6E     1	  	DB 'nspawn',0 
   10270 2F85                        1	dataseg ends 
   10271 3DB5  E8 0EC7 R             1		CALL	evalarg 
   10272 3DB8  8B 1E 011F R			mov	bx,[lastmem]
   10273					j$nil	ax,nspawn
   10274 3DBC  3D 0000               1		CMP	ax,0 
   10275 3DBF  75 03                 2		JnZ	$+5 
   10276 3DC1  EB 38 90              2		JMP	nspawn 
   10277 3DC4  90                    2		nop 
   10278 3DC5  80 3E 18A0 R 00			cmp	[EMS_ON],0
   10279					JMPn	Z,nspawn
   10280 3DCA  74 03                 1		JZ	$+5 
   10281 3DCC  EB 2D 90              1		JMP	nspawn 
   10282 3DCF  90                    1		nop 
   10283					cdr	a,ax
   10284 3DD0  E8 08AB R             2		CALL	NEWCDRaax 
   10285 3DD3  BB 2EF8 R			mov	bx,offset spawn_name
   10286 3DD6  E8 257A R			call	exstr3
   10287 3DD9  E8 3EA0 R			call	saveima
   10288 3DDC  8B 1E 0100 R			mov	bx,[nodtyp]
   10289 3DE0  E8 3DFB R			call	nspawn
   10290 3DE3  A1 011D R			mov	ax,[espsp]
   10291 3DE6  8E C0				mov	es,ax
   10292 3DE8  8B 1E 011F R			mov	bx,[lastmem]
   10293 3DEC  2B D8				sub	bx,ax
   10294					msdos	4ah
   10295 3DEE  B4 4A                 1		mov	ah,4ah 
   10296 3DF0  CD 21                 1		int	21h 
   10297					jmpn	nc,stbler
   10298 3DF2  73 03                 1		Jnc	$+5 
   10299 3DF4  E9 3E78 R             1		JMP	stbler 
   10300 3DF7  90                    1		nop 
   10301 3DF8  E9 3EF7 R			jmp	loadima
   10302				
   10303 3DFB  53			nspawn:	push	bx
   10304 3DFC  E8 0F5A R			call	strarg
   10305 3DFF  BB 2F18 R			mov	bx,offset command_name
   10306 3E02  E8 257A R			call	exstr3
   10307 3E05  E8 0F5A R			call	strarg
   10308 3E08  BB 2F3A R			mov	bx,offset com_par+2
   10309 3E0B  E8 257A R			call	exstr3
   10310 3E0E  80 7F FF 00			cmp	byte ptr [bx-1],0
   10311 3E12  75 03				jnz	paril
   10312 3E14  4B				dec 	bx
   10313 3E15  FE C9				dec	cl
   10314 3E17  C6 07 0D			paril:	mov	byte ptr [bx],13
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-192


   10315 3E1A  FE C1				inc	cl
   10316 3E1C  88 0E 2F38 R			mov	[com_par],cl
   10317 3E20  C6 06 2F39 R 20			mov	byte ptr [com_par+1],020h
   10318 3E25  B8 2F38 R			mov	ax,offset com_par
   10319 3E28  A3 2EEA R			mov	[parameters+2],ax
   10320 3E2B  2E: A1 3F4D R			mov	ax,cs:[cs_dataseg]
   10321 3E2F  A3 2EEC R			mov	[parameters+4],ax
   10322 3E32  8E 06 011D R			mov	es,[espsp]
   10323 3E36  26: A1 002C			mov	ax,es:[2ch]
   10324 3E3A  A3 2EE8 R			mov	[parameters],ax ; ????
   10325				;
   10326 3E3D  5B				pop	bx
   10327 3E3E  8C C0				mov	ax,es
   10328 3E40  2B D8				sub	bx,ax
   10329					msdos	4ah
   10330 3E42  B4 4A                 1		mov	ah,4ah 
   10331 3E44  CD 21                 1		int	21h 
   10332 3E46  72 30				jc	stbler
   10333 3E48  2E: A1 3F4D R			mov	ax,cs:[cs_dataseg]
   10334 3E4C  8E C0				mov	es,ax
   10335 3E4E  BB 2EE8 R			mov	bx,offset parameters
   10336 3E51  BA 2F18 R			mov	dx,offset command_name
   10337 3E54  89 26 2EF6 R			mov	keep_sp,sp
   10338 3E58  B0 00				mov	al,0
   10339					msdos	4bh
   10340 3E5A  B4 4B                 1		mov	ah,4bh 
   10341 3E5C  CD 21                 1		int	21h 
   10342 3E5E  72 2C				jc	execer
   10343 3E60  2E: 8B 1E 3F4D R			mov	bx,cs:[cs_dataseg]
   10344 3E65  8E DB				mov	ds,bx
   10345 3E67  2E: 8B 1E 3F4F R			mov	bx,cs:[cs_stackseg]
   10346 3E6C  8E D3				mov	ss,bx
   10347 3E6E  8B 26 2EF6 R			mov	sp,keep_sp
   10348 3E72  E8 0000 R			call	ems_reset
   10349 3E75  E9 019E R			jmp	tret
   10350				
   10351 3E78  E8 05C9 R		stbler:	call	maknum
   10352					lisp$error ' SETBLOCK error = '
   10353 2F85                        1		dataseg segment 
   10354 2F85  20 53 45 54 42 4C     1		   db ' SETBLOCK error = ',0 
   10355 2F98                        1		dataseg ends 
   10356 3E7B  C7 06 1896 R 0000     1		mov	[throwtag],nil 
   10357 3E81  BB 2F85 R             1		MOV	BX,OFFSET tempaddr 
   10358 3E84  89 1E 18B5 R          1		mov	[erheen_syy],bx 
   10359 3E88  E8 4044 R             1		call	ERHE 
   10360 3E8B  C3                    1		ret 
   10361 3E8C  E8 05C9 R		execer: call	maknum
   10362					lisp$error ' EXEC error = '
   10363 2F98                        1		dataseg segment 
   10364 2F98  20 45 58 45 43 20     1		   db ' EXEC error = ',0 
   10365 2FA7                        1		dataseg ends 
   10366 3E8F  C7 06 1896 R 0000     1		mov	[throwtag],nil 
   10367 3E95  BB 2F98 R             1		MOV	BX,OFFSET tempaddr 
   10368 3E98  89 1E 18B5 R          1		mov	[erheen_syy],bx 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-193


   10369 3E9C  E8 4044 R             1		call	ERHE 
   10370 3E9F  C3                    1		ret 
   10371				
   10372				savim1	macro segment
   10373					pop	bx
   10374					push	bx
   10375					mov	ax,[segment]
   10376					call	savim2
   10377					endm
   10378				
   10379 3EA0				saveima:
   10380 3EA0  BA 2EF8 R			mov	dx,offset spawn_name
   10381 3EA3  B9 0000				mov	cx,0
   10382					msdos	3ch
   10383 3EA6  B4 3C                 1		mov	ah,3ch 
   10384 3EA8  CD 21                 1		int	21h 
   10385					jmpn	nc,creerr
   10386 3EAA  73 03                 1		Jnc	$+5 
   10387 3EAC  E9 2952 R             1		JMP	creerr 
   10388 3EAF  90                    1		nop 
   10389 3EB0  50				push	ax
   10390					savim1	NODtYP
   10391 3EB1  5B                    1		pop	bx 
   10392 3EB2  53                    1		push	bx 
   10393 3EB3  A1 0100 R             1		mov	ax,[NODtYP] 
   10394 3EB6  E8 3EDD R             1		call	savim2 
   10395					savim1	CARLOW
   10396 3EB9  5B                    1		pop	bx 
   10397 3EBA  53                    1		push	bx 
   10398 3EBB  A1 0102 R             1		mov	ax,[CARLOW] 
   10399 3EBE  E8 3EDD R             1		call	savim2 
   10400					savim1	CARHIG
   10401 3EC1  5B                    1		pop	bx 
   10402 3EC2  53                    1		push	bx 
   10403 3EC3  A1 0104 R             1		mov	ax,[CARHIG] 
   10404 3EC6  E8 3EDD R             1		call	savim2 
   10405					savim1	CDRLOW
   10406 3EC9  5B                    1		pop	bx 
   10407 3ECA  53                    1		push	bx 
   10408 3ECB  A1 0106 R             1		mov	ax,[CDRLOW] 
   10409 3ECE  E8 3EDD R             1		call	savim2 
   10410					savim1	CDRHIG
   10411 3ED1  5B                    1		pop	bx 
   10412 3ED2  53                    1		push	bx 
   10413 3ED3  A1 0108 R             1		mov	ax,[CDRHIG] 
   10414 3ED6  E8 3EDD R             1		call	savim2 
   10415 3ED9  58				pop	ax
   10416 3EDA  E9 2970 R			jmp	close
   10417				
   10418 3EDD  8B 0E 010A R		savim2:	mov	cx,[lastnode]
   10419 3EE1  8E D8				mov	ds,ax
   10420 3EE3  BA 0000				mov	dx,0
   10421					msdos	40h
   10422 3EE6  B4 40                 1		mov	ah,40h 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-194


   10423 3EE8  CD 21                 1		int	21h 
   10424 3EEA  2E: A1 3F4D R			mov	ax,cs:[cs_dataseg]
   10425 3EEE  8E D8				mov	ds,ax
   10426					jmpn	nc,ioerr
   10427 3EF0  73 03                 1		Jnc	$+5 
   10428 3EF2  E9 286E R             1		JMP	ioerr 
   10429 3EF5  90                    1		nop 
   10430 3EF6  C3				ret
   10431				
   10432				loaim1	macro segment
   10433					pop	bx
   10434					push	bx
   10435					mov	ax,[segment]
   10436					call	loaim2
   10437					endm
   10438				
   10439 3EF7  BA 2EF8 R		loadima:mov	dx,offset spawn_name
   10440 3EFA  B0 00				mov	al,0
   10441					msdos	3dh
   10442 3EFC  B4 3D                 1		mov	ah,3dh 
   10443 3EFE  CD 21                 1		int	21h 
   10444					jmpn	nc,creerr
   10445 3F00  73 03                 1		Jnc	$+5 
   10446 3F02  E9 2952 R             1		JMP	creerr 
   10447 3F05  90                    1		nop 
   10448 3F06  50				push	ax
   10449					loaim1	NODTYP
   10450 3F07  5B                    1		pop	bx 
   10451 3F08  53                    1		push	bx 
   10452 3F09  A1 0100 R             1		mov	ax,[NODTYP] 
   10453 3F0C  E8 3F33 R             1		call	loaim2 
   10454					loaim1	CARLOW
   10455 3F0F  5B                    1		pop	bx 
   10456 3F10  53                    1		push	bx 
   10457 3F11  A1 0102 R             1		mov	ax,[CARLOW] 
   10458 3F14  E8 3F33 R             1		call	loaim2 
   10459					loaim1	CARHIG
   10460 3F17  5B                    1		pop	bx 
   10461 3F18  53                    1		push	bx 
   10462 3F19  A1 0104 R             1		mov	ax,[CARHIG] 
   10463 3F1C  E8 3F33 R             1		call	loaim2 
   10464					loaim1	CDRLOW
   10465 3F1F  5B                    1		pop	bx 
   10466 3F20  53                    1		push	bx 
   10467 3F21  A1 0106 R             1		mov	ax,[CDRLOW] 
   10468 3F24  E8 3F33 R             1		call	loaim2 
   10469					loaim1	CDRHIG
   10470 3F27  5B                    1		pop	bx 
   10471 3F28  53                    1		push	bx 
   10472 3F29  A1 0108 R             1		mov	ax,[CDRHIG] 
   10473 3F2C  E8 3F33 R             1		call	loaim2 
   10474 3F2F  58				pop	ax
   10475 3F30  E9 2970 R			jmp	close
   10476				
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-195


   10477 3F33  8B 0E 010A R		loaim2:	mov	cx,[lastnode]
   10478 3F37  8E D8				mov	ds,ax
   10479 3F39  BA 0000				mov	dx,0
   10480					msdos	3fh
   10481 3F3C  B4 3F                 1		mov	ah,3fh 
   10482 3F3E  CD 21                 1		int	21h 
   10483 3F40  2E: A1 3F4D R			mov	ax,cs:[cs_dataseg]
   10484 3F44  8E D8				mov	ds,ax
   10485					jmpn	nc,ioerr
   10486 3F46  73 03                 1		Jnc	$+5 
   10487 3F48  E9 286E R             1		JMP	ioerr 
   10488 3F4B  90                    1		nop 
   10489 3F4C  C3				ret
   10490				
   10491				
   10492 2FA7				dataseg segment
   10493 2FA7  ---- R				ds_exeseg dw exeseg
   10494 2FA9  ---- R				ds_rapaseg dw rapaseg
   10495 2FAB				dataseg ends
   10496				
   10497 3F4D  ---- R				cs_dataseg dw dataseg
   10498 3F4F  ---- R				cs_stackseg dw stackseg
   10499				
   10500				lisp$subru 'continue-in',cantcomp
   10501 2FAB                        1	dataseg segment 
   10502 2FAB  2F78 R                1		DW NXTSBR 
   10503 2FAD  3F51 R                1		dw CODEADDR 
   10504 2FAF  3B6A R                1		dw cantcomp 
   10505 2FB1  63 6F 6E 74 69 6E     1	  	DB 'continue-in',0 
   10506 2FBD                        1	dataseg ends 
   10507 3F51  80 3E 18A0 R 00			cmp	[EMS_ON],0
   10508					JMPN	Z,NILRET
   10509 3F56  74 03                 1		JZ	$+5 
   10510 3F58  E9 019A R             1		JMP	NILRET 
   10511 3F5B  90                    1		nop 
   10512 3F5C  8E 06 2FA7 R			mov	es,[ds_exeseg]
   10513 3F60  8B C4				mov	ax,sp
   10514 3F62  26: A3 0010			mov	es:[10H],ax
   10515 3F66  B8 ---- R			mov	ax,stackseg
   10516 3F69  2D ---- R			sub	ax,rapaseg
   10517 3F6C  26: A3 000E			mov	es:[0eH],ax
   10518				
   10519 3F70  A1 011F R			mov	ax,[lastmem]
   10520 3F73  8B 1E 2FA9 R			mov	bx,[ds_rapaseg]
   10521 3F77  2B C3				sub	ax,bx
   10522 3F79  B1 05				mov	cl,5
   10523 3F7B  D3 E8				shr	ax,cl
   10524 3F7D  05 0004				add	ax,4
   10525 3F80  26: A3 0004			mov	es:[4],ax
   10526				
   10527 3F84  50				push	ax	; length by 512
   10528 3F85  E8 0F5A R			call	strarg
   10529 3F88  E8 293D R			call	create
   10530 3F8B  E8 0F1D R			call	numval
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-196


   10531 3F8E  8B D8				mov	bx,ax
   10532 3F90  53				push	bx
   10533 3F91  1E				push	ds
   10534 3F92  8E 1E 2FA7 R			mov	ds,[ds_exeseg]
   10535 3F96  B9 0020				mov	cx,20H
   10536 3F99  BA 0000				mov	dx,0
   10537					msdos	40h
   10538 3F9C  B4 40                 1		mov	ah,40h 
   10539 3F9E  CD 21                 1		int	21h 
   10540 3FA0  1F				pop	ds
   10541 3FA1  5B				pop	bx
   10542 3FA2  72 23				jc	ioerr2
   10543 3FA4  59				pop	cx	; length
   10544 3FA5  8E 1E 2FA9 R			mov	ds,[ds_rapaseg]
   10545 3FA9  1E			coco2:	push	ds
   10546 3FAA  51				push	cx
   10547 3FAB  53				push	bx
   10548 3FAC  B9 0200				mov	cx,512
   10549 3FAF  BA 0000				mov	dx,0
   10550					msdos	40h
   10551 3FB2  B4 40                 1		mov	ah,40h 
   10552 3FB4  CD 21                 1		int	21h 
   10553 3FB6  5B				pop	bx
   10554 3FB7  59				pop	cx
   10555 3FB8  1F				pop	ds
   10556 3FB9  72 0C				jc	ioerr2
   10557 3FBB  49				dec	cx
   10558 3FBC  74 13				jz	coco3
   10559 3FBE  8C D8				mov	ax,ds
   10560 3FC0  05 0020				add	ax,(512/16)
   10561 3FC3  8E D8				mov	ds,ax
   10562 3FC5  EB E2				jmp	coco2
   10563 3FC7				ioerr2:
   10564 3FC7  2E: 8B 1E 3F4D R			mov	bx,cs:[cs_dataseg]
   10565 3FCC  8E DB				mov	ds,bx
   10566 3FCE  E9 286E R			jmp	ioerr
   10567				
   10568 3FD1  2E: A1 3F4D R		coco3:	mov	ax,cs:[cs_dataseg]
   10569 3FD5  8E D8				mov	ds,ax
   10570 3FD7  8B C3				mov	ax,bx
   10571 3FD9  E9 2970 R			jmp	close
   10572				
   10573				
   10574 3FDC				continue_in:
   10575 3FDC  51				push	cx
   10576 3FDD  E8 4109 R			call	set_interrupts
   10577 3FE0  58				pop	ax
   10578 3FE1  E9 05C9 R			jmp	maknum
   10579				
   10580				ENDIF
   10581				
   10582				lisp$subru 'error-reset',conearg,onearg
   10583 2FBD                        1	dataseg segment 
   10584 2FBD  2FAB R                1		DW NXTSBR 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-197


   10585 2FBF  3FE4 R                1		dw CODEADDR 
   10586 2FC1  3B76 R                1		dw conearg 
   10587 2FC3  65 72 72 6F 72 2D     1	  	DB 'error-reset',0 
   10588 2FCF                        1	dataseg ends 
   10589 3FE4  E8 0ECD R             1		CALL	onearg 
   10590					lisp$error 'BREAK '
   10591 2FCF                        1		dataseg segment 
   10592 2FCF  42 52 45 41 4B 20     1		   db 'BREAK ',0 
   10593 2FD6                        1		dataseg ends 
   10594 3FE7  C7 06 1896 R 0000     1		mov	[throwtag],nil 
   10595 3FED  BB 2FCF R             1		MOV	BX,OFFSET tempaddr 
   10596 3FF0  89 1E 18B5 R          1		mov	[erheen_syy],bx 
   10597 3FF4  E8 4044 R             1		call	ERHE 
   10598 3FF7  C3                    1		ret 
   10599				
   10600 3FF8				breikki:;sti
   10601					;mov	dx,cs:[cs_dataseg]
   10602					;mov	ds,dx
   10603 3FF8  B8 0000				mov	ax,0	
   10604					lisp$error	' **BREAK** '
   10605 2FD6                        1		dataseg segment 
   10606 2FD6  20 2A 2A 42 52 45     1		   db ' **BREAK** ',0 
   10607 2FE2                        1		dataseg ends 
   10608 3FFB  C7 06 1896 R 0000     1		mov	[throwtag],nil 
   10609 4001  BB 2FD6 R             1		MOV	BX,OFFSET tempaddr 
   10610 4004  89 1E 18B5 R          1		mov	[erheen_syy],bx 
   10611 4008  E8 4044 R             1		call	ERHE 
   10612 400B  C3                    1		ret 
   10613 400C  B8 0000			diverr:	mov	ax,0
   10614					lisp$error ' DIVIDE BY ZERO '
   10615 2FE2                        1		dataseg segment 
   10616 2FE2  20 44 49 56 49 44     1		   db ' DIVIDE BY ZERO ',0 
   10617 2FF3                        1		dataseg ends 
   10618 400F  C7 06 1896 R 0000     1		mov	[throwtag],nil 
   10619 4015  BB 2FE2 R             1		MOV	BX,OFFSET tempaddr 
   10620 4018  89 1E 18B5 R          1		mov	[erheen_syy],bx 
   10621 401C  E8 4044 R             1		call	ERHE 
   10622 401F  C3                    1		ret 
   10623 2FF3				dataseg segment
   10624 2FF3  0000				this_trace dw 0
   10625 2FF5				dataseg ends
   10626				
   10627				LISP$SUBRU 'err-set',cantcomp
   10628 2FF5                        1	dataseg segment 
   10629 2FF5  2FBD R                1		DW NXTSBR 
   10630 2FF7  4020 R                1		dw CODEADDR 
   10631 2FF9  3B6A R                1		dw cantcomp 
   10632 2FFB  65 72 72 2D 73 65     1	  	DB 'err-set',0 
   10633 3003                        1	dataseg ends 
   10634					frame	erhe3
   10635 4020  BF 4058 R             1		mov	di,offset erhe3 
   10636 4023  57                    1		push	DI 
   10637 4024  FF 36 1894 R          1		PUSH	[STACKMARK] 
   10638 4028  89 26 1894 R          1		MOV	[STACKMARK],SP 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-198


   10639 402C  C7 06 0114 R 0000		mov	[trace],nil
   10640 4032  E8 0EC7 R			call	evalarg
   10641 4035  8B 26 1894 R			mov	sp,[stackmark]
   10642 4039  8F 06 1894 R			pop	[stackmark]
   10643 403D  59				pop	cx
   10644 403E  BB 0000				mov	bx,nil
   10645 4041  E9 05AE R			jmp	cons
   10646				
   10647 4044  8B 1E 0114 R		ERHE:	mov	bx,[trace]
   10648 4048  89 1E 2FF3 R			mov	[this_trace],bx
   10649 404C  2E: C6 06 1DA7 R 90		MOV	BYTE PTR CS:[FRAME_RET],90H ; NOP
   10650 4052  E8 0000 R			call	ems_reset
   10651 4055  E9 2080 R			jmp	framexit
   10652				
   10653 4058  2E: C6 06 1DA7 R C3	ERHE3:	MOV	BYTE PTR CS:[FRAME_RET],0C3H ; RET
   10654 405E  E8 40AF R			call	printer
   10655 4061  E9 019A R			jmp	nilret
   10656				
   10657 4064  2E: C6 06 1DA7 R C3	ERHE2:	MOV	BYTE PTR CS:[FRAME_RET],0C3H ; RET
   10658 406A  2E: 8E 1E 3F4D R			mov	ds,cs:[cs_dataseg]
   10659 406F  8C 1E 2B2A R			mov	[dsreg],ds
   10660 4073  2E: C6 06 2E41 R C3		mov	byte ptr cs:[intarg-1],0C3H ; ret
   10661				else
   10662 4079  BC 4E20 R			MOV	SP,offset topofstack
   10663				endif
   10664					frame	erhe2
   10665 407C  BF 4064 R             1		mov	di,offset erhe2 
   10666 407F  57                    1		push	DI 
   10667 4080  FF 36 1894 R          1		PUSH	[STACKMARK] 
   10668 4084  89 26 1894 R          1		MOV	[STACKMARK],SP 
   10669 4088  E8 40AF R			call	printer
   10670				IFNDEF	DXLISP
   10671 408B  BB 0004				mov	bx,4
   10672 408E  53			CLOSEA:	PUSH	BX
   10673					msdos	3eH
   10674 408F  B4 3E                 1		mov	ah,3eH 
   10675 4091  CD 21                 1		int	21h 
   10676 4093  5B				POP	BX
   10677 4094  43				INC	BX
   10678 4095  83 FB 14				CMP	BX,20
   10679 4098  75 F4				JNZ	CLOSEA
   10680				ENDIF
   10681 409A  B8 0000				mov	ax,nil
   10682 409D  A3 0110 R			mov	[argsta],ax
   10683 40A0  A3 0112 R			mov	[enviro],ax
   10684 40A3  A1 3064 R			mov	ax,[autost]
   10685 40A6  E8 0CA5 R			call	eval
   10686 40A9  E8 0CA5 R			call	eval
   10687 40AC  E9 417F R			jmp	looppi
   10688				
   10689 40AF  B9 0000			PRINTER:mov	cx,0
   10690 40B2  89 0E 2695 R			mov	[inchn],cx
   10691 40B6  89 0E 2697 R			mov	[outchn],cx
   10692 40BA  88 0E 2694 R			mov	[nxtch],cl
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-199


   10693 40BE  50				PUSH	AX
   10694 40BF  E8 0C7E R			call	crlf
   10695					priths 'ERROR, '
   10696 3003                        1	dataseg segment 
   10697 3003  45 52 52 4F 52 2C     1		DB 'ERROR, ',0 
   10698 300B                        1	dataseg ends 
   10699 40C2  53                    1		push	bx 
   10700 40C3  BB 3003 R             1		mov	bx,offset tempaddr 
   10701 40C6  E8 018C R             1		CALL	PRINTS 
   10702 40C9  5B                    1		pop	bx 
   10703 40CA  8B 1E 18B5 R			mov	bx,[erheen_syy]
   10704 40CE  E8 018C R			CALL	PRINTS
   10705 40D1  58				POP	AX
   10706 40D2  83 3E 1896 R 00			cmp	[throwtag],nil
   10707 40D7  74 09				jz	eithrow
   10708 40D9  A1 1896 R			mov	ax,[throwtag]
   10709 40DC  C7 06 1896 R 0000		mov	[throwtag],nil
   10710 40E2  E8 0A47 R		eithrow:CALL	PRINT
   10711 40E5  E8 0C7E R			call	crlf
   10712 40E8  A1 2FF3 R			mov	ax,[this_trace]
   10713					j$nil	ax,nrstrd
   10714 40EB  3D 0000               1		CMP	ax,0 
   10715 40EE  75 03                 2		JnZ	$+5 
   10716 40F0  EB 16 90              2		JMP	nrstrd 
   10717 40F3  90                    2		nop 
   10718					priths	'Trace:'
   10719 300B                        1	dataseg segment 
   10720 300B  54 72 61 63 65 3A     1		DB 'Trace:',0 
   10721 3012                        1	dataseg ends 
   10722 40F4  53                    1		push	bx 
   10723 40F5  BB 300B R             1		mov	bx,offset tempaddr 
   10724 40F8  E8 018C R             1		CALL	PRINTS 
   10725 40FB  5B                    1		pop	bx 
   10726 40FC  A1 2FF3 R			mov	ax,[this_trace]
   10727 40FF  C7 06 2FF3 R 0000		mov	[this_trace],nil
   10728 4105  E8 1A07 R			call	pprint
   10729 4108				nrstrd:
   10730 4108  C3				RET
   10731				
   10732 4109				set_interrupts:
   10733						IFNDEF	DXLISP
   10734 4109  8C C8				mov	ax,cs
   10735 410B  8E D8				mov	ds,ax
   10736 410D  BA 3FF8 R			mov	dx,offset breikki
   10737 4110  B0 23				mov	al,23h
   10738					msdos	25h
   10739 4112  B4 25                 1		mov	ah,25h 
   10740 4114  CD 21                 1		int	21h 
   10741 4116  BA 400C R			mov	dx,offset diverr
   10742 4119  B0 00				mov	al,0
   10743					msdos	25h
   10744 411B  B4 25                 1		mov	ah,25h 
   10745 411D  CD 21                 1		int	21h 
   10746						endif
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-200


   10747 411F  2E: A1 3F4D R		set_i2:	MOV	AX,cs:[cs_dataseg]
   10748 4123  8E D8				MOV	DS,AX
   10749 4125  A3 2B2A R			mov	[dsreg],ax
   10750 4128  C3				ret
   10751				
   10752				
   10753 4129  2E: A1 3F4D R		LISP:	MOV	AX,cs:[cs_dataseg]
   10754 412D  8E D8				MOV	DS,AX
   10755						ELSE
   10756 412F  8C 06 011D R			mov	[espsp],es
   10757 4133  B8 0000			 	mov	ax,0
   10758 4136  A3 2695 R			mov	[inchn],ax
   10759 4139  A3 2697 R			mov	[outchn],ax
   10760 413C  2E: A1 3F4F R			MOV	ax,cs:[cs_stackseg]
   10761 4140  8E D0				mov	ss,ax
   10762 4142  BC 4E20 R			MOV	SP,offset topofstack
   10763						ENDIF
   10764 4145  E8 4194 R			call	setnodseg
   10765 4148  E8 41E9 R			CALL	RESETMEM
   10766 414B  E8 42B8 R			call	tarpeelliset
   10767 414E  B2 00				MOV	DL,0
   10768 4150  88 16 2694 R			mov	[nxtch],dl
   10769					priths 'Welcome to NOKOLISP-86, ('
   10770 3012                        1	dataseg segment 
   10771 3012  57 65 6C 63 6F 6D     1		DB 'Welcome to NOKOLISP-86, (',0 
   10772 302C                        1	dataseg ends 
   10773 4154  53                    1		push	bx 
   10774 4155  BB 3012 R             1		mov	bx,offset tempaddr 
   10775 4158  E8 018C R             1		CALL	PRINTS 
   10776 415B  5B                    1		pop	bx 
   10777 415C  A1 010A R			mov	ax,[lastnode]
   10778 415F  E8 3D86 R			call	hexword
   10779					priths <' nodes free)',13,10>
   10780 302C                        1	dataseg segment 
   10781 302C  20 6E 6F 64 65 73     1		DB ' nodes free)',13,10,0 
   10782 303B                        1	dataseg ends 
   10783 4162  53                    1		push	bx 
   10784 4163  BB 302C R             1		mov	bx,offset tempaddr 
   10785 4166  E8 018C R             1		CALL	PRINTS 
   10786 4169  5B                    1		pop	bx 
   10787 416A  E8 4109 R			call	set_interrupts
   10788					frame	erhe2
   10789 416D  BF 4064 R             1		mov	di,offset erhe2 
   10790 4170  57                    1		push	DI 
   10791 4171  FF 36 1894 R          1		PUSH	[STACKMARK] 
   10792 4175  89 26 1894 R          1		MOV	[STACKMARK],SP 
   10793 4179  A1 010C R			mov	ax,oblist
   10794 417C  E8 0A47 R			call	print
   10795 417F  E8 0699 R		 	call	read
   10796 4182  E8 0CA5 R			call	eval
   10797 4185  50				push	ax
   10798					ELSE
   10799					priths  ' '
   10800 303B                        1	dataseg segment 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-201


   10801 303B  20 00                 1		DB ' ',0 
   10802 303D                        1	dataseg ends 
   10803 4186  53                    1		push	bx 
   10804 4187  BB 303B R             1		mov	bx,offset tempaddr 
   10805 418A  E8 018C R             1		CALL	PRINTS 
   10806 418D  5B                    1		pop	bx 
   10807					ENDIF
   10808 418E  58				pop	ax
   10809 418F  E8 1A07 R			call	pprint
   10810 4192  EB EB				jmp     looppi
   10811				
   10812 4194				FREECODE:
   10813				
   10814 4194				SETNODSEG:
   10815						IFNDEF	DXLISP
   10816 4194  B8 3FF0				mov	ax,3FF0H
   10817						ENDIF
   10818 4197  A3 010A R			mov	[lastnode],ax
   10819 419A				setnods2:
   10820 419A  D1 E8				shr	ax,1
   10821 419C  D1 E8				shr	ax,1
   10822 419E  D1 E8				shr	ax,1
   10823 41A0  D1 E8				shr	ax,1
   10824 41A2  BB ---- R			mov	bx,codeseg
   10825 41A5  81 C3 1000			add	bx,1000h
   10826 41A9  89 1E 0100 R			mov	[nodtyp],bx
   10827 41AD  03 D8				add	bx,ax
   10828 41AF  89 1E 0102 R			mov	[carlow],bx
   10829 41B3  03 D8				add	bx,ax
   10830 41B5  89 1E 0104 R			mov	[carhig],bx
   10831 41B9  03 D8				add	bx,ax
   10832 41BB  89 1E 0106 R			mov	[cdrlow],bx
   10833 41BF  03 D8				add	bx,ax
   10834 41C1  89 1E 0108 R			mov	[cdrhig],bx
   10835 41C5  03 D8				add	bx,ax
   10836 41C7  89 1E 011F R			mov	[lastmem],bx
   10837 41CB  C3				ret
   10838				
   10839 41CC				RESETSUBR:
   10840				 	R$NIL	BX
   10841 41CC  83 FB 00              1		CMP	BX,0 
   10842 41CF  75 01                 2		JNZ	$+3 
   10843 41D1  C3                    2		RET 
   10844 41D2  53				PUSH	BX
   10845 41D3  8B 47 02				MOV	ax,[BX+2]
   10846 41D6  8B 5F 04				mov	bx,[bx+4]
   10847 41D9  E8 05F0 R			CALL	MAKSBR
   10848 41DC  5B				POP	BX
   10849 41DD  53				PUSH	BX
   10850 41DE  83 C3 06				ADD	BX,6
   10851 41E1  E8 08F5 R			CALL	oblnam
   10852 41E4  5B				POP	BX
   10853 41E5  8B 1F				MOV	BX,[BX]
   10854 41E7  EB E3				JMP	RESETSUBR
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-202


   10855				
   10856				
   10857				
   10858				
   10859 41E9				RESETMEM:
   10860 41E9  B8 0000			 	MOV	ax,0
   10861 41EC  BB 0000				MOV	BX,NIL
   10862 41EF				RSM3:	SETTYPE	AX,aL
   10863 41EF  8B F8                 1		MOV     DI,AX 
   10864 41F1  8A D0                 1		MOV	DL,aL 
   10865 41F3  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10866 41F8  74 05                 1		JZ	??01CB 
   10867 41FA  E8 0023 R             1		CALL	EMSADDR 
   10868 41FD  EB 04                 1		jmp	short ??01CC 
   10869 41FF                        1	??01CB: 
   10870 41FF  8E 06 0100 R          1		mov	ES,[NODTYP] 
   10871 4203                        1	??01CC: 
   10872 4203  26: 88 15             1		MOV     ES:[DI],DL 
   10873					rplaca	ax,b
   10874 4206  8B F8                 1		MOV	DI,ax 
   10875 4208  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
   10876 420D  74 09                 2		JZ	??01CD 
   10877 420F  E8 0023 R             2		CALL	EMSADDR 
   10878 4212  26: 89 5D 04          2		MOV	ES:[DI+4],bX 
   10879 4216  EB 0E                 2		JMP	SHORT ??01CE 
   10880 4218  8E 06 0102 R          2	??01CD:	mov	ES,[CARLOW] 
   10881 421C  26: 88 1D             2		mov     ES:[DI],bL 
   10882 421F  8E 06 0104 R          2		mov	ES,[CARHIG] 
   10883 4223  26: 88 3D             2		mov	ES:[DI],bH 
   10884 4226                        2	??01CE: 
   10885					rplacd	ax,b
   10886 4226  8B F8                 1		MOV	DI,ax 
   10887 4228  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
   10888 422D  74 09                 2		JZ	??01CF 
   10889 422F  E8 0023 R             2		CALL	EMSADDR 
   10890 4232  26: 89 5D 06          2		MOV	ES:[DI+6],bX 
   10891 4236  EB 0E                 2		JMP	SHORT ??01D0 
   10892 4238  8E 06 0106 R          2	??01CF:	mov	ES,[CDRLOW] 
   10893 423C  26: 88 1D             2		mov     ES:[DI],bL 
   10894 423F  8E 06 0108 R          2		mov	ES,[CDRHIG] 
   10895 4243  26: 88 3D             2		mov	ES:[DI],bH 
   10896 4246                        2	??01D0: 
   10897 4246  40				INC	AX
   10898 4247  3D 0300				CMP	AX,fstnode
   10899 424A  75 A3				JNZ	RSM3
   10900 424C  B2 10				MOV	DL,GARBA
   10901 424E				RSM2:	SETTYPE	AX,DL
   10902 424E  8B F8                 1		MOV     DI,AX 
   10903 4250  8A D2                 1		MOV	DL,DL 
   10904 4252  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10905 4257  74 05                 1		JZ	??01D1 
   10906 4259  E8 0023 R             1		CALL	EMSADDR 
   10907 425C  EB 04                 1		jmp	short ??01D2 
   10908 425E                        1	??01D1: 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-203


   10909 425E  8E 06 0100 R          1		mov	ES,[NODTYP] 
   10910 4262                        1	??01D2: 
   10911 4262  26: 88 15             1		MOV     ES:[DI],DL 
   10912 4265  40				INC	AX
   10913 4266  3B 06 010A R			CMP	AX,[lastnode]
   10914 426A  75 E2				JNZ	RSM2
   10915 426C  B8 0003				mov	ax,ZERONUM
   10916 426F				RSM4:	settype	ax,number
   10917 426F  8B F8                 1		MOV     DI,ax 
   10918 4271  B2 03                 1		MOV	DL,number 
   10919 4273  80 3E 18A0 R 00       1		CMP	[EMS_ON],0 
   10920 4278  74 05                 1		JZ	??01D3 
   10921 427A  E8 0023 R             1		CALL	EMSADDR 
   10922 427D  EB 04                 1		jmp	short ??01D4 
   10923 427F                        1	??01D3: 
   10924 427F  8E 06 0100 R          1		mov	ES,[NODTYP] 
   10925 4283                        1	??01D4: 
   10926 4283  26: 88 15             1		MOV     ES:[DI],DL 
   10927 4286  8B D8				mov	BX,AX
   10928 4288  83 EB 03				SUB	BX,ZERONUM
   10929					rplaca	ax,b
   10930 428B  8B F8                 1		MOV	DI,ax 
   10931 428D  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
   10932 4292  74 09                 2		JZ	??01D5 
   10933 4294  E8 0023 R             2		CALL	EMSADDR 
   10934 4297  26: 89 5D 04          2		MOV	ES:[DI+4],bX 
   10935 429B  EB 0E                 2		JMP	SHORT ??01D6 
   10936 429D  8E 06 0102 R          2	??01D5:	mov	ES,[CARLOW] 
   10937 42A1  26: 88 1D             2		mov     ES:[DI],bL 
   10938 42A4  8E 06 0104 R          2		mov	ES,[CARHIG] 
   10939 42A8  26: 88 3D             2		mov	ES:[DI],bH 
   10940 42AB                        2	??01D6: 
   10941 42AB  40				inc	ax
   10942 42AC  3D 0300				cmp	ax,fstnode
   10943 42AF  75 BE				jnz	rsm4
   10944 42B1  BB 2FF5 R			MOV	BX,offset NXTSBR
   10945 42B4  E8 41CC R			CALL	RESETSUBR
   10946 42B7  C3				RET
   10947				
   10948				tarpeel	macro	nimi,str
   10949				dataseg	segment
   10950					tempaddr = $
   10951					  db	str,0
   10952					nimi dw 0
   10953				dataseg	ends
   10954					mov	ax,0
   10955					mov	bx,offset tempaddr
   10956					call	retuid
   10957					mov	[nimi],ax
   10958					endm
   10959 42B8				tarpeelliset:
   10960					tarpeel	quotes,'quote'
   10961 303D                        1	dataseg	segment 
   10962 303D  71 75 6F 74 65 00     1		  db	'quote',0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-204


   10963 3043  0000                  1		quotes dw 0 
   10964 3045                        1	dataseg	ends 
   10965 42B8  B8 0000               1		mov	ax,0 
   10966 42BB  BB 303D R             1		mov	bx,offset tempaddr 
   10967 42BE  E8 071C R             1		call	retuid 
   10968 42C1  A3 3043 R             1		mov	[quotes],ax 
   10969					rplaca	ax,a
   10970 42C4  8B F8                 1		MOV	DI,ax 
   10971 42C6  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
   10972 42CB  74 09                 2		JZ	??01D7 
   10973 42CD  E8 0023 R             2		CALL	EMSADDR 
   10974 42D0  26: 89 45 04          2		MOV	ES:[DI+4],aX 
   10975 42D4  EB 0E                 2		JMP	SHORT ??01D8 
   10976 42D6  8E 06 0102 R          2	??01D7:	mov	ES,[CARLOW] 
   10977 42DA  26: 88 05             2		mov     ES:[DI],aL 
   10978 42DD  8E 06 0104 R          2		mov	ES,[CARHIG] 
   10979 42E1  26: 88 25             2		mov	ES:[DI],aH 
   10980 42E4                        2	??01D8: 
   10981					tarpeel	trues,'t'
   10982 3045                        1	dataseg	segment 
   10983 3045  74 00                 1		  db	't',0 
   10984 3047  0000                  1		trues dw 0 
   10985 3049                        1	dataseg	ends 
   10986 42E4  B8 0000               1		mov	ax,0 
   10987 42E7  BB 3045 R             1		mov	bx,offset tempaddr 
   10988 42EA  E8 071C R             1		call	retuid 
   10989 42ED  A3 3047 R             1		mov	[trues],ax 
   10990					rplaca	ax,a
   10991 42F0  8B F8                 1		MOV	DI,ax 
   10992 42F2  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
   10993 42F7  74 09                 2		JZ	??01D9 
   10994 42F9  E8 0023 R             2		CALL	EMSADDR 
   10995 42FC  26: 89 45 04          2		MOV	ES:[DI+4],aX 
   10996 4300  EB 0E                 2		JMP	SHORT ??01DA 
   10997 4302  8E 06 0102 R          2	??01D9:	mov	ES,[CARLOW] 
   10998 4306  26: 88 05             2		mov     ES:[DI],aL 
   10999 4309  8E 06 0104 R          2		mov	ES,[CARHIG] 
   11000 430D  26: 88 25             2		mov	ES:[DI],aH 
   11001 4310                        2	??01DA: 
   11002					tarpeel functions,'function'
   11003 3049                        1	dataseg	segment 
   11004 3049  66 75 6E 63 74 69     1		  db	'function',0 
   11005 3052  0000                  1		functions dw 0 
   11006 3054                        1	dataseg	ends 
   11007 4310  B8 0000               1		mov	ax,0 
   11008 4313  BB 3049 R             1		mov	bx,offset tempaddr 
   11009 4316  E8 071C R             1		call	retuid 
   11010 4319  A3 3052 R             1		mov	[functions],ax 
   11011					tarpeel	lambda,'lambda'
   11012 3054                        1	dataseg	segment 
   11013 3054  6C 61 6D 62 64 61     1		  db	'lambda',0 
   11014 305B  0000                  1		lambda dw 0 
   11015 305D                        1	dataseg	ends 
   11016 431C  B8 0000               1		mov	ax,0 
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-205


   11017 431F  BB 3054 R             1		mov	bx,offset tempaddr 
   11018 4322  E8 071C R             1		call	retuid 
   11019 4325  A3 305B R             1		mov	[lambda],ax 
   11020					tarpeel	autost,'autost'
   11021 305D                        1	dataseg	segment 
   11022 305D  61 75 74 6F 73 74     1		  db	'autost',0 
   11023 3064  0000                  1		autost dw 0 
   11024 3066                        1	dataseg	ends 
   11025 4328  B8 0000               1		mov	ax,0 
   11026 432B  BB 305D R             1		mov	bx,offset tempaddr 
   11027 432E  E8 071C R             1		call	retuid 
   11028 4331  A3 3064 R             1		mov	[autost],ax 
   11029					rplaca	ax,a
   11030 4334  8B F8                 1		MOV	DI,ax 
   11031 4336  80 3E 18A0 R 00       2		CMP	[EMS_ON],0 
   11032 433B  74 09                 2		JZ	??01DB 
   11033 433D  E8 0023 R             2		CALL	EMSADDR 
   11034 4340  26: 89 45 04          2		MOV	ES:[DI+4],aX 
   11035 4344  EB 0E                 2		JMP	SHORT ??01DC 
   11036 4346  8E 06 0102 R          2	??01DB:	mov	ES,[CARLOW] 
   11037 434A  26: 88 05             2		mov     ES:[DI],aL 
   11038 434D  8E 06 0104 R          2		mov	ES,[CARHIG] 
   11039 4351  26: 88 25             2		mov	ES:[DI],aH 
   11040 4354                        2	??01DC: 
   11041 4354  C3				ret
   11042				
   11043				
   11044 4355				CODESEG ENDS
   11045				
   11046				IFNDEF	DXLISP
   11047 3066				dataseg segment
   11048 3066  00			MERKIT db 0
   11049 3067  00			db 0
   11050 3068  00			db 0
   11051 3069  00			db 0
   11052 306A  00			db 0
   11053 306B  00			db 0
   11054 306C  00			db 0
   11055 306D  00			db 0
   11056 306E  00			db 0
   11057				
   11058 306F  00			db 0
   11059 3070  04			db 00100b
   11060 3071  04			db 00100b
   11061 3072  04			db 00100b
   11062 3073  04			db 00100b
   11063 3074  00			db 0
   11064 3075  04			db 00100b
   11065 3076  00			db 0
   11066 3077  00			db 0
   11067				
   11068 3078  00			db 0
   11069 3079  0A			db 01010b
   11070 307A  0A			db 01010b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-206


   11071 307B  00			db 0
   11072 307C  00			db 0
   11073 307D  00			db 0
   11074 307E  00			db 0
   11075 307F  00			db 0
   11076 3080  00			db 0
   11077				;#
   11078 3081  00			db 0
   11079 3082  0A			db 01010b
   11080 3083  0A			db 01010b
   11081 3084  1F			db 11111b
   11082 3085  0A			db 01010b
   11083 3086  1F			db 11111b
   11084 3087  0A			db 01010b
   11085 3088  0A			db 01010b
   11086 3089  00			db 0
   11087				;$
   11088 308A  00			db 0
   11089 308B  04			db 00100b
   11090 308C  0F			db 01111b
   11091 308D  14			db 10100b
   11092 308E  0E			db 01110b
   11093 308F  05			db 00101b
   11094 3090  1E			db 11110b
   11095 3091  04			db 00100b
   11096 3092  00			db 0
   11097				;%
   11098 3093  00			db 0
   11099 3094  18			db 11000b
   11100 3095  19			db 11001b
   11101 3096  02			db 00010b
   11102 3097  04			db 00100b
   11103 3098  08			db 01000b
   11104 3099  13			db 10011b
   11105 309A  03			db 00011b
   11106 309B  00			db 0
   11107				;&
   11108 309C  00			db 0
   11109 309D  08			db 01000b
   11110 309E  14			db 10100b
   11111 309F  08			db 01000b
   11112 30A0  15			db 10101b
   11113 30A1  13			db 10011b
   11114 30A2  0D			db 01101b
   11115 30A3  00			db 0
   11116 30A4  00			db 0
   11117				
   11118				;'
   11119 30A5  00			db 0
   11120 30A6  04			db 00100b
   11121 30A7  08			db 01000b
   11122 30A8  00			db 0
   11123 30A9  00			db 0
   11124 30AA  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-207


   11125 30AB  00			db 0
   11126 30AC  00			db 0
   11127 30AD  00			db 0
   11128				;(
   11129 30AE  00			db 0
   11130 30AF  02			db 00010b
   11131 30B0  04			db 00100b
   11132 30B1  08			db 01000b
   11133 30B2  08			db 01000b
   11134 30B3  08			db 01000b
   11135 30B4  04			db 00100b
   11136 30B5  02			db 00010b
   11137 30B6  00			db 0
   11138				
   11139 30B7  00			db 0
   11140 30B8  08			db 01000b
   11141 30B9  04			db 00100b
   11142 30BA  02			db 00010b
   11143 30BB  02			db 00010b
   11144 30BC  02			db 00010b
   11145 30BD  04			db 00100b
   11146 30BE  08			db 01000b
   11147 30BF  00			db 0
   11148				;*
   11149 30C0  00			db 0
   11150 30C1  04			db 00100b
   11151 30C2  15			db 10101b
   11152 30C3  0E			db 01110b
   11153 30C4  04			db 00100b
   11154 30C5  0E			db 01110b
   11155 30C6  15			db 10101b
   11156 30C7  04			db 00100b
   11157 30C8  00			db 0
   11158				
   11159				;+
   11160 30C9  00			db 0
   11161 30CA  00			db 0
   11162 30CB  04			db 00100b
   11163 30CC  04			db 00100b
   11164 30CD  1F			db 11111b
   11165 30CE  04			db 00100b
   11166 30CF  04			db 00100b
   11167 30D0  00			db 0
   11168 30D1  00			db 0
   11169				;A,
   11170 30D2  00			db 0
   11171 30D3  00			db 0
   11172 30D4  00			db 0
   11173 30D5  00			db 00000b
   11174 30D6  00			db 00000b
   11175 30D7  0C			db 01100b
   11176 30D8  0C			db 01100b
   11177 30D9  04			db 00100b
   11178 30DA  08			db 01000b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-208


   11179				
   11180 30DB  00			db 0
   11181 30DC  00			db 0
   11182 30DD  00			db 0
   11183 30DE  1F			db 11111b
   11184 30DF  00			db 0
   11185 30E0  00			db 0
   11186 30E1  00			db 0
   11187 30E2  00			db 0
   11188 30E3  00			db 0
   11189				;. 
   11190 30E4  00			db 0
   11191 30E5  00			db 0
   11192 30E6  00			db 0
   11193 30E7  00			db 0
   11194 30E8  00			db 0
   11195 30E9  0C			db 01100b
   11196 30EA  0C			db 01100b
   11197 30EB  00			db 0
   11198 30EC  00			db 0
   11199				;/
   11200 30ED  00			db 00000b
   11201 30EE  01			db 00001b
   11202 30EF  02			db 00010b
   11203 30F0  04			db 00100b
   11204 30F1  08			db 01000b
   11205 30F2  10			db 10000b
   11206 30F3  00			db 0
   11207 30F4  00			db 0
   11208 30F5  00			db 0
   11209				;0
   11210 30F6  00			db 0
   11211 30F7  0E			db 01110b
   11212 30F8  13			db 10011b
   11213 30F9  15			db 10101b
   11214 30FA  19			db 11001b
   11215 30FB  11			db 10001b
   11216 30FC  0E			db 01110b
   11217 30FD  00			db 0
   11218 30FE  00			db 0
   11219				;1
   11220 30FF  00			db 0
   11221 3100  04			db 00100b
   11222 3101  0C			db 01100b
   11223 3102  04			db 00100b
   11224 3103  04			db 00100b
   11225 3104  04			db 00100b
   11226 3105  0E			db 01110b
   11227 3106  00			db 0
   11228 3107  00			db 0
   11229				;2
   11230 3108  00			db 0
   11231 3109  0E			db 01110b
   11232 310A  11			db 10001b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-209


   11233 310B  01			db 00001b
   11234 310C  06			db 00110b
   11235 310D  08			db 01000b
   11236 310E  1F			db 11111b
   11237 310F  00			db 0
   11238 3110  00			db 0
   11239				;3
   11240 3111  00			db 0
   11241 3112  0F			db 01111b
   11242 3113  02			db 00010b
   11243 3114  06			db 00110b
   11244 3115  01			db 00001b
   11245 3116  11			db 10001b
   11246 3117  0E			db 01110b
   11247 3118  00			db 0
   11248 3119  00			db 0
   11249				;4
   11250 311A  00			db 0
   11251 311B  02			db 00010b
   11252 311C  06			db 00110b
   11253 311D  0A			db 01010b
   11254 311E  1F			db 11111b
   11255 311F  02			db 00010b
   11256 3120  02			db 00010b
   11257 3121  00			db 0
   11258 3122  00			db 0
   11259				;5
   11260 3123  00			db 0
   11261 3124  0F			db 01111b
   11262 3125  08			db 01000b
   11263 3126  1E			db 11110b
   11264 3127  01			db 00001b
   11265 3128  11			db 10001b
   11266 3129  0E			db 01110b
   11267 312A  00			db 0
   11268 312B  00			db 0
   11269				;6
   11270 312C  00			db 0
   11271 312D  06			db 00110b
   11272 312E  08			db 01000b
   11273 312F  16			db 10110b
   11274 3130  19			db 11001b
   11275 3131  11			db 10001b
   11276 3132  0E			db 01110b
   11277 3133  00			db 0
   11278 3134  00			db 0
   11279				
   11280 3135  00			db 0
   11281 3136  1F			db 11111b
   11282 3137  02			db 00010b
   11283 3138  04			db 00100b
   11284 3139  08			db 01000b
   11285 313A  08			db 01000b
   11286 313B  08			db 01000b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-210


   11287 313C  00			db 0
   11288 313D  00			db 0
   11289				
   11290 313E  00			db 0
   11291 313F  0E			db 01110b
   11292 3140  11			db 10001b
   11293 3141  0E			db 01110b
   11294 3142  11			db 10001b
   11295 3143  11			db 10001b
   11296 3144  0E			db 01110b
   11297 3145  00			db 0
   11298 3146  00			db 0
   11299				;98
   11300 3147  00			db 0
   11301 3148  0E			db 01110b
   11302 3149  11			db 10001b
   11303 314A  11			db 10001b
   11304 314B  0F			db 01111b
   11305 314C  02			db 00010b
   11306 314D  0C			db 01100b
   11307 314E  00			db 0
   11308 314F  00			db 0
   11309				;:
   11310 3150  00			db 0
   11311 3151  00			db 0
   11312 3152  0C			db 01100b
   11313 3153  0C			db 01100b
   11314 3154  00			db 0
   11315 3155  0C			db 01100b
   11316 3156  0C			db 01100b
   11317 3157  00			db 0
   11318 3158  00			db 0
   11319				
   11320 3159  00			db 0
   11321 315A  00			db 0
   11322 315B  0C			db 01100b
   11323 315C  0C			db 01100b
   11324 315D  00			db 0
   11325 315E  0C			db 01100b
   11326 315F  0C			db 01100b
   11327 3160  04			db 00100b
   11328 3161  08			db 01000b
   11329				;<
   11330 3162  00			db 0
   11331 3163  01			db 0001b
   11332 3164  02			db 0010b
   11333 3165  04			db 0100b
   11334 3166  08			db 1000b
   11335 3167  04			db 0100b
   11336 3168  02			db 0010b
   11337 3169  01			db 0001b
   11338 316A  00			db 0
   11339				
   11340 316B  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-211


   11341 316C  00			db 0
   11342 316D  1F			db 11111b
   11343 316E  00			db 0
   11344 316F  1F			db 11111b
   11345 3170  00			db 0
   11346 3171  00			db 0
   11347 3172  00			db 0
   11348 3173  00			db 0
   11349				
   11350 3174  00			db 0
   11351 3175  08			db 01000b
   11352 3176  04			db 00100b
   11353 3177  02			db 00010b
   11354 3178  01			db 00001b
   11355 3179  02			db 00010b
   11356 317A  04			db 00100b
   11357 317B  08			db 01000b
   11358 317C  00			db 0
   11359				;?
   11360 317D  00			db 0
   11361 317E  0E			db 01110b
   11362 317F  11			db 10001b
   11363 3180  02			db 00010b
   11364 3181  04			db 00100b
   11365 3182  00			db 0
   11366 3183  04			db 00100b
   11367 3184  00			db 0
   11368 3185  00			db 0
   11369				;@
   11370 3186  00			db 0
   11371 3187  0E			db 01110b
   11372 3188  11			db 10001b
   11373 3189  15			db 10101b
   11374 318A  17			db 10111b
   11375 318B  16			db 10110b
   11376 318C  10			db 10000b
   11377 318D  0F			db 01111b
   11378 318E  00			db 0
   11379				;A
   11380 318F  00			db 0
   11381 3190  0E			db 01110b
   11382 3191  11			db 10001b
   11383 3192  11			db 10001b
   11384 3193  1F			db 11111b
   11385 3194  11			db 10001b
   11386 3195  11			db 10001b
   11387 3196  00			db 0
   11388 3197  00			db 0
   11389				
   11390 3198  00			db 0
   11391 3199  1E			db 11110b
   11392 319A  11			db 10001b
   11393 319B  1E			db 11110b
   11394 319C  11			db 10001b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-212


   11395 319D  11			db 10001b
   11396 319E  1E			db 11110b
   11397 319F  00			db 0
   11398 31A0  00			db 0
   11399				
   11400 31A1  00			db 0
   11401 31A2  0E			db 01110b
   11402 31A3  11			db 10001b
   11403 31A4  10			db 10000b
   11404 31A5  10			db 10000b
   11405 31A6  11			db 10001b
   11406 31A7  0E			db 01110b
   11407 31A8  00			db 0
   11408 31A9  00			db 0
   11409				
   11410 31AA  00			db 0
   11411 31AB  1E			db 11110b
   11412 31AC  11			db 10001b
   11413 31AD  11			db 10001b
   11414 31AE  11			db 10001b
   11415 31AF  11			db 10001b
   11416 31B0  1E			db 11110b
   11417 31B1  00			db 0
   11418 31B2  00			db 0
   11419				
   11420 31B3  00			db 0
   11421 31B4  1F			db 11111b
   11422 31B5  10			db 10000b
   11423 31B6  1C			db 11100b
   11424 31B7  10			db 10000b
   11425 31B8  10			db 10000b
   11426 31B9  1F			db 11111b
   11427 31BA  00			db 0
   11428 31BB  00			db 0
   11429				
   11430 31BC  00			db 0
   11431 31BD  1F			db 11111b
   11432 31BE  10			db 10000b
   11433 31BF  1C			db 11100b
   11434 31C0  10			db 10000b
   11435 31C1  10			db 10000b
   11436 31C2  10			db 10000b
   11437 31C3  00			db 0
   11438 31C4  00			db 0
   11439				
   11440 31C5  00			db 0
   11441 31C6  0E			db 01110b
   11442 31C7  11			db 10001b
   11443 31C8  10			db 10000b
   11444 31C9  13			db 10011b
   11445 31CA  11			db 10001b
   11446 31CB  0E			db 01110b
   11447 31CC  00			db 0
   11448 31CD  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-213


   11449				
   11450 31CE  00			db 0
   11451 31CF  11			db 10001b
   11452 31D0  11			db 10001b
   11453 31D1  1F			db 11111b
   11454 31D2  11			db 10001b
   11455 31D3  11			db 10001b
   11456 31D4  11			db 10001b
   11457 31D5  00			db 0
   11458 31D6  00			db 0
   11459				
   11460 31D7  00			db 0
   11461 31D8  0E			db 01110b
   11462 31D9  04			db 00100b
   11463 31DA  04			db 00100b
   11464 31DB  04			db 00100b
   11465 31DC  04			db 00100b
   11466 31DD  0E			db 01110b
   11467 31DE  00			db 0
   11468 31DF  00			db 0
   11469				
   11470 31E0  00			db 0
   11471 31E1  07			db 00111b
   11472 31E2  02			db 00010b
   11473 31E3  02			db 00010b
   11474 31E4  02			db 00010b
   11475 31E5  12			db 10010b
   11476 31E6  0C			db 01100b
   11477 31E7  00			db 0
   11478 31E8  00			db 0
   11479				
   11480 31E9  00			db 0
   11481 31EA  11			db 10001b
   11482 31EB  12			db 10010b
   11483 31EC  14			db 10100b
   11484 31ED  18			db 11000b
   11485 31EE  14			db 10100b
   11486 31EF  13			db 10011b
   11487 31F0  00			db 0
   11488 31F1  00			db 0
   11489				
   11490 31F2  00			db 0
   11491 31F3  10			db 10000b
   11492 31F4  10			db 10000b
   11493 31F5  10			db 10000b
   11494 31F6  10			db 10000b
   11495 31F7  10			db 10000b
   11496 31F8  1F			db 11111b
   11497 31F9  00			db 0
   11498 31FA  00			db 0
   11499				 
   11500 31FB  00			db 0
   11501 31FC  11			db 10001b
   11502 31FD  1B			db 11011b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-214


   11503 31FE  15			db 10101b
   11504 31FF  15			db 10101b
   11505 3200  11			db 10001b
   11506 3201  11			db 10001b
   11507 3202  00			db 0
   11508 3203  00			db 0
   11509				
   11510 3204  00			db 0
   11511 3205  11			db 10001b
   11512 3206  19			db 11001b
   11513 3207  15			db 10101b
   11514 3208  15			db 10101b
   11515 3209  13			db 10011b
   11516 320A  11			db 10001b
   11517 320B  00			db 0
   11518 320C  00			db 0
   11519				
   11520 320D  00			db 0
   11521 320E  0E			db 01110b
   11522 320F  11			db 10001b
   11523 3210  11			db 10001b
   11524 3211  11			db 10001b
   11525 3212  11			db 10001b
   11526 3213  0E			db 01110b
   11527 3214  00			db 0
   11528 3215  00			db 0
   11529				;ABCDEFGHIJKLMNOPQRSTUVXYZ{
   11530 3216  00			db 0
   11531 3217  1E			db 11110b
   11532 3218  11			db 10001b
   11533 3219  11			db 10001b
   11534 321A  1E			db 11110b
   11535 321B  10			db 10000b
   11536 321C  10			db 10000b
   11537 321D  00			db 0
   11538 321E  00			db 0
   11539				
   11540 321F  00			db 0
   11541 3220  0E			db 01110b
   11542 3221  11			db 10001b
   11543 3222  11			db 10001b
   11544 3223  11			db 10001b
   11545 3224  15			db 10101b
   11546 3225  0E			db 01110b
   11547 3226  04			db 00100b
   11548 3227  00			db 0
   11549				
   11550 3228  00			db 0
   11551 3229  1E			db 11110b
   11552 322A  11			db 10001b
   11553 322B  11			db 10001b
   11554 322C  1E			db 11110b
   11555 322D  12			db 10010b
   11556 322E  11			db 10001b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-215


   11557 322F  00			db 0
   11558 3230  00			db 0
   11559				
   11560 3231  00			db 0
   11561 3232  0E			db 01110b
   11562 3233  10			db 10000b
   11563 3234  0E			db 01110b
   11564 3235  01			db 00001b
   11565 3236  11			db 10001b
   11566 3237  0E			db 01110b
   11567 3238  00			db 0
   11568 3239  00			db 0
   11569				
   11570 323A  00			db 0
   11571 323B  1F			db 11111b
   11572 323C  04			db 00100b
   11573 323D  04			db 00100b
   11574 323E  04			db 00100b
   11575 323F  04			db 00100b
   11576 3240  04			db 00100b
   11577 3241  00			db 0
   11578 3242  00			db 0
   11579				
   11580 3243  00			db 0
   11581 3244  11			db 10001b
   11582 3245  11			db 10001b
   11583 3246  11			db 10001b
   11584 3247  11			db 10001b
   11585 3248  11			db 10001b
   11586 3249  0E			db 01110b
   11587 324A  00			db 0
   11588 324B  00			db 0
   11589				
   11590 324C  00			db 0
   11591 324D  11			db 10001b
   11592 324E  11			db 10001b
   11593 324F  11			db 10001b
   11594 3250  11			db 10001b
   11595 3251  0A			db 01010b
   11596 3252  04			db 00100b
   11597 3253  00			db 0
   11598 3254  00			db 0
   11599				
   11600 3255  00			db 0
   11601 3256  11			db 10001b
   11602 3257  11			db 10001b
   11603 3258  11			db 10001b
   11604 3259  15			db 10101b
   11605 325A  1B			db 11011b
   11606 325B  11			db 10001b
   11607 325C  00			db 0
   11608 325D  00			db 0
   11609				
   11610 325E  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-216


   11611 325F  11			db 10001b
   11612 3260  0A			db 01010b
   11613 3261  04			db 00100b
   11614 3262  0A			db 01010b
   11615 3263  11			db 10001b
   11616 3264  11			db 10001b
   11617 3265  00			db 0
   11618 3266  00			db 0
   11619				
   11620 3267  00			db 0
   11621 3268  11			db 10001b
   11622 3269  11			db 10001b
   11623 326A  0E			db 01110b
   11624 326B  04			db 00100b
   11625 326C  04			db 00100b
   11626 326D  04			db 00100b
   11627 326E  00			db 0
   11628 326F  00			db 0
   11629				
   11630 3270  00			db 0
   11631 3271  1F			db 11111b
   11632 3272  02			db 00010b
   11633 3273  04			db 00100b
   11634 3274  08			db 01000b
   11635 3275  10			db 10000b
   11636 3276  1F			db 11111b
   11637 3277  00			db 0
   11638 3278  00			db 0
   11639				
   11640 3279  11			db 10001b
   11641 327A  04			db 00100b
   11642 327B  0A			db 01010b
   11643 327C  11			db 10001b
   11644 327D  1F			db 11111b
   11645 327E  11			db 10001b
   11646 327F  11			db 10001b
   11647 3280  00			db 0
   11648 3281  00			db 0
   11649				
   11650 3282  11			db 10001b
   11651 3283  0E			db 01110b
   11652 3284  11			db 10001b
   11653 3285  11			db 10001b
   11654 3286  11			db 10001b
   11655 3287  11			db 10001b
   11656 3288  0E			db 01110b
   11657 3289  00			db 0
   11658 328A  00			db 0
   11659				
   11660 328B  00			db 0
   11661 328C  0E			db 01110b
   11662 328D  02			db 00010b
   11663 328E  02			db 00010b
   11664 328F  02			db 00010b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-217


   11665 3290  02			db 00010b
   11666 3291  0E			db 01110b
   11667 3292  00			db 0
   11668 3293  00			db 0
   11669				
   11670 3294  00			db 0
   11671 3295  04			db 00100b
   11672 3296  0A			db 01010b
   11673 3297  11			db 10001b
   11674 3298  00			db 00000b
   11675 3299  00			db 00000b
   11676 329A  00			db 00000b
   11677 329B  00			db 0
   11678 329C  00			db 0
   11679				
   11680 329D  00			db 0
   11681 329E  00			db 0
   11682 329F  00			db 0
   11683 32A0  00			db 0
   11684 32A1  00			db 0
   11685 32A2  00			db 0
   11686 32A3  00			db 0
   11687 32A4  1F			db 11111b
   11688 32A5  00			db 0
   11689				; !@#$%^&
   11690 32A6  1D			db 11101b
   11691 32A7  05			db 00101b
   11692 32A8  05			db 00101b
   11693 32A9  1F			db 11111b
   11694 32AA  14			db 10100b
   11695 32AB  14			db 10100b
   11696 32AC  17			db 10111b
   11697 32AD  00			db 0
   11698 32AE  00			db 0
   11699				;abcedfghijklmnopqrstuvxyz}{
   11700 32AF  00			db 0
   11701 32B0  00			db 0
   11702 32B1  00			db 0
   11703 32B2  0E			db 01110b
   11704 32B3  01			db 00001b
   11705 32B4  1D			db 11101b
   11706 32B5  0F			db 01111b
   11707 32B6  00			db 0
   11708 32B7  00			db 0
   11709				
   11710 32B8  00			db 0
   11711 32B9  10			db 10000b
   11712 32BA  10			db 10000b
   11713 32BB  1E			db 11110b
   11714 32BC  11			db 10001b
   11715 32BD  11			db 10001b
   11716 32BE  1E			db 11110b
   11717 32BF  00			db 0
   11718 32C0  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-218


   11719				 
   11720 32C1  00			db 0
   11721 32C2  00			db 0
   11722 32C3  00			db 0
   11723 32C4  0E			db 01110b
   11724 32C5  10			db 10000b
   11725 32C6  11			db 10001b
   11726 32C7  0E			db 01110b
   11727 32C8  00			db 0
   11728 32C9  00			db 0
   11729				
   11730 32CA  00			db 0
   11731 32CB  01			db 00001b
   11732 32CC  01			db 00001b
   11733 32CD  0F			db 01111b
   11734 32CE  11			db 10001b
   11735 32CF  11			db 10001b
   11736 32D0  0F			db 01111b
   11737 32D1  00			db 0
   11738 32D2  00			db 0
   11739				
   11740 32D3  00			db 0
   11741 32D4  00			db 0
   11742 32D5  00			db 0
   11743 32D6  0E			db 01110b
   11744 32D7  3F			db 111111b
   11745 32D8  10			db 10000b
   11746 32D9  0E			db 01110b
   11747 32DA  00			db 0
   11748 32DB  00			db 0
   11749				
   11750 32DC  00			db 0
   11751 32DD  02			db 00010b
   11752 32DE  04			db 00100b
   11753 32DF  0E			db 01110b
   11754 32E0  04			db 00100b
   11755 32E1  04			db 00100b
   11756 32E2  0E			db 01110b
   11757 32E3  00			db 0
   11758 32E4  00			db 0
   11759				
   11760 32E5  00			db 0
   11761 32E6  00			db 0
   11762 32E7  00			db 0
   11763 32E8  0F			db 01111b
   11764 32E9  11			db 10001b
   11765 32EA  11			db 10001b
   11766 32EB  0F			db 01111b
   11767 32EC  01			db 00001b
   11768 32ED  0E			db 01110b
   11769				
   11770 32EE  00			db 0
   11771 32EF  10			db 10000b
   11772 32F0  10			db 10000b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-219


   11773 32F1  16			db 10110b
   11774 32F2  19			db 11001b
   11775 32F3  11			db 10001b
   11776 32F4  11			db 10001b
   11777 32F5  00			db 0
   11778 32F6  00			db 0
   11779				
   11780 32F7  00			db 0
   11781 32F8  04			db 00100b
   11782 32F9  00			db 0
   11783 32FA  0C			db 01100b
   11784 32FB  04			db 00100b
   11785 32FC  04			db 00100b
   11786 32FD  0E			db 01110b
   11787 32FE  00			db 0
   11788 32FF  00			db 0
   11789				
   11790 3300  00			db 0
   11791 3301  02			db 00010b
   11792 3302  00			db 0
   11793 3303  06			db 00110b
   11794 3304  02			db 00010b
   11795 3305  02			db 00010b
   11796 3306  02			db 00010b
   11797 3307  02			db 00010b
   11798 3308  0C			db 01100b
   11799				
   11800				
   11801 3309  00			db 0
   11802 330A  10			db 10000b
   11803 330B  10			db 10000b
   11804 330C  12			db 10010b
   11805 330D  14			db 10100b
   11806 330E  18			db 11000b
   11807 330F  16			db 10110b
   11808 3310  00			db 0
   11809 3311  00			db 0
   11810				
   11811 3312  00			db 0
   11812 3313  0C			db 01100b
   11813 3314  04			db 00100b
   11814 3315  04			db 00100b
   11815 3316  04			db 00100b
   11816 3317  04			db 00100b
   11817 3318  0E			db 01110b
   11818 3319  00			db 0
   11819 331A  00			db 0
   11820				
   11821 331B  00			db 0
   11822 331C  00			db 0
   11823 331D  00			db 0
   11824 331E  1A			db 11010b
   11825 331F  15			db 10101b
   11826 3320  15			db 10101b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-220


   11827 3321  15			db 10101b
   11828 3322  00			db 0
   11829 3323  00			db 0
   11830				
   11831 3324  00			db 0
   11832 3325  00			db 0
   11833 3326  00			db 0
   11834 3327  1E			db 11110b
   11835 3328  11			db 10001b
   11836 3329  11			db 10001b
   11837 332A  11			db 10001b
   11838 332B  00			db 0
   11839 332C  00			db 0
   11840				
   11841 332D  00			db 0
   11842 332E  00			db 0
   11843 332F  00			db 0
   11844 3330  0E			db 01110b
   11845 3331  11			db 10001b
   11846 3332  11			db 10001b
   11847 3333  0E			db 01110b
   11848 3334  00			db 0
   11849 3335  00			db 0
   11850				
   11851 3336  00			db 0
   11852 3337  00			db 0
   11853 3338  00			db 0
   11854 3339  1E			db 11110b
   11855 333A  11			db 10001b
   11856 333B  11			db 10001b
   11857 333C  1E			db 11110b
   11858 333D  10			db 10000b
   11859 333E  10			db 10000b
   11860				
   11861 333F  00			db 0
   11862 3340  00			db 0
   11863 3341  00			db 0
   11864 3342  0F			db 01111b
   11865 3343  11			db 10001b
   11866 3344  11			db 10001b
   11867 3345  0F			db 01111b
   11868 3346  01			db 00001b
   11869 3347  01			db 00001b
   11870				
   11871				
   11872 3348  00			db 0
   11873 3349  00			db 0
   11874 334A  00			db 0
   11875 334B  16			db 10110b
   11876 334C  18			db 11000b
   11877 334D  10			db 10000b
   11878 334E  10			db 10000b
   11879 334F  00			db 0
   11880 3350  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-221


   11881				
   11882 3351  00			db 0
   11883 3352  00			db 0
   11884 3353  00			db 0
   11885 3354  0E			db 01110b
   11886 3355  1C			db 11100b
   11887 3356  03			db 00011b
   11888 3357  0E			db 01110b
   11889 3358  00			db 0
   11890 3359  00			db 0
   11891				
   11892 335A  00			db 0
   11893 335B  04			db 0100b 
   11894 335C  04			db 0100b
   11895 335D  0E			db 1110b
   11896 335E  04			db 0100b
   11897 335F  04			db 0100b
   11898 3360  03			db 0011b
   11899 3361  00			db 0
   11900 3362  00			db 0
   11901				
   11902 3363  00			db 0
   11903 3364  00			db 0
   11904 3365  00			db 0
   11905 3366  11			db 10001b
   11906 3367  11			db 10001b
   11907 3368  11			db 10001b
   11908 3369  0F			db 01111b
   11909 336A  00			db 0
   11910 336B  00			db 0
   11911				
   11912 336C  00			db 0
   11913 336D  00			db 0
   11914 336E  00			db 0
   11915 336F  11			db 10001b
   11916 3370  11			db 10001b
   11917 3371  0A			db 01010b
   11918 3372  04			db 00100b
   11919 3373  00			db 0
   11920 3374  00			db 0
   11921				
   11922 3375  00			db 0
   11923 3376  00			db 0
   11924 3377  00			db 0
   11925 3378  11			db 10001b
   11926 3379  15			db 10101b
   11927 337A  1B			db 11011b
   11928 337B  11			db 10001b
   11929 337C  00			db 0
   11930 337D  00			db 0
   11931				
   11932 337E  00			db 0
   11933 337F  00			db 0
   11934 3380  00			db 0
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-222


   11935 3381  11			db 10001b
   11936 3382  0A			db 01010b
   11937 3383  0A			db 01010b
   11938 3384  11			db 10001b
   11939 3385  00			db 0
   11940 3386  00			db 0
   11941				;y
   11942 3387  00			db 0
   11943 3388  00			db 0
   11944 3389  00			db 0
   11945 338A  11			DB 10001B
   11946 338B  11			db 10001b
   11947 338C  11			db 10001b
   11948 338D  0F			db 01111b
   11949 338E  01			db 00001b
   11950 338F  06			db 00110b
   11951				
   11952				
   11953 3390  00			db 0
   11954 3391  00			db 0
   11955 3392  00			db 0
   11956 3393  0F			db 1111b
   11957 3394  02			db 0010b
   11958 3395  04			db 0100b
   11959 3396  0F			db 1111b
   11960 3397  00			db 0
   11961 3398  00			db 0
   11962				
   11963 3399  00			db 00000b
   11964 339A  0A			db 01010b
   11965 339B  00			db 00000b
   11966 339C  0E			db 01110b
   11967 339D  01			db 00001b
   11968 339E  1D			db 11101b
   11969 339F  0F			db 01111b
   11970 33A0  00			db 0
   11971 33A1  00			db 0
   11972				
   11973				
   11974 33A2  00			db 0
   11975 33A3  0A			db 01010b
   11976 33A4  00			db 00000b
   11977 33A5  0E			db 01110b
   11978 33A6  11			db 10001b
   11979 33A7  11			db 10001b
   11980 33A8  0E			db 01110b
   11981 33A9  00			db 0
   11982 33AA  00			db 0
   11983				
   11984 33AB  00			db 0
   11985 33AC  0C			db 01100b
   11986 33AD  04			db 00100b
   11987 33AE  04			db 00100b
   11988 33AF  02			db 00010b
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Page     1-223


   11989 33B0  04			db 00100b
   11990 33B1  04			db 00100b
   11991 33B2  0C			db 01100b
   11992 33B3  00			db 0
   11993				;~
   11994				
   11995 33B4  00			db 0
   11996 33B5  01			db 00001b
   11997 33B6  0E			db 01110b
   11998 33B7  10			db 10000b
   11999 33B8  00			db 0
   12000 33B9  00			db 0
   12001 33BA  00			db 0
   12002 33BB  00			db 0
   12003 33BC  00			db 0
   12004				
   12005 33BD				dataseg ends
   12006				ENDIF
   12007				
   12008				
   12009				END LISP

Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-1


Macros:

		N a m e			Lines

ANY$REG  . . . . . . . . . . . .  	   0
CAR  . . . . . . . . . . . . . .  	   1
CAR$CDR  . . . . . . . . . . . .  	   2
CDR  . . . . . . . . . . . . . .  	   1
COCALL . . . . . . . . . . . . .  	   8
COMPIL . . . . . . . . . . . . .  	  19
COMPTEXT . . . . . . . . . . . .  	   5
EMSMAC . . . . . . . . . . . . .  	  11
FRAME  . . . . . . . . . . . . .  	   4
J$ATOM . . . . . . . . . . . . .  	   5
J$NIL  . . . . . . . . . . . . .  	   2
JMPN . . . . . . . . . . . . . .  	   3
JN$NIL . . . . . . . . . . . . .  	   2
LISP$ERROR . . . . . . . . . . .  	   9
LISP$SUBRU . . . . . . . . . . .  	  12
LOAIM1 . . . . . . . . . . . . .  	   4
LOGOP  . . . . . . . . . . . . .  	   0
MSDOS  . . . . . . . . . . . . .  	   2
NAP  . . . . . . . . . . . . . .  	   0
NEWCRMAC . . . . . . . . . . . .  	   6
NEWCRMAC2  . . . . . . . . . . .  	   9
NEWRPL . . . . . . . . . . . . .  	  10
POPBX  . . . . . . . . . . . . .  	   3
PRITHS . . . . . . . . . . . . .  	   8
PUSHBX . . . . . . . . . . . . .  	   4
R$ATOM . . . . . . . . . . . . .  	   5
R$NIL  . . . . . . . . . . . . .  	   2
RC . . . . . . . . . . . . . . .  	   2
RNC  . . . . . . . . . . . . . .  	   2
RNZ  . . . . . . . . . . . . . .  	   2
RPLACA . . . . . . . . . . . . .  	   2
RPLACD . . . . . . . . . . . . .  	   2
RZ . . . . . . . . . . . . . . .  	   2
SAVIM1 . . . . . . . . . . . . .  	   4
SETTYPE  . . . . . . . . . . . .  	  10
TARPEEL  . . . . . . . . . . . .  	   9
TEST$RESU  . . . . . . . . . . .  	   4
TYPEOF . . . . . . . . . . . . .  	  13
WHEN . . . . . . . . . . . . . .  	   2

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CODESEG  . . . . . . . . . . . .  	4355	PARA	NONE	'CODE'
DATASEG  . . . . . . . . . . . .  	33BD	PARA	NONE	'DATA'
EXESEG . . . . . . . . . . . . .  	0020	PARA	NONE	
RAPASEG  . . . . . . . . . . . .  	005A	PARA	NONE	
STACKSEG . . . . . . . . . . . .  	4E22	PARA	STACK	'STACK'
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-2


Symbols:            

                N a m e         	Type	 Value	 Attr

ADONE  . . . . . . . . . . . . .  	L NEAR	0A3A	CODESEG
ALFA . . . . . . . . . . . . . .  	L NEAR	078B	CODESEG
ALFMAT . . . . . . . . . . . . .  	L NEAR	092E	CODESEG
ALIST  . . . . . . . . . . . . .  	L NEAR	1327	CODESEG
AMBDA  . . . . . . . . . . . . .  	L NEAR	2063	CODESEG
ANDI . . . . . . . . . . . . . .  	L NEAR	1573	CODESEG
ANYCONS  . . . . . . . . . . . .  	L NEAR	0528	CODESEG
APRLOO . . . . . . . . . . . . .  	L NEAR	0986	CODESEG
ARG  . . . . . . . . . . . . . .  	L NEAR	0E53	CODESEG
ARGLIST  . . . . . . . . . . . .  	L NEAR	1321	CODESEG
ARGSTA . . . . . . . . . . . . .  	L WORD	0110	DATASEG
ASCII  . . . . . . . . . . . . .  	L NEAR	19F6	CODESEG
ASCIIZB  . . . . . . . . . . . .  	L BYTE	2737	DATASEG	Length = 0200
ASSOC  . . . . . . . . . . . . .  	L NEAR	16E6	CODESEG
ASSOC2 . . . . . . . . . . . . .  	L NEAR	1743	CODESEG
ATAB . . . . . . . . . . . . . .  	L NEAR	19F2	CODESEG
ATOM . . . . . . . . . . . . . .  	L NEAR	1882	CODESEG
ATOMCOMP . . . . . . . . . . . .  	L NEAR	39BD	CODESEG
ATOMIZE  . . . . . . . . . . . .  	L NEAR	0D94	CODESEG
ATULOS . . . . . . . . . . . . .  	L WORD	1B1A	DATASEG
AUTOST . . . . . . . . . . . . .  	L WORD	3064	DATASEG
AXREG  . . . . . . . . . . . . .  	L WORD	2A3F	DATASEG
AYCMRS . . . . . . . . . . . . .  	L NEAR	250C	CODESEG

BPREG  . . . . . . . . . . . . .  	L WORD	2BB5	DATASEG
BREIKKI  . . . . . . . . . . . .  	L NEAR	3FF8	CODESEG
BTAB . . . . . . . . . . . . . .  	L NEAR	19E1	CODESEG
BXREG  . . . . . . . . . . . . .  	L WORD	2A6E	DATASEG

CAAR . . . . . . . . . . . . . .  	L NEAR	2649	CODESEG
CABS . . . . . . . . . . . . . .  	L NEAR	10E8	CODESEG
CADD1  . . . . . . . . . . . . .  	L NEAR	11EE	CODESEG
CADDDR . . . . . . . . . . . . .  	L NEAR	2640	CODESEG
CADDR  . . . . . . . . . . . . .  	L NEAR	2638	CODESEG
CADR . . . . . . . . . . . . . .  	L NEAR	2620	CODESEG
CALLABOVE  . . . . . . . . . . .  	L NEAR	1F18	CODESEG
CAND . . . . . . . . . . . . . .  	L NEAR	158C	CODESEG
CAND3  . . . . . . . . . . . . .  	L NEAR	15E2	CODESEG
CAND4  . . . . . . . . . . . . .  	L NEAR	15E8	CODESEG
CANDE  . . . . . . . . . . . . .  	L NEAR	15EF	CODESEG
CANDL  . . . . . . . . . . . . .  	L NEAR	159F	CODESEG
CANTCOMP . . . . . . . . . . . .  	L NEAR	3B6A	CODESEG
CARGLIST . . . . . . . . . . . .  	L NEAR	3C49	CODESEG
CARHIG . . . . . . . . . . . . .  	L WORD	0104	DATASEG
CARLOW . . . . . . . . . . . . .  	L WORD	0102	DATASEG
CATCHEXIT  . . . . . . . . . . .  	L NEAR	20C5	CODESEG
CATCH_END  . . . . . . . . . . .  	L NEAR	20CD	CODESEG
CAX  . . . . . . . . . . . . . .  	L NEAR	2B58	CODESEG
CBAND  . . . . . . . . . . . . .  	L NEAR	196F	CODESEG
CBONST . . . . . . . . . . . . .  	L NEAR	3A49	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-3


CBOR . . . . . . . . . . . . . .  	L NEAR	1992	CODESEG
CBX  . . . . . . . . . . . . . .  	L NEAR	2BB3	CODESEG
CBXOR  . . . . . . . . . . . . .  	L NEAR	19B5	CODESEG
CBYTE  . . . . . . . . . . . . .  	L NEAR	29D9	CODESEG
CCALL  . . . . . . . . . . . . .  	L NEAR	35FD	CODESEG
CCATCH . . . . . . . . . . . . .  	L NEAR	209E	CODESEG
CCOND  . . . . . . . . . . . . .  	L NEAR	3787	CODESEG
CCONDEND . . . . . . . . . . . .  	L NEAR	3807	CODESEG
CCONDL . . . . . . . . . . . . .  	L NEAR	3798	CODESEG
CCONST . . . . . . . . . . . . .  	L NEAR	3A2F	CODESEG
CCSETQ . . . . . . . . . . . . .  	L NEAR	1035	CODESEG
CCX  . . . . . . . . . . . . . .  	L NEAR	2C0E	CODESEG
CDDDR  . . . . . . . . . . . . .  	L NEAR	2630	CODESEG
CDDR . . . . . . . . . . . . . .  	L NEAR	2628	CODESEG
CDEFQ  . . . . . . . . . . . . .  	L NEAR	10A3	CODESEG
CDI  . . . . . . . . . . . . . .  	L NEAR	2DD5	CODESEG
CDIFF  . . . . . . . . . . . . .  	L NEAR	116B	CODESEG
CDRHIG . . . . . . . . . . . . .  	L WORD	0108	DATASEG
CDRLOW . . . . . . . . . . . . .  	L WORD	0106	DATASEG
CDS  . . . . . . . . . . . . . .  	L NEAR	2D1F	CODESEG
CDX  . . . . . . . . . . . . . .  	L NEAR	2C69	CODESEG
CDXRL  . . . . . . . . . . . . .  	L NEAR	2656	CODESEG
CEQ  . . . . . . . . . . . . . .  	L NEAR	1C63	CODESEG
CEQN . . . . . . . . . . . . . .  	L NEAR	12B5	CODESEG
CES  . . . . . . . . . . . . . .  	L NEAR	2CC4	CODESEG
CFOUARG  . . . . . . . . . . . .  	L NEAR	3C08	CODESEG
CFRAME . . . . . . . . . . . . .  	L NEAR	1ED1	CODESEG
CFRAME1  . . . . . . . . . . . .  	L NEAR	1ED7	CODESEG
CFUNC1 . . . . . . . . . . . . .  	L NEAR	34C3	CODESEG
CFUNC2 . . . . . . . . . . . . .  	L NEAR	343C	CODESEG
CFUNCTION  . . . . . . . . . . .  	L NEAR	34D5	CODESEG
CHIGHBYTE  . . . . . . . . . . .  	L NEAR	29C1	CODESEG
CIF  . . . . . . . . . . . . . .  	L NEAR	3753	CODESEG
CIRCUL . . . . . . . . . . . . .  	NUMBER	0020	
CJMP . . . . . . . . . . . . . .  	L NEAR	3632	CODESEG
CLAMBDA  . . . . . . . . . . . .  	L NEAR	2148	CODESEG
CLAMBDA2 . . . . . . . . . . . .  	L NEAR	2176	CODESEG
CLETFU2  . . . . . . . . . . . .  	L NEAR	1E3D	CODESEG
CLETFUN  . . . . . . . . . . . .  	L NEAR	1E0E	CODESEG
CLIST  . . . . . . . . . . . . .  	L NEAR	1365	CODESEG
CLIST2 . . . . . . . . . . . . .  	L NEAR	13CF	CODESEG
CLIST3 . . . . . . . . . . . . .  	L NEAR	13CA	CODESEG
CLOSE  . . . . . . . . . . . . .  	L NEAR	2970	CODESEG
CLOSEA . . . . . . . . . . . . .  	L NEAR	408E	CODESEG
CLOWBYTE . . . . . . . . . . . .  	L NEAR	29F9	CODESEG
CMAKNUM  . . . . . . . . . . . .  	L NEAR	115C	CODESEG
CMC2 . . . . . . . . . . . . . .  	L NEAR	35CA	CODESEG
CMCODE . . . . . . . . . . . . .  	L NEAR	3586	CODESEG
CMINUS . . . . . . . . . . . . .  	L NEAR	1121	CODESEG
CMPRSS . . . . . . . . . . . . .  	L NEAR	2571	CODESEG
CNEG . . . . . . . . . . . . . .  	L NEAR	1124	CODESEG
CNOARG . . . . . . . . . . . . .  	L NEAR	3B6F	CODESEG
CNOT . . . . . . . . . . . . . .  	L NEAR	176A	CODESEG
CNUMAR1  . . . . . . . . . . . .  	L NEAR	3C59	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-4


CNUMARG  . . . . . . . . . . . .  	L NEAR	3C68	CODESEG
COCO2  . . . . . . . . . . . . .  	L NEAR	3FA9	CODESEG
COCO3  . . . . . . . . . . . . .  	L NEAR	3FD1	CODESEG
CODEADDR . . . . . . . . . . . .  	NUMBER	4020	CODESEG
CODEBUG  . . . . . . . . . . . .  	L BYTE	2CFE	DATASEG
COELSE . . . . . . . . . . . . .  	L NEAR	37FB	CODESEG
COEVAL . . . . . . . . . . . . .  	L NEAR	3B47	CODESEG
COLOR  . . . . . . . . . . . . .  	L BYTE	2C25	DATASEG
COMERR . . . . . . . . . . . . .  	L NEAR	3522	CODESEG
COMMAND_NAME . . . . . . . . . .  	L BYTE	2F18	DATASEG	Length = 0020
COMMENT2 . . . . . . . . . . . .  	L NEAR	06BD	CODESEG
COMP2  . . . . . . . . . . . . .  	L NEAR	250F	CODESEG
COMPBLOCK  . . . . . . . . . . .  	L NEAR	1F06	CODESEG
COMPPROG2  . . . . . . . . . . .  	L NEAR	1F30	CODESEG
COMPPROGN  . . . . . . . . . . .  	L NEAR	1F25	CODESEG
COMPSU . . . . . . . . . . . . .  	L NEAR	39B0	CODESEG
COM_PAR  . . . . . . . . . . . .  	L BYTE	2F38	DATASEG	Length = 0040
CON2 . . . . . . . . . . . . . .  	L NEAR	0420	CODESEG
COND . . . . . . . . . . . . . .  	L NEAR	23F0	CODESEG
CONEARG  . . . . . . . . . . . .  	L NEAR	3B76	CODESEG
CONS . . . . . . . . . . . . . .  	L NEAR	05AE	CODESEG
CONS2  . . . . . . . . . . . . .  	L NEAR	055E	CODESEG
CONT3ARG . . . . . . . . . . . .  	L NEAR	3BEC	CODESEG
CONTC2 . . . . . . . . . . . . .  	L NEAR	394E	CODESEG
CONTCO . . . . . . . . . . . . .  	L NEAR	393C	CODESEG
CONTINUE_IN  . . . . . . . . . .  	L NEAR	3FDC	CODESEG
COQUOT . . . . . . . . . . . . .  	L NEAR	39B7	CODESEG
COR  . . . . . . . . . . . . . .  	L NEAR	160D	CODESEG
CORE . . . . . . . . . . . . . .  	L NEAR	1647	CODESEG
COREP2 . . . . . . . . . . . . .  	L NEAR	36C9	CODESEG
CORL . . . . . . . . . . . . . .  	L NEAR	1620	CODESEG
COSYMB . . . . . . . . . . . . .  	L NEAR	3B16	CODESEG
CPEEK  . . . . . . . . . . . . .  	L NEAR	2A0B	CODESEG
CPEEK1 . . . . . . . . . . . . .  	L NEAR	2A21	CODESEG
CPEEKW . . . . . . . . . . . . .  	L NEAR	2A1B	CODESEG
CPLMCALL . . . . . . . . . . . .  	L NEAR	2ED2	CODESEG
CPLUS  . . . . . . . . . . . . .  	L NEAR	1144	CODESEG
CPOKE  . . . . . . . . . . . . .  	L NEAR	2AC1	CODESEG
CPOKE1 . . . . . . . . . . . . .  	L NEAR	2A76	CODESEG
CPOKEW . . . . . . . . . . . . .  	L NEAR	2ADB	CODESEG
CPROG  . . . . . . . . . . . . .  	L NEAR	1FDC	CODESEG
CPROG1 . . . . . . . . . . . . .  	L NEAR	1F74	CODESEG
CREATE . . . . . . . . . . . . .  	L NEAR	293D	CODESEG
CREERR . . . . . . . . . . . . .  	L NEAR	2952	CODESEG
CREPEAT  . . . . . . . . . . . .  	L NEAR	36F9	CODESEG
CREPEATTIMES . . . . . . . . . .  	L NEAR	370A	CODESEG
CREPEUN  . . . . . . . . . . . .  	L NEAR	36BA	CODESEG
CRLF . . . . . . . . . . . . . .  	L NEAR	0C7E	CODESEG
CSETQ  . . . . . . . . . . . . .  	L NEAR	102C	CODESEG
CSEX . . . . . . . . . . . . . .  	L NEAR	39E4	CODESEG
CSI  . . . . . . . . . . . . . .  	L NEAR	2D7A	CODESEG
CSTFYM . . . . . . . . . . . . .  	L NEAR	108D	CODESEG
CSUB1  . . . . . . . . . . . . .  	L NEAR	120F	CODESEG
CS_DATASEG . . . . . . . . . . .  	L WORD	3F4D	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-5


CS_STACKSEG  . . . . . . . . . .  	L WORD	3F4F	CODESEG
CTIMES . . . . . . . . . . . . .  	L NEAR	118D	CODESEG
CTREARG  . . . . . . . . . . . .  	L NEAR	3BC4	CODESEG
CTWOAR1  . . . . . . . . . . . .  	L NEAR	3BA3	CODESEG
CTWOARG  . . . . . . . . . . . .  	L NEAR	3B94	CODESEG
CTWONU1  . . . . . . . . . . . .  	L NEAR	3C6F	CODESEG
CTWONUM  . . . . . . . . . . . .  	L NEAR	3D69	CODESEG
CWHILE . . . . . . . . . . . . .  	L NEAR	36E8	CODESEG
CWORD  . . . . . . . . . . . . .  	L NEAR	3547	CODESEG
CWORD1 . . . . . . . . . . . . .  	L NEAR	3533	CODESEG
CXREG  . . . . . . . . . . . . .  	L WORD	2A9D	DATASEG
CYCLI1 . . . . . . . . . . . . .  	L NEAR	18BC	CODESEG
CYCLI2 . . . . . . . . . . . . .  	L NEAR	1945	CODESEG
CYCLIC . . . . . . . . . . . . .  	L WORD	1E90	DATASEG
CYCLICP  . . . . . . . . . . . .  	L NEAR	18AF	CODESEG
CZERO2 . . . . . . . . . . . . .  	L NEAR	1266	CODESEG
CZEROP . . . . . . . . . . . . .  	L NEAR	1236	CODESEG

DECIMAL  . . . . . . . . . . . .  	L NEAR	3DAE	CODESEG
DEF1 . . . . . . . . . . . . . .  	L NEAR	1097	CODESEG
DELTA_X  . . . . . . . . . . . .  	L WORD	2C36	DATASEG
DELTA_Y  . . . . . . . . . . . .  	L WORD	2C38	DATASEG
DEPTHL . . . . . . . . . . . . .  	L NEAR	1795	CODESEG
DIREG  . . . . . . . . . . . . .  	L WORD	2B88	DATASEG
DISPMODE . . . . . . . . . . . .  	L BYTE	2C46	DATASEG
DIVERR . . . . . . . . . . . . .  	L NEAR	400C	CODESEG
DOMARK . . . . . . . . . . . . .  	L NEAR	0321	CODESEG
DONTPUSH . . . . . . . . . . . .  	L NEAR	3CA0	CODESEG
DOTAB  . . . . . . . . . . . . .  	L NEAR	19E1	CODESEG
DROPARG  . . . . . . . . . . . .  	L NEAR	0D86	CODESEG
DSREG  . . . . . . . . . . . . .  	L WORD	2B2A	DATASEG
DS_EXESEG  . . . . . . . . . . .  	L WORD	2FA7	DATASEG
DS_RAPASEG . . . . . . . . . . .  	L WORD	2FA9	DATASEG
DXNPDY . . . . . . . . . . . . .  	L NEAR	3044	CODESEG
DXREG  . . . . . . . . . . . . .  	L WORD	2ACC	DATASEG

E  . . . . . . . . . . . . . . .  	L WORD	2C44	DATASEG
E5PIX  . . . . . . . . . . . . .  	L NEAR	31F3	CODESEG
EATOM  . . . . . . . . . . . . .  	L NEAR	0E0C	CODESEG
ECHO . . . . . . . . . . . . . .  	L BYTE	2692	DATASEG
EEEE . . . . . . . . . . . . . .  	L NEAR	283C	CODESEG
EEMAK2 . . . . . . . . . . . . .  	L NEAR	063F	CODESEG
EFSYM  . . . . . . . . . . . . .  	L NEAR	0E48	CODESEG
EGABX  . . . . . . . . . . . . .  	L WORD	2C23	DATASEG
EHKBS  . . . . . . . . . . . . .  	L NEAR	32B2	CODESEG
EICADR . . . . . . . . . . . . .  	L NEAR	082F	CODESEG
EIECHO . . . . . . . . . . . . .  	L NEAR	28A2	CODESEG
EIIND  . . . . . . . . . . . . .  	L NEAR	0CC5	CODESEG
EIJAMA1  . . . . . . . . . . . .  	L NEAR	37F4	CODESEG
EINAA  . . . . . . . . . . . . .  	L NEAR	0A34	CODESEG
EITHROW  . . . . . . . . . . . .  	L NEAR	40E2	CODESEG
EMM_ERR_HANDLER  . . . . . . . .  	L NEAR	01A2	CODESEG
EMM_HANDLE . . . . . . . . . . .  	L WORD	18A3	DATASEG
EMPTY  . . . . . . . . . . . . .  	L NEAR	028F	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-6


EMRKSP . . . . . . . . . . . . .  	L NEAR	0361	CODESEG
EMSADDR  . . . . . . . . . . . .  	L NEAR	0023	CODESEG
EMSADR2  . . . . . . . . . . . .  	L NEAR	0037	CODESEG
EMS_ON . . . . . . . . . . . . .  	L BYTE	18A0	DATASEG
EMS_RESET  . . . . . . . . . . .  	L NEAR	0000	CODESEG
ENAME  . . . . . . . . . . . . .  	L NEAR	0E44	CODESEG
ENEG . . . . . . . . . . . . . .  	L WORD	2C42	DATASEG
ENVIRO . . . . . . . . . . . . .  	L WORD	0112	DATASEG
EOF$ . . . . . . . . . . . . . .  	L NEAR	0693	CODESEG
EOF$ST . . . . . . . . . . . . .  	L BYTE	1901	DATASEG
EOFARG . . . . . . . . . . . . .  	L NEAR	0EBD	CODESEG
EOFILE . . . . . . . . . . . . .  	L NEAR	286B	CODESEG
EOIF . . . . . . . . . . . . . .  	L NEAR	304B	CODESEG
EP0  . . . . . . . . . . . . . .  	L NEAR	3091	CODESEG
EP02 . . . . . . . . . . . . . .  	L NEAR	309D	CODESEG
EPOS . . . . . . . . . . . . . .  	L WORD	2C40	DATASEG
EPRL . . . . . . . . . . . . . .  	L NEAR	0ACE	CODESEG
EQ$AT2 . . . . . . . . . . . . .  	L NEAR	1BB1	CODESEG
EQ$ATO . . . . . . . . . . . . .  	L NEAR	1B84	CODESEG
EQUAL  . . . . . . . . . . . . .  	L NEAR	1B16	CODESEG
EQUOT  . . . . . . . . . . . . .  	L NEAR	0E3D	CODESEG
EREP . . . . . . . . . . . . . .  	L NEAR	245E	CODESEG
ERHE . . . . . . . . . . . . . .  	L NEAR	4044	CODESEG
ERHE2  . . . . . . . . . . . . .  	L NEAR	4064	CODESEG
ERHE3  . . . . . . . . . . . . .  	L NEAR	4058	CODESEG
ERHEEN_SYY . . . . . . . . . . .  	L WORD	18B5	DATASEG
ESPSP  . . . . . . . . . . . . .  	L WORD	011D	DATASEG
ESREG  . . . . . . . . . . . . .  	L WORD	2AFB	DATASEG
ESUBRU . . . . . . . . . . . . .  	L NEAR	0E4E	CODESEG
EVACON . . . . . . . . . . . . .  	L NEAR	0D53	CODESEG
EVAERR . . . . . . . . . . . . .  	L NEAR	0DBA	CODESEG
EVAL . . . . . . . . . . . . . .  	L NEAR	0CA5	CODESEG
EVALARG  . . . . . . . . . . . .  	L NEAR	0EC7	CODESEG
EVALREST . . . . . . . . . . . .  	L NEAR	0D59	CODESEG
EVAL_C_NUM . . . . . . . . . . .  	L NEAR	2EAD	CODESEG
EVEN_ROW . . . . . . . . . . . .  	L NEAR	315C	CODESEG
EWHI . . . . . . . . . . . . . .  	L NEAR	2483	CODESEG
EXECER . . . . . . . . . . . . .  	L NEAR	3E8C	CODESEG
EXNAM  . . . . . . . . . . . . .  	L NEAR	24E0	CODESEG
EXNUM  . . . . . . . . . . . . .  	L NEAR	24E9	CODESEG
EXP13  . . . . . . . . . . . . .  	L NEAR	24EF	CODESEG
EXP3 . . . . . . . . . . . . . .  	L NEAR	24F2	CODESEG
EXPLN2 . . . . . . . . . . . . .  	L NEAR	0C27	CODESEG
EXPLNU . . . . . . . . . . . . .  	L NEAR	0C17	CODESEG
EXPLODE  . . . . . . . . . . . .  	L NEAR	249D	CODESEG
EXPNCH . . . . . . . . . . . . .  	L NEAR	0C1F	CODESEG
EXSTR2 . . . . . . . . . . . . .  	L NEAR	2577	CODESEG
EXSTR3 . . . . . . . . . . . . .  	L NEAR	257A	CODESEG
EXSTRI . . . . . . . . . . . . .  	L NEAR	24E3	CODESEG

FALSE  . . . . . . . . . . . . .  	L NEAR	0691	CODESEG
FFI2 . . . . . . . . . . . . . .  	L NEAR	2909	CODESEG
FH . . . . . . . . . . . . . . .  	L NEAR	027E	CODESEG
FILENAME . . . . . . . . . . . .  	L WORD	2699	DATASEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-7


FOUARG . . . . . . . . . . . . .  	L NEAR	0EF4	CODESEG
FRAMEXIT . . . . . . . . . . . .  	L NEAR	2080	CODESEG
FRAME_RET  . . . . . . . . . . .  	L NEAR	1DA7	CODESEG
FREECODE . . . . . . . . . . . .  	L NEAR	4194	CODESEG
FREELIST . . . . . . . . . . . .  	L WORD	010E	DATASEG
FREEOBL  . . . . . . . . . . . .  	L NEAR	0495	CODESEG
FSTNODE  . . . . . . . . . . . .  	NUMBER	0300	
FSYMBC . . . . . . . . . . . . .  	L WORD	0122	DATASEG
FSYMBO . . . . . . . . . . . . .  	NUMBER	0006	
FSYMBS . . . . . . . . . . . . .  	L WORD	0124	DATASEG	Length = 0BB8
FSYMS1 . . . . . . . . . . . . .  	L NEAR	1F89	CODESEG
FSYMS2 . . . . . . . . . . . . .  	L NEAR	1FB5	CODESEG
FUNCTIONS  . . . . . . . . . . .  	L WORD	3052	DATASEG
FUNCTYPE . . . . . . . . . . . .  	L 0002	2CF6	DATASEG

GARBA  . . . . . . . . . . . . .  	NUMBER	0010	
GARBAGE  . . . . . . . . . . . .  	L NEAR	27A2	CODESEG
GARCOL . . . . . . . . . . . . .  	L NEAR	0270	CODESEG
GCRS2  . . . . . . . . . . . . .  	L NEAR	257D	CODESEG
GCRZ . . . . . . . . . . . . . .  	L NEAR	25B4	CODESEG
GETC$3 . . . . . . . . . . . . .  	L NEAR	276B	CODESEG
GETGE2 . . . . . . . . . . . . .  	L NEAR	1D3E	CODESEG
GETGET . . . . . . . . . . . . .  	L NEAR	1CFA	CODESEG
GETST2 . . . . . . . . . . . . .  	L NEAR	0F82	CODESEG
GETSTR . . . . . . . . . . . . .  	L NEAR	0F5D	CODESEG
GINCHN . . . . . . . . . . . . .  	L NEAR	2822	CODESEG
GOUTCHN  . . . . . . . . . . . .  	L NEAR	2801	CODESEG
GRAPHC . . . . . . . . . . . . .  	L NEAR	329C	CODESEG
G_CHAR_MODE  . . . . . . . . . .  	L BYTE	2C49	DATASEG

HANDLE_NAME  . . . . . . . . . .  	L BYTE	1898	DATASEG
HASHTABLE  . . . . . . . . . . .  	L WORD	1918	DATASEG	Length = 0100
HCHAR  . . . . . . . . . . . . .  	L NEAR	3DB0	CODESEG
HEX  . . . . . . . . . . . . . .  	L BYTE	0121	DATASEG
HEXBYTE  . . . . . . . . . . . .  	L NEAR	3D96	CODESEG
HEXWORD  . . . . . . . . . . . .  	L NEAR	3D86	CODESEG
HGC  . . . . . . . . . . . . . .  	L NEAR	2F91	CODESEG
HGC2 . . . . . . . . . . . . . .  	L NEAR	2F8B	CODESEG
HGCPIX . . . . . . . . . . . . .  	L NEAR	3231	CODESEG
HLCAR  . . . . . . . . . . . . .  	L NEAR	174A	CODESEG
HPPIX  . . . . . . . . . . . . .  	L NEAR	314C	CODESEG

IDLIS2 . . . . . . . . . . . . .  	L NEAR	2135	CODESEG
IDLIST . . . . . . . . . . . . .  	L NEAR	20EB	CODESEG
IMMNUM . . . . . . . . . . . . .  	L NEAR	3D63	CODESEG
INCHN  . . . . . . . . . . . . .  	L WORD	2695	DATASEG
INTARG . . . . . . . . . . . . .  	L NEAR	2E42	CODESEG
INTOBX . . . . . . . . . . . . .  	L NEAR	3CF7	CODESEG
IOERR  . . . . . . . . . . . . .  	L NEAR	286E	CODESEG
IOERR2 . . . . . . . . . . . . .  	L NEAR	3FC7	CODESEG
ITEMB  . . . . . . . . . . . . .  	L BYTE	2290	DATASEG	Length = 0200
ITEMB2 . . . . . . . . . . . . .  	L BYTE	2490	DATASEG	Length = 0200
ITEMBP . . . . . . . . . . . . .  	L WORD	2690	DATASEG
ITEMC  . . . . . . . . . . . . .  	L NEAR	072C	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-8


ITEMC2 . . . . . . . . . . . . .  	L NEAR	0730	CODESEG
ITEMLEN  . . . . . . . . . . . .  	L BYTE	228E	DATASEG
ITEMR  . . . . . . . . . . . . .  	L NEAR	06F9	CODESEG
ITEMR1 . . . . . . . . . . . . .  	L NEAR	06F6	CODESEG

JMPFRCXHERE  . . . . . . . . . .  	L NEAR	36D8	CODESEG
JOOJOO . . . . . . . . . . . . .  	L NEAR	0C60	CODESEG
JOYSTI1  . . . . . . . . . . . .  	L NEAR	2B18	CODESEG
JOYSTI2  . . . . . . . . . . . .  	L NEAR	2B2C	CODESEG

KEEP_SP  . . . . . . . . . . . .  	L WORD	2EF6	DATASEG
KYPA . . . . . . . . . . . . . .  	L BYTE	2CD4	DATASEG

LAMAR1 . . . . . . . . . . . . .  	L NEAR	21CA	CODESEG
LAMAR2 . . . . . . . . . . . . .  	L NEAR	21FE	CODESEG
LAMAR3 . . . . . . . . . . . . .  	L NEAR	2238	CODESEG
LAMAR4 . . . . . . . . . . . . .  	L NEAR	2279	CODESEG
LAMARN . . . . . . . . . . . . .  	L NEAR	22C0	CODESEG
LAMBDA . . . . . . . . . . . . .  	L WORD	305B	DATASEG
LAMBERR  . . . . . . . . . . . .  	L NEAR	1D68	CODESEG
LAMREST  . . . . . . . . . . . .  	L NEAR	21C0	CODESEG
LAST . . . . . . . . . . . . . .  	L NEAR	12D7	CODESEG
LASTMEM  . . . . . . . . . . . .  	L WORD	011F	DATASEG
LASTNODE . . . . . . . . . . . .  	L WORD	010A	DATASEG
LDAREGS  . . . . . . . . . . . .  	L NEAR	2E22	CODESEG
LDON . . . . . . . . . . . . . .  	L NEAR	1806	CODESEG
LELO . . . . . . . . . . . . . .  	L NEAR	17D9	CODESEG
LENGT  . . . . . . . . . . . . .  	L NEAR	17D6	CODESEG
LETCOMP  . . . . . . . . . . . .  	L NEAR	1E44	CODESEG
LETQUOT  . . . . . . . . . . . .  	L NEAR	1E73	CODESEG
LETVA2 . . . . . . . . . . . . .  	L NEAR	1DF3	CODESEG
LETVAR . . . . . . . . . . . . .  	L NEAR	1DAC	CODESEG
LET_F_JAMAT  . . . . . . . . . .  	L NEAR	2067	CODESEG
LISP . . . . . . . . . . . . . .  	L NEAR	4129	CODESEG
LIST . . . . . . . . . . . . . .  	NUMBER	000F	
LLOPPU . . . . . . . . . . . . .  	L NEAR	32F9	CODESEG
LOADIMA  . . . . . . . . . . . .  	L NEAR	3EF7	CODESEG
LOAIM2 . . . . . . . . . . . . .  	L NEAR	3F33	CODESEG
LOGICAL_PAGE_NUMBER  . . . . . .  	L WORD	18A5	DATASEG
LOOPPI . . . . . . . . . . . . .  	L NEAR	417F	CODESEG
LOPPU  . . . . . . . . . . . . .  	L NEAR	0000	CODESEG
LPROGN . . . . . . . . . . . . .  	L NEAR	1ECC	CODESEG

MACCO2 . . . . . . . . . . . . .  	L NEAR	34E5	CODESEG
MACCO3 . . . . . . . . . . . . .  	L NEAR	351E	CODESEG
MACCOD . . . . . . . . . . . . .  	L NEAR	34DE	CODESEG
MACDAT . . . . . . . . . . . . .  	L WORD	0118	DATASEG
MAKEFSYM . . . . . . . . . . . .  	L NEAR	330A	CODESEG
MAKHA2 . . . . . . . . . . . . .  	L NEAR	084C	CODESEG
MAKHASH  . . . . . . . . . . . .  	L NEAR	0846	CODESEG
MAKNAM . . . . . . . . . . . . .  	L NEAR	060B	CODESEG
MAKNUM . . . . . . . . . . . . .  	L NEAR	05C9	CODESEG
MAKSBR . . . . . . . . . . . . .  	L NEAR	05F0	CODESEG
MAKSTR . . . . . . . . . . . . .  	L NEAR	062D	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-9


MAPPAGE  . . . . . . . . . . . .  	L NEAR	0007	CODESEG
MARK . . . . . . . . . . . . . .  	L NEAR	01B3	CODESEG
MARKLIST . . . . . . . . . . . .  	L NEAR	0228	CODESEG
MARKO1 . . . . . . . . . . . . .  	L NEAR	02B4	CODESEG
MARKO2 . . . . . . . . . . . . .  	L NEAR	02E0	CODESEG
MARKO3 . . . . . . . . . . . . .  	L NEAR	031E	CODESEG
MARKS2 . . . . . . . . . . . . .  	L NEAR	0355	CODESEG
MARKSP . . . . . . . . . . . . .  	L NEAR	034F	CODESEG
MARKTAIL . . . . . . . . . . . .  	L NEAR	0206	CODESEG
MAXI . . . . . . . . . . . . . .  	L WORD	2C3E	DATASEG
MEMBER . . . . . . . . . . . . .  	L NEAR	16C7	CODESEG
MEMEQ  . . . . . . . . . . . . .  	L NEAR	16A8	CODESEG
MERKIT . . . . . . . . . . . . .  	L BYTE	3066	DATASEG
MLAMBA . . . . . . . . . . . . .  	L NEAR	2029	CODESEG
MOBDO2 . . . . . . . . . . . . .  	L NEAR	034D	CODESEG
MOBDON . . . . . . . . . . . . .  	L NEAR	02DD	CODESEG
MOOCDR . . . . . . . . . . . . .  	L NEAR	275D	CODESEG
MOV_BX_AX  . . . . . . . . . . .  	L NEAR	3D70	CODESEG
MUUTPIX  . . . . . . . . . . . .  	L NEAR	325C	CODESEG
MVTBIM . . . . . . . . . . . . .  	L NEAR	3A8E	CODESEG
MVTCIM . . . . . . . . . . . . .  	L NEAR	3ABA	CODESEG
MVTDIM . . . . . . . . . . . . .  	L NEAR	3AE6	CODESEG
MVTOIM . . . . . . . . . . . . .  	L NEAR	3A63	CODESEG

NAMARG . . . . . . . . . . . . .  	L NEAR	0FCC	CODESEG
NAMERR . . . . . . . . . . . . .  	L NEAR	0FBB	CODESEG
NCOMPB . . . . . . . . . . . . .  	L NEAR	3856	CODESEG
NCOMPI . . . . . . . . . . . . .  	L NEAR	3844	CODESEG
NCOMPI_PUS . . . . . . . . . . .  	L NEAR	382C	CODESEG
NCOMPI_TYPE  . . . . . . . . . .  	L NEAR	38C0	CODESEG
NCOMPN . . . . . . . . . . . . .  	L NEAR	389B	CODESEG
NCONC  . . . . . . . . . . . . .  	L NEAR	1653	CODESEG
NCONC2 . . . . . . . . . . . . .  	L NEAR	16A2	CODESEG
NEWCARA  . . . . . . . . . . . .  	L NEAR	024B	CODESEG
NEWCARAAX  . . . . . . . . . . .  	L NEAR	02EB	CODESEG
NEWCARABX  . . . . . . . . . . .  	L NEAR	0DCB	CODESEG
NEWCARACX  . . . . . . . . . . .  	L NEAR	00B4	CODESEG
NEWCARB  . . . . . . . . . . . .  	L NEAR	0CF6	CODESEG
NEWCARBAX  . . . . . . . . . . .  	L NEAR	049D	CODESEG
NEWCARBBX  . . . . . . . . . . .  	L NEAR	1006	CODESEG
NEWCARCAX  . . . . . . . . . . .  	L NEAR	0936	CODESEG
NEWCARCBX  . . . . . . . . . . .  	L NEAR	0991	CODESEG
NEWCARD  . . . . . . . . . . . .  	L NEAR	253B	CODESEG
NEWCARDAX  . . . . . . . . . . .  	L NEAR	0BB5	CODESEG
NEWCARDBX  . . . . . . . . . . .  	L NEAR	1BF4	CODESEG
NEWCARDCX  . . . . . . . . . . .  	L NEAR	09F5	CODESEG
NEWCDRA  . . . . . . . . . . . .  	L NEAR	0208	CODESEG
NEWCDRAAX  . . . . . . . . . . .  	L NEAR	08AB	CODESEG
NEWCDRB  . . . . . . . . . . . .  	L NEAR	022A	CODESEG
NEWCDRBAX  . . . . . . . . . . .  	L NEAR	1473	CODESEG
NEWCDRBBX  . . . . . . . . . . .  	L NEAR	0D5F	CODESEG
NEWCDRBCX  . . . . . . . . . . .  	L NEAR	00D9	CODESEG
NEWCDRC  . . . . . . . . . . . .  	L NEAR	04C2	CODESEG
NEWCDRCAX  . . . . . . . . . . .  	L NEAR	26C1	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-10


NEWCDRCCX  . . . . . . . . . . .  	L NEAR	09BC	CODESEG
NEWCDRDBX  . . . . . . . . . . .  	L NEAR	26E6	CODESEG
NEWCDRDCX  . . . . . . . . . . .  	L NEAR	0537	CODESEG
NEWNAM . . . . . . . . . . . . .  	L NEAR	08EF	CODESEG
NFOUN  . . . . . . . . . . . . .  	L NEAR	08D0	CODESEG
NFOUN2 . . . . . . . . . . . . .  	L NEAR	08DA	CODESEG
NIBBLE . . . . . . . . . . . . .  	L NEAR	3DA3	CODESEG
NIL  . . . . . . . . . . . . . .  	NUMBER	0000	
NILRET . . . . . . . . . . . . .  	L NEAR	019A	CODESEG
NLAMBA . . . . . . . . . . . . .  	L NEAR	205A	CODESEG
NMBR . . . . . . . . . . . . . .  	L NEAR	180D	CODESEG
NNOTSET  . . . . . . . . . . . .  	L NEAR	32E1	CODESEG
NOCOCO . . . . . . . . . . . . .  	L NEAR	33A5	CODESEG
NODTYP . . . . . . . . . . . . .  	L WORD	0100	DATASEG
NOEQ . . . . . . . . . . . . . .  	L NEAR	1BAC	CODESEG
NOFSYM . . . . . . . . . . . . .  	L NEAR	0344	CODESEG
NOKP2  . . . . . . . . . . . . .  	L NEAR	315E	CODESEG
NOKPIX . . . . . . . . . . . . .  	L NEAR	3141	CODESEG
NOKPIX3  . . . . . . . . . . . .  	L NEAR	2F83	CODESEG
NOMOREARG  . . . . . . . . . . .  	L NEAR	2EA2	CODESEG
NOPRINT  . . . . . . . . . . . .  	L NEAR	28C5	CODESEG
NORETT . . . . . . . . . . . . .  	L NEAR	37D9	CODESEG
NORVGA . . . . . . . . . . . . .  	L NEAR	31AC	CODESEG
NOSETN . . . . . . . . . . . . .  	L NEAR	1CEF	CODESEG
NOSKIP . . . . . . . . . . . . .  	L NEAR	04FE	CODESEG
NOTCOM . . . . . . . . . . . . .  	L NEAR	06C7	CODESEG
NOUTO  . . . . . . . . . . . . .  	L NEAR	0E8C	CODESEG
NQUIT2 . . . . . . . . . . . . .  	L NEAR	2996	CODESEG
NREVER . . . . . . . . . . . . .  	L NEAR	1470	CODESEG
NREVZ  . . . . . . . . . . . . .  	L NEAR	14E1	CODESEG
NRSTRD . . . . . . . . . . . . .  	L NEAR	4108	CODESEG
NSL  . . . . . . . . . . . . . .  	L NEAR	2051	CODESEG
NSPAWN . . . . . . . . . . . . .  	L NEAR	3DFB	CODESEG
NUMALF . . . . . . . . . . . . .  	L NEAR	066C	CODESEG
NUMARG . . . . . . . . . . . . .  	L NEAR	0F1A	CODESEG
NUMBER . . . . . . . . . . . . .  	NUMBER	0003	
NUMBI  . . . . . . . . . . . . .  	L NEAR	079D	CODESEG
NUMERIZ  . . . . . . . . . . . .  	L NEAR	3D15	CODESEG
NUMERR . . . . . . . . . . . . .  	L NEAR	0F09	CODESEG
NUMP . . . . . . . . . . . . . .  	L NEAR	0662	CODESEG
NUMVAL . . . . . . . . . . . . .  	L NEAR	0F1D	CODESEG
NUMVALCAR  . . . . . . . . . . .  	L NEAR	0F3E	CODESEG
NUMVALIM . . . . . . . . . . . .  	L NEAR	0F42	CODESEG
NXTCH  . . . . . . . . . . . . .  	L BYTE	2694	DATASEG
NXTSBR . . . . . . . . . . . . .  	NUMBER	2FF5	DATASEG

OBLIST . . . . . . . . . . . . .  	L WORD	010C	DATASEG
OBLNAM . . . . . . . . . . . . .  	L NEAR	08F5	CODESEG
OHIRUU . . . . . . . . . . . . .  	L NEAR	30E8	CODESEG
ONBYT  . . . . . . . . . . . . .  	L NEAR	316C	CODESEG
ONEARG . . . . . . . . . . . . .  	L NEAR	0ECD	CODESEG
ONECH  . . . . . . . . . . . . .  	L BYTE	269B	DATASEG
ONE_OF_M . . . . . . . . . . . .  	L NEAR	3B88	CODESEG
OPEITE . . . . . . . . . . . . .  	L NEAR	292C	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-11


OPEN . . . . . . . . . . . . . .  	L NEAR	2926	CODESEG
ORIGINAL . . . . . . . . . . . .  	L WORD	2E1E	DATASEG
ORR  . . . . . . . . . . . . . .  	L NEAR	15F8	CODESEG
OUTCHN . . . . . . . . . . . . .  	L WORD	2697	DATASEG
OUTOA  . . . . . . . . . . . . .  	L NEAR	0EB5	CODESEG
OUTOFM1  . . . . . . . . . . . .  	L NEAR	03E9	CODESEG
OUTOFMEM . . . . . . . . . . . .  	L NEAR	0481	CODESEG

PAGE_FRAME_SEGMENT . . . . . . .  	L WORD	18A1	DATASEG
PARAMETERS . . . . . . . . . . .  	L WORD	2EE8	DATASEG	Length = 0007
PARIL  . . . . . . . . . . . . .  	L NEAR	3E17	CODESEG
PATOM  . . . . . . . . . . . . .  	L NEAR	0AD3	CODESEG
PCLOC  . . . . . . . . . . . . .  	L 0002	2CF8	DATASEG
PDOT . . . . . . . . . . . . . .  	L NEAR	0AB8	CODESEG
PEEPPI . . . . . . . . . . . . .  	L NEAR	0277	CODESEG
PELNOL . . . . . . . . . . . . .  	L NEAR	0C23	CODESEG
PLMARG . . . . . . . . . . . . .  	L NEAR	2E90	CODESEG
PLMOFF . . . . . . . . . . . . .  	L WORD	2EA7	CODESEG
PLMSEG . . . . . . . . . . . . .  	L WORD	2EA9	CODESEG
PNAME  . . . . . . . . . . . . .  	L NEAR	0B5B	CODESEG
PNIL . . . . . . . . . . . . . .  	L NEAR	0B49	CODESEG
PNUM . . . . . . . . . . . . . .  	L NEAR	0C00	CODESEG
PNUM2  . . . . . . . . . . . . .  	L NEAR	0C00	CODESEG
PNUM3  . . . . . . . . . . . . .  	L NEAR	0C3E	CODESEG
PNUM4  . . . . . . . . . . . . .  	L NEAR	0C44	CODESEG
PNUM5  . . . . . . . . . . . . .  	L NEAR	0C72	CODESEG
PNUMB  . . . . . . . . . . . . .  	L NEAR	0BA7	CODESEG
POPVA2 . . . . . . . . . . . . .  	L NEAR	23DD	CODESEG
POPVAR . . . . . . . . . . . . .  	L NEAR	2396	CODESEG
POPVARS  . . . . . . . . . . . .  	L NEAR	23DA	CODESEG
POP_AX . . . . . . . . . . . . .  	L NEAR	3BAF	CODESEG
PPR3 . . . . . . . . . . . . . .  	L NEAR	1A25	CODESEG
PPRAEJ . . . . . . . . . . . . .  	L NEAR	1A7F	CODESEG
PPRANO . . . . . . . . . . . . .  	L NEAR	1A51	CODESEG
PPRATE . . . . . . . . . . . . .  	L NEAR	1A89	CODESEG
PPRATO . . . . . . . . . . . . .  	L NEAR	1A8C	CODESEG
PPRE . . . . . . . . . . . . . .  	L NEAR	1AFA	CODESEG
PPRE2  . . . . . . . . . . . . .  	L NEAR	1B11	CODESEG
PPRIN2 . . . . . . . . . . . . .  	L NEAR	1A0B	CODESEG
PPRINT . . . . . . . . . . . . .  	L NEAR	1A07	CODESEG
PPUSV  . . . . . . . . . . . . .  	L NEAR	21B6	CODESEG
PQUOT  . . . . . . . . . . . . .  	L NEAR	0B62	CODESEG
PQUOT2 . . . . . . . . . . . . .  	L NEAR	0B6B	CODESEG
PRINT  . . . . . . . . . . . . .  	L NEAR	0A47	CODESEG
PRINTC . . . . . . . . . . . . .  	L NEAR	2882	CODESEG
PRINTER  . . . . . . . . . . . .  	L NEAR	40AF	CODESEG
PRINTS . . . . . . . . . . . . .  	L NEAR	018C	CODESEG
PRLIS  . . . . . . . . . . . . .  	L NEAR	0A7A	CODESEG
PRLIS2 . . . . . . . . . . . . .  	L NEAR	0A7F	CODESEG
PRNTC2 . . . . . . . . . . . . .  	L NEAR	28B9	CODESEG
PROG . . . . . . . . . . . . . .  	L NEAR	1FC7	CODESEG
PROGN  . . . . . . . . . . . . .  	L NEAR	1E93	CODESEG
PROGN2 . . . . . . . . . . . . .  	L NEAR	1E9B	CODESEG
PRRATJ . . . . . . . . . . . . .  	L NEAR	1AF3	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-12


PRSTR2 . . . . . . . . . . . . .  	L NEAR	0BEB	CODESEG
PRSTRI . . . . . . . . . . . . .  	L NEAR	0BAD	CODESEG
PSUBR  . . . . . . . . . . . . .  	L NEAR	0B7E	CODESEG
PT . . . . . . . . . . . . . . .  	L NEAR	0B52	CODESEG
PUSHOB . . . . . . . . . . . . .  	L NEAR	08FE	CODESEG
PUSHTHIS . . . . . . . . . . . .  	L NEAR	0A28	CODESEG
PUSH_AX  . . . . . . . . . . . .  	L NEAR	382F	CODESEG
PUSVAR . . . . . . . . . . . . .  	L NEAR	2362	CODESEG
PUSVARS  . . . . . . . . . . . .  	L NEAR	23C7	CODESEG
PUS_NUMS . . . . . . . . . . . .  	L NEAR	2EBC	CODESEG

QNAMARG  . . . . . . . . . . . .  	L NEAR	0F97	CODESEG
QPOSI  . . . . . . . . . . . . .  	L NEAR	11B3	CODESEG
QUOTE  . . . . . . . . . . . . .  	NUMBER	0002	
QUOTES . . . . . . . . . . . . .  	L WORD	3043	DATASEG

RAJAT  . . . . . . . . . . . . .  	L NEAR	30CF	CODESEG
RALF2  . . . . . . . . . . . . .  	L NEAR	0896	CODESEG
RALFA0 . . . . . . . . . . . . .  	L NEAR	088C	CODESEG
RALFA1 . . . . . . . . . . . . .  	L NEAR	0893	CODESEG
RAPACODE . . . . . . . . . . . .  	L WORD	0056	RAPASEG
RAPARAPA . . . . . . . . . . . .  	L WORD	0058	RAPASEG
RCONS  . . . . . . . . . . . . .  	L NEAR	07F5	CODESEG
RDATOM . . . . . . . . . . . . .  	L BYTE	011C	DATASEG
RDCON2 . . . . . . . . . . . . .  	L NEAR	0822	CODESEG
RDCONS . . . . . . . . . . . . .  	L NEAR	0814	CODESEG
RDHEX  . . . . . . . . . . . . .  	L NEAR	075C	CODESEG
RDHEX2 . . . . . . . . . . . . .  	L NEAR	076B	CODESEG
RDQUOTE  . . . . . . . . . . . .  	L NEAR	08EB	CODESEG
READ . . . . . . . . . . . . . .  	L NEAR	0699	CODESEG
READC  . . . . . . . . . . . . .  	L NEAR	2828	CODESEG
RECLAIM  . . . . . . . . . . . .  	L NEAR	048D	CODESEG
RECOLU . . . . . . . . . . . . .  	L NEAR	3276	CODESEG
RECURSIVE  . . . . . . . . . . .  	L NEAR	3993	CODESEG
RECURSIVE2 . . . . . . . . . . .  	L NEAR	39A5	CODESEG
REDIMM . . . . . . . . . . . . .  	L NEAR	2841	CODESEG
RELADR . . . . . . . . . . . . .  	L NEAR	3619	CODESEG
REPEA  . . . . . . . . . . . . .  	L NEAR	248C	CODESEG
REPTI  . . . . . . . . . . . . .  	L NEAR	241B	CODESEG
RERIVI . . . . . . . . . . . . .  	L NEAR	327E	CODESEG
RESETMEM . . . . . . . . . . . .  	L NEAR	41E9	CODESEG
RESETSUBR  . . . . . . . . . . .  	L NEAR	41CC	CODESEG
RETNUMBER  . . . . . . . . . . .  	L BYTE	2CFF	DATASEG
RETTEST  . . . . . . . . . . . .  	L NEAR	37D0	CODESEG
RETUEN . . . . . . . . . . . . .  	L NEAR	2574	CODESEG
RETUID . . . . . . . . . . . . .  	L NEAR	071C	CODESEG
RETUIL . . . . . . . . . . . . .  	L NEAR	071F	CODESEG
RETZERO  . . . . . . . . . . . .  	L BYTE	2D00	DATASEG
REVERS . . . . . . . . . . . . .  	L NEAR	140E	CODESEG
REVERSE  . . . . . . . . . . . .  	L NEAR	140B	CODESEG
REVEZ  . . . . . . . . . . . . .  	L NEAR	1446	CODESEG
RIVISI . . . . . . . . . . . . .  	L NEAR	2893	CODESEG
RLIST  . . . . . . . . . . . . .  	L NEAR	07FB	CODESEG
RLOOP  . . . . . . . . . . . . .  	L NEAR	2442	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-13


RNAM2  . . . . . . . . . . . . .  	L NEAR	0934	CODESEG
RNEG . . . . . . . . . . . . . .  	L NEAR	07DF	CODESEG
RNUM . . . . . . . . . . . . . .  	L NEAR	07A5	CODESEG
RNUM2  . . . . . . . . . . . . .  	L NEAR	07AD	CODESEG
RPOSI  . . . . . . . . . . . . .  	L NEAR	11C4	CODESEG
RQUOT  . . . . . . . . . . . . .  	L NEAR	0835	CODESEG
RRIVI  . . . . . . . . . . . . .  	L NEAR	32D8	CODESEG
RSM2 . . . . . . . . . . . . . .  	L NEAR	424E	CODESEG
RSM3 . . . . . . . . . . . . . .  	L NEAR	41EF	CODESEG
RSM4 . . . . . . . . . . . . . .  	L NEAR	426F	CODESEG
RSTOARGS . . . . . . . . . . . .  	L NEAR	204A	CODESEG
RSTOSY . . . . . . . . . . . . .  	L NEAR	33D3	CODESEG
RSTOVAR  . . . . . . . . . . . .  	L NEAR	1D90	CODESEG

SAVEIM2  . . . . . . . . . . . .  	L NEAR	3A21	CODESEG
SAVEIMA  . . . . . . . . . . . .  	L NEAR	3EA0	CODESEG
SAVEIMM  . . . . . . . . . . . .  	L NEAR	3A05	CODESEG
SAVEVAR  . . . . . . . . . . . .  	L NEAR	1D79	CODESEG
SAVIM2 . . . . . . . . . . . . .  	L NEAR	3EDD	CODESEG
SCAR . . . . . . . . . . . . . .  	L NEAR	25C4	CODESEG
SCDR . . . . . . . . . . . . . .  	L NEAR	25F2	CODESEG
SECONU1  . . . . . . . . . . . .  	L NEAR	3CAA	CODESEG
SECONUM  . . . . . . . . . . . .  	L NEAR	3CCE	CODESEG
SET1 . . . . . . . . . . . . . .  	L NEAR	0FD9	CODESEG
SETBXAX  . . . . . . . . . . . .  	L NEAR	106C	CODESEG
SETCOL . . . . . . . . . . . . .  	L NEAR	3189	CODESEG
SETFSY . . . . . . . . . . . . .  	L NEAR	0FFF	CODESEG
SETNIL . . . . . . . . . . . . .  	L NEAR	1CEB	CODESEG
SETNODS2 . . . . . . . . . . . .  	L NEAR	419A	CODESEG
SETNODSEG  . . . . . . . . . . .  	L NEAR	4194	CODESEG
SETQ . . . . . . . . . . . . . .  	L NEAR	0FD1	CODESEG
SETREGS  . . . . . . . . . . . .  	L NEAR	2E43	CODESEG
SETSE2 . . . . . . . . . . . . .  	L NEAR	1CF6	CODESEG
SETSET . . . . . . . . . . . . .  	L NEAR	1C85	CODESEG
SETT . . . . . . . . . . . . . .  	L NEAR	1048	CODESEG
SETXYPIX . . . . . . . . . . . .  	L NEAR	30FA	CODESEG
SET_I2 . . . . . . . . . . . . .  	L NEAR	411F	CODESEG
SET_INTERRUPTS . . . . . . . . .  	L NEAR	4109	CODESEG
SH . . . . . . . . . . . . . . .  	L NEAR	0287	CODESEG
SIIRTO . . . . . . . . . . . . .  	L NEAR	0096	CODESEG
SIKAA  . . . . . . . . . . . . .  	L FAR 	0000	RAPASEG
SIPA . . . . . . . . . . . . . .  	L NEAR	0469	CODESEG
SIREG  . . . . . . . . . . . . .  	L WORD	2B59	DATASEG
SK0  . . . . . . . . . . . . . .  	L NEAR	300A	CODESEG
SK00 . . . . . . . . . . . . . .  	L NEAR	3018	CODESEG
SK000  . . . . . . . . . . . . .  	L NEAR	3022	CODESEG
SKPNIL . . . . . . . . . . . . .  	L NEAR	3666	CODESEG
SKPNILARG  . . . . . . . . . . .  	L NEAR	36A6	CODESEG
SKPT . . . . . . . . . . . . . .  	L NEAR	367C	CODESEG
SKPTARG  . . . . . . . . . . . .  	L NEAR	3692	CODESEG
SMALLNUM . . . . . . . . . . . .  	L NEAR	05EC	CODESEG
SMORE  . . . . . . . . . . . . .  	L NEAR	09DF	CODESEG
SPACEFORJUMP . . . . . . . . . .  	L NEAR	34A2	CODESEG
SPAWN_NAME . . . . . . . . . . .  	L BYTE	2EF8	DATASEG	Length = 0020
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-14


STACKARG . . . . . . . . . . . .  	L NEAR	380E	CODESEG
STACKMARK  . . . . . . . . . . .  	L WORD	1894	DATASEG
STBLER . . . . . . . . . . . . .  	L NEAR	3E78	CODESEG
STRA . . . . . . . . . . . . . .  	NEAR	2EDD	DATASEG
STRARG . . . . . . . . . . . . .  	L NEAR	0F5A	CODESEG
STRCRS . . . . . . . . . . . . .  	L NEAR	2561	CODESEG
STREQU . . . . . . . . . . . . .  	L NEAR	1C1A	CODESEG
STRING . . . . . . . . . . . . .  	NUMBER	0004	
SUBRU  . . . . . . . . . . . . .  	NUMBER	0007	
SYMBOL . . . . . . . . . . . . .  	NUMBER	0005	

T  . . . . . . . . . . . . . . .  	NUMBER	0001	
TABS . . . . . . . . . . . . . .  	L BYTE	2693	DATASEG
TARPEELLISET . . . . . . . . . .  	L NEAR	42B8	CODESEG
TAVCH  . . . . . . . . . . . . .  	L NEAR	32BD	CODESEG
TEMPADDR . . . . . . . . . . . .  	NEAR	305D	DATASEG
TESTNIL  . . . . . . . . . . . .  	L NEAR	3650	CODESEG
THENN  . . . . . . . . . . . . .  	L NEAR	2439	CODESEG
THESECLAUSES . . . . . . . . . .  	L WORD	011A	DATASEG
THISADDR . . . . . . . . . . . .  	L WORD	2CFA	DATASEG
THISCLAUSE . . . . . . . . . . .  	L WORD	2CFC	DATASEG
THISHASH . . . . . . . . . . . .  	L WORD	1B18	DATASEG
THIS_TRACE . . . . . . . . . . .  	L WORD	2FF3	DATASEG
THROW$ERR  . . . . . . . . . . .  	L BYTE	202F	DATASEG
THROWTAG . . . . . . . . . . . .  	L WORD	1896	DATASEG
TOGARCOL . . . . . . . . . . . .  	L NEAR	05A1	CODESEG
TOKACH . . . . . . . . . . . . .  	L NEAR	2778	CODESEG
TOODEEP  . . . . . . . . . . . .  	L NEAR	0C8B	CODESEG
TOPOFSTACK . . . . . . . . . . .  	L WORD	4E20	STACKSEG
TRACE  . . . . . . . . . . . . .  	L WORD	0114	DATASEG
TRALFA . . . . . . . . . . . . .  	L NEAR	0859	CODESEG
TREARG . . . . . . . . . . . . .  	L NEAR	0EE4	CODESEG
TRET . . . . . . . . . . . . . .  	L NEAR	019E	CODESEG
TRON . . . . . . . . . . . . . .  	L WORD	0116	DATASEG
TRUE . . . . . . . . . . . . . .  	L NEAR	068F	CODESEG
TRUES  . . . . . . . . . . . . .  	L WORD	3047	DATASEG
TSTNAM . . . . . . . . . . . . .  	L NEAR	0F9A	CODESEG
TWOARG . . . . . . . . . . . . .  	L NEAR	0ED9	CODESEG
TWONUM . . . . . . . . . . . . .  	L NEAR	0F4B	CODESEG

UALFP  . . . . . . . . . . . . .  	L NEAR	067C	CODESEG
UPCHA  . . . . . . . . . . . . .  	L NEAR	0686	CODESEG
UPOK . . . . . . . . . . . . . .  	L NEAR	068E	CODESEG
UPTOHE . . . . . . . . . . . . .  	L NEAR	3412	CODESEG
USTRER . . . . . . . . . . . . .  	L NEAR	0F86	CODESEG
UURIVI . . . . . . . . . . . . .  	L NEAR	32CB	CODESEG
UUSNIL . . . . . . . . . . . . .  	L NEAR	0813	CODESEG

V90  . . . . . . . . . . . . . .  	L WORD	2C47	DATASEG
VALOFSYMB  . . . . . . . . . . .  	L NEAR	3B12	CODESEG
VARMA  . . . . . . . . . . . . .  	L NEAR	0391	CODESEG
VARMA2 . . . . . . . . . . . . .  	L NEAR	03CE	CODESEG
VGAALI . . . . . . . . . . . . .  	L NEAR	3194	CODESEG
VGAPIX . . . . . . . . . . . . .  	L NEAR	319F	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-15


VIIVA  . . . . . . . . . . . . .  	L NEAR	306E	CODESEG
VOI_PASKA  . . . . . . . . . . .  	L NEAR	25B8	CODESEG

WLOOP  . . . . . . . . . . . . .  	L NEAR	2467	CODESEG

XORCOL . . . . . . . . . . . . .  	L NEAR	318E	CODESEG
X_APU  . . . . . . . . . . . . .  	L WORD	2C3A	DATASEG
X_DONE . . . . . . . . . . . . .  	L NEAR	2B23	CODESEG
X_LOC  . . . . . . . . . . . . .  	L WORD	2C2E	DATASEG
X_MAX  . . . . . . . . . . . . .  	L WORD	2C2A	DATASEG
X_ORIGO  . . . . . . . . . . . .  	L WORD	2C26	DATASEG
X_YLOS . . . . . . . . . . . . .  	L WORD	2C32	DATASEG

YBYTE  . . . . . . . . . . . . .  	L NEAR	3D95	CODESEG
Y_APU  . . . . . . . . . . . . .  	L WORD	2C3C	DATASEG
Y_DONE . . . . . . . . . . . . .  	L NEAR	2B29	CODESEG
Y_LOC  . . . . . . . . . . . . .  	L WORD	2C30	DATASEG
Y_MAX  . . . . . . . . . . . . .  	L WORD	2C2C	DATASEG
Y_ORIGO  . . . . . . . . . . . .  	L WORD	2C28	DATASEG
Y_YLOS . . . . . . . . . . . . .  	L WORD	2C34	DATASEG

ZEROFLAG . . . . . . . . . . . .  	L BYTE	1B66	DATASEG
ZERONUM  . . . . . . . . . . . .  	NUMBER	0003	

??0000 . . . . . . . . . . . . .  	L NEAR	00AB	CODESEG
??0001 . . . . . . . . . . . . .  	L NEAR	00AF	CODESEG
??0002 . . . . . . . . . . . . .  	L NEAR	00D4	CODESEG
??0003 . . . . . . . . . . . . .  	L NEAR	00C5	CODESEG
??0004 . . . . . . . . . . . . .  	L NEAR	00F9	CODESEG
??0005 . . . . . . . . . . . . .  	L NEAR	00EA	CODESEG
??0006 . . . . . . . . . . . . .  	L NEAR	0111	CODESEG
??0007 . . . . . . . . . . . . .  	L NEAR	0115	CODESEG
??0008 . . . . . . . . . . . . .  	L NEAR	012A	CODESEG
??0009 . . . . . . . . . . . . .  	L NEAR	0138	CODESEG
??000A . . . . . . . . . . . . .  	L NEAR	014A	CODESEG
??000B . . . . . . . . . . . . .  	L NEAR	0158	CODESEG
??000C . . . . . . . . . . . . .  	L NEAR	01CE	CODESEG
??000D . . . . . . . . . . . . .  	L NEAR	01D2	CODESEG
??000E . . . . . . . . . . . . .  	L NEAR	0223	CODESEG
??000F . . . . . . . . . . . . .  	L NEAR	0214	CODESEG
??0010 . . . . . . . . . . . . .  	L NEAR	0245	CODESEG
??0011 . . . . . . . . . . . . .  	L NEAR	0236	CODESEG
??0012 . . . . . . . . . . . . .  	L NEAR	0266	CODESEG
??0013 . . . . . . . . . . . . .  	L NEAR	0257	CODESEG
??0014 . . . . . . . . . . . . .  	L NEAR	029D	CODESEG
??0015 . . . . . . . . . . . . .  	L NEAR	02A1	CODESEG
??0016 . . . . . . . . . . . . .  	L NEAR	02CB	CODESEG
??0017 . . . . . . . . . . . . .  	L NEAR	02CF	CODESEG
??0018 . . . . . . . . . . . . .  	L NEAR	030B	CODESEG
??0019 . . . . . . . . . . . . .  	L NEAR	02FC	CODESEG
??001A . . . . . . . . . . . . .  	L NEAR	032A	CODESEG
??001B . . . . . . . . . . . . .  	L NEAR	032E	CODESEG
??001C . . . . . . . . . . . . .  	L NEAR	039F	CODESEG
??001D . . . . . . . . . . . . .  	L NEAR	03A3	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-16


??001E . . . . . . . . . . . . .  	L NEAR	03BD	CODESEG
??001F . . . . . . . . . . . . .  	L NEAR	03CB	CODESEG
??0020 . . . . . . . . . . . . .  	L NEAR	04BD	CODESEG
??0021 . . . . . . . . . . . . .  	L NEAR	04AE	CODESEG
??0022 . . . . . . . . . . . . .  	L NEAR	04DD	CODESEG
??0023 . . . . . . . . . . . . .  	L NEAR	04CE	CODESEG
??0024 . . . . . . . . . . . . .  	L NEAR	04EE	CODESEG
??0025 . . . . . . . . . . . . .  	L NEAR	04F2	CODESEG
??0026 . . . . . . . . . . . . .  	L NEAR	0519	CODESEG
??0027 . . . . . . . . . . . . .  	L NEAR	0527	CODESEG
??0028 . . . . . . . . . . . . .  	L NEAR	0557	CODESEG
??0029 . . . . . . . . . . . . .  	L NEAR	0548	CODESEG
??002A . . . . . . . . . . . . .  	L NEAR	0570	CODESEG
??002B . . . . . . . . . . . . .  	L NEAR	057E	CODESEG
??002C . . . . . . . . . . . . .  	L NEAR	0590	CODESEG
??002D . . . . . . . . . . . . .  	L NEAR	059E	CODESEG
??002E . . . . . . . . . . . . .  	L NEAR	05C1	CODESEG
??002F . . . . . . . . . . . . .  	L NEAR	05C5	CODESEG
??0030 . . . . . . . . . . . . .  	L NEAR	05E4	CODESEG
??0031 . . . . . . . . . . . . .  	L NEAR	05E8	CODESEG
??0032 . . . . . . . . . . . . .  	L NEAR	0603	CODESEG
??0033 . . . . . . . . . . . . .  	L NEAR	0607	CODESEG
??0034 . . . . . . . . . . . . .  	L NEAR	0625	CODESEG
??0035 . . . . . . . . . . . . .  	L NEAR	0629	CODESEG
??0036 . . . . . . . . . . . . .  	L NEAR	065A	CODESEG
??0037 . . . . . . . . . . . . .  	L NEAR	065E	CODESEG
??0038 . . . . . . . . . . . . .  	L NEAR	066B	CODESEG
??0039 . . . . . . . . . . . . .  	L NEAR	067A	CODESEG
??003A . . . . . . . . . . . . .  	L NEAR	0685	CODESEG
??003B . . . . . . . . . . . . .  	L NEAR	0783	CODESEG
??003C . . . . . . . . . . . . .  	L NEAR	0794	CODESEG
??003D . . . . . . . . . . . . .  	L NEAR	07BF	CODESEG
??003E . . . . . . . . . . . . .  	L NEAR	087B	CODESEG
??003F . . . . . . . . . . . . .  	L NEAR	087F	CODESEG
??0040 . . . . . . . . . . . . .  	L NEAR	08CB	CODESEG
??0041 . . . . . . . . . . . . .  	L NEAR	08BC	CODESEG
??0042 . . . . . . . . . . . . .  	L NEAR	091B	CODESEG
??0043 . . . . . . . . . . . . .  	L NEAR	0929	CODESEG
??0044 . . . . . . . . . . . . .  	L NEAR	0956	CODESEG
??0045 . . . . . . . . . . . . .  	L NEAR	0947	CODESEG
??0046 . . . . . . . . . . . . .  	L NEAR	09B1	CODESEG
??0047 . . . . . . . . . . . . .  	L NEAR	09A2	CODESEG
??0048 . . . . . . . . . . . . .  	L NEAR	09DC	CODESEG
??0049 . . . . . . . . . . . . .  	L NEAR	09CD	CODESEG
??004A . . . . . . . . . . . . .  	L NEAR	0A15	CODESEG
??004B . . . . . . . . . . . . .  	L NEAR	0A06	CODESEG
??004C . . . . . . . . . . . . .  	L NEAR	0A5E	CODESEG
??004D . . . . . . . . . . . . .  	L NEAR	0A62	CODESEG
??004E . . . . . . . . . . . . .  	L NEAR	0AA1	CODESEG
??004F . . . . . . . . . . . . .  	L NEAR	0AA5	CODESEG
??0050 . . . . . . . . . . . . .  	L NEAR	0AE1	CODESEG
??0051 . . . . . . . . . . . . .  	L NEAR	0AE5	CODESEG
??0052 . . . . . . . . . . . . .  	L NEAR	0BD5	CODESEG
??0053 . . . . . . . . . . . . .  	L NEAR	0BC6	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-17


??0054 . . . . . . . . . . . . .  	L NEAR	0CE4	CODESEG
??0055 . . . . . . . . . . . . .  	L NEAR	0CE8	CODESEG
??0056 . . . . . . . . . . . . .  	L NEAR	0D11	CODESEG
??0057 . . . . . . . . . . . . .  	L NEAR	0D02	CODESEG
??0058 . . . . . . . . . . . . .  	L NEAR	0D7F	CODESEG
??0059 . . . . . . . . . . . . .  	L NEAR	0D70	CODESEG
??005A . . . . . . . . . . . . .  	L NEAR	0DA8	CODESEG
??005B . . . . . . . . . . . . .  	L NEAR	0DAC	CODESEG
??005C . . . . . . . . . . . . .  	L NEAR	0DEB	CODESEG
??005D . . . . . . . . . . . . .  	L NEAR	0DDC	CODESEG
??005E . . . . . . . . . . . . .  	L NEAR	0E1A	CODESEG
??005F . . . . . . . . . . . . .  	L NEAR	0E1E	CODESEG
??0060 . . . . . . . . . . . . .  	L NEAR	0E7C	CODESEG
??0061 . . . . . . . . . . . . .  	L NEAR	0E80	CODESEG
??0062 . . . . . . . . . . . . .  	L NEAR	0EA6	CODESEG
??0063 . . . . . . . . . . . . .  	L NEAR	0EB4	CODESEG
??0064 . . . . . . . . . . . . .  	L NEAR	0F30	CODESEG
??0065 . . . . . . . . . . . . .  	L NEAR	0F34	CODESEG
??0066 . . . . . . . . . . . . .  	L NEAR	0F6B	CODESEG
??0067 . . . . . . . . . . . . .  	L NEAR	0F6F	CODESEG
??0068 . . . . . . . . . . . . .  	L NEAR	0FA8	CODESEG
??0069 . . . . . . . . . . . . .  	L NEAR	0FAC	CODESEG
??006A . . . . . . . . . . . . .  	L NEAR	0FF0	CODESEG
??006B . . . . . . . . . . . . .  	L NEAR	0FFE	CODESEG
??006C . . . . . . . . . . . . .  	L NEAR	1026	CODESEG
??006D . . . . . . . . . . . . .  	L NEAR	1017	CODESEG
??006E . . . . . . . . . . . . .  	L NEAR	1056	CODESEG
??006F . . . . . . . . . . . . .  	L NEAR	105A	CODESEG
??0070 . . . . . . . . . . . . .  	L NEAR	107E	CODESEG
??0071 . . . . . . . . . . . . .  	L NEAR	108C	CODESEG
??0072 . . . . . . . . . . . . .  	L NEAR	10D6	CODESEG
??0073 . . . . . . . . . . . . .  	L NEAR	10FE	CODESEG
??0074 . . . . . . . . . . . . .  	L NEAR	1101	CODESEG
??0075 . . . . . . . . . . . . .  	L NEAR	1114	CODESEG
??0076 . . . . . . . . . . . . .  	L NEAR	1116	CODESEG
??0077 . . . . . . . . . . . . .  	L NEAR	1137	CODESEG
??0078 . . . . . . . . . . . . .  	L NEAR	1139	CODESEG
??0079 . . . . . . . . . . . . .  	L NEAR	115A	CODESEG
??007A . . . . . . . . . . . . .  	L NEAR	115C	CODESEG
??007B . . . . . . . . . . . . .  	L NEAR	1181	CODESEG
??007C . . . . . . . . . . . . .  	L NEAR	1183	CODESEG
??007D . . . . . . . . . . . . .  	L NEAR	11A3	CODESEG
??007E . . . . . . . . . . . . .  	L NEAR	11A5	CODESEG
??007F . . . . . . . . . . . . .  	L NEAR	1204	CODESEG
??0080 . . . . . . . . . . . . .  	L NEAR	1205	CODESEG
??0081 . . . . . . . . . . . . .  	L NEAR	1225	CODESEG
??0082 . . . . . . . . . . . . .  	L NEAR	1226	CODESEG
??0083 . . . . . . . . . . . . .  	L NEAR	125C	CODESEG
??0084 . . . . . . . . . . . . .  	L NEAR	125F	CODESEG
??0085 . . . . . . . . . . . . .  	L NEAR	1279	CODESEG
??0086 . . . . . . . . . . . . .  	L NEAR	127C	CODESEG
??0087 . . . . . . . . . . . . .  	L NEAR	12CB	CODESEG
??0088 . . . . . . . . . . . . .  	L NEAR	12CD	CODESEG
??0089 . . . . . . . . . . . . .  	L NEAR	12EB	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-18


??008A . . . . . . . . . . . . .  	L NEAR	12EF	CODESEG
??008B . . . . . . . . . . . . .  	L NEAR	1310	CODESEG
??008C . . . . . . . . . . . . .  	L NEAR	1314	CODESEG
??008D . . . . . . . . . . . . .  	L NEAR	133E	CODESEG
??008E . . . . . . . . . . . . .  	L NEAR	1342	CODESEG
??008F . . . . . . . . . . . . .  	L NEAR	137D	CODESEG
??0090 . . . . . . . . . . . . .  	L NEAR	1381	CODESEG
??0091 . . . . . . . . . . . . .  	L NEAR	13C9	CODESEG
??0092 . . . . . . . . . . . . .  	L NEAR	13E5	CODESEG
??0093 . . . . . . . . . . . . .  	L NEAR	13E8	CODESEG
??0094 . . . . . . . . . . . . .  	L NEAR	1407	CODESEG
??0095 . . . . . . . . . . . . .  	L NEAR	1425	CODESEG
??0096 . . . . . . . . . . . . .  	L NEAR	1429	CODESEG
??0097 . . . . . . . . . . . . .  	L NEAR	1460	CODESEG
??0098 . . . . . . . . . . . . .  	L NEAR	1464	CODESEG
??0099 . . . . . . . . . . . . .  	L NEAR	1493	CODESEG
??009A . . . . . . . . . . . . .  	L NEAR	1484	CODESEG
??009B . . . . . . . . . . . . .  	L NEAR	14A8	CODESEG
??009C . . . . . . . . . . . . .  	L NEAR	14B6	CODESEG
??009D . . . . . . . . . . . . .  	L NEAR	14CE	CODESEG
??009E . . . . . . . . . . . . .  	L NEAR	14D2	CODESEG
??009F . . . . . . . . . . . . .  	L NEAR	14FA	CODESEG
??00A0 . . . . . . . . . . . . .  	L NEAR	14FE	CODESEG
??00A1 . . . . . . . . . . . . .  	L NEAR	1519	CODESEG
??00A2 . . . . . . . . . . . . .  	L NEAR	1527	CODESEG
??00A3 . . . . . . . . . . . . .  	L NEAR	153F	CODESEG
??00A4 . . . . . . . . . . . . .  	L NEAR	1543	CODESEG
??00A5 . . . . . . . . . . . . .  	L NEAR	155E	CODESEG
??00A6 . . . . . . . . . . . . .  	L NEAR	156C	CODESEG
??00A7 . . . . . . . . . . . . .  	L NEAR	15D9	CODESEG
??00A8 . . . . . . . . . . . . .  	L NEAR	15DC	CODESEG
??00A9 . . . . . . . . . . . . .  	L NEAR	166A	CODESEG
??00AA . . . . . . . . . . . . .  	L NEAR	166E	CODESEG
??00AB . . . . . . . . . . . . .  	L NEAR	1692	CODESEG
??00AC . . . . . . . . . . . . .  	L NEAR	16A0	CODESEG
??00AD . . . . . . . . . . . . .  	L NEAR	16FE	CODESEG
??00AE . . . . . . . . . . . . .  	L NEAR	1702	CODESEG
??00AF . . . . . . . . . . . . .  	L NEAR	172B	CODESEG
??00B0 . . . . . . . . . . . . .  	L NEAR	172F	CODESEG
??00B1 . . . . . . . . . . . . .  	L NEAR	1783	CODESEG
??00B2 . . . . . . . . . . . . .  	L NEAR	1786	CODESEG
??00B3 . . . . . . . . . . . . .  	L NEAR	17B5	CODESEG
??00B4 . . . . . . . . . . . . .  	L NEAR	17B9	CODESEG
??00B5 . . . . . . . . . . . . .  	L NEAR	17F0	CODESEG
??00B6 . . . . . . . . . . . . .  	L NEAR	17F4	CODESEG
??00B7 . . . . . . . . . . . . .  	L NEAR	181B	CODESEG
??00B8 . . . . . . . . . . . . .  	L NEAR	181F	CODESEG
??00B9 . . . . . . . . . . . . .  	L NEAR	183F	CODESEG
??00BA . . . . . . . . . . . . .  	L NEAR	1843	CODESEG
??00BB . . . . . . . . . . . . .  	L NEAR	1863	CODESEG
??00BC . . . . . . . . . . . . .  	L NEAR	1867	CODESEG
??00BD . . . . . . . . . . . . .  	L NEAR	1899	CODESEG
??00BE . . . . . . . . . . . . .  	L NEAR	189D	CODESEG
??00BF . . . . . . . . . . . . .  	L NEAR	18DB	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-19


??00C0 . . . . . . . . . . . . .  	L NEAR	18DF	CODESEG
??00C1 . . . . . . . . . . . . .  	L NEAR	18FE	CODESEG
??00C2 . . . . . . . . . . . . .  	L NEAR	1902	CODESEG
??00C3 . . . . . . . . . . . . .  	L NEAR	1923	CODESEG
??00C4 . . . . . . . . . . . . .  	L NEAR	1927	CODESEG
??00C5 . . . . . . . . . . . . .  	L NEAR	193D	CODESEG
??00C6 . . . . . . . . . . . . .  	L NEAR	1941	CODESEG
??00C7 . . . . . . . . . . . . .  	L NEAR	1953	CODESEG
??00C8 . . . . . . . . . . . . .  	L NEAR	1957	CODESEG
??00C9 . . . . . . . . . . . . .  	L NEAR	1985	CODESEG
??00CA . . . . . . . . . . . . .  	L NEAR	1987	CODESEG
??00CB . . . . . . . . . . . . .  	L NEAR	19A8	CODESEG
??00CC . . . . . . . . . . . . .  	L NEAR	19AA	CODESEG
??00CD . . . . . . . . . . . . .  	L NEAR	19CB	CODESEG
??00CE . . . . . . . . . . . . .  	L NEAR	19CD	CODESEG
??00CF . . . . . . . . . . . . .  	L NEAR	1A41	CODESEG
??00D0 . . . . . . . . . . . . .  	L NEAR	1A45	CODESEG
??00D1 . . . . . . . . . . . . .  	L NEAR	1A6F	CODESEG
??00D2 . . . . . . . . . . . . .  	L NEAR	1A73	CODESEG
??00D3 . . . . . . . . . . . . .  	L NEAR	1AB6	CODESEG
??00D4 . . . . . . . . . . . . .  	L NEAR	1ABA	CODESEG
??00D5 . . . . . . . . . . . . .  	L NEAR	1AE1	CODESEG
??00D6 . . . . . . . . . . . . .  	L NEAR	1AE5	CODESEG
??00D7 . . . . . . . . . . . . .  	L NEAR	1B32	CODESEG
??00D8 . . . . . . . . . . . . .  	L NEAR	1B36	CODESEG
??00D9 . . . . . . . . . . . . .  	L NEAR	1B5A	CODESEG
??00DA . . . . . . . . . . . . .  	L NEAR	1B5E	CODESEG
??00DB . . . . . . . . . . . . .  	L NEAR	1B9C	CODESEG
??00DC . . . . . . . . . . . . .  	L NEAR	1BA0	CODESEG
??00DD . . . . . . . . . . . . .  	L NEAR	1BBF	CODESEG
??00DE . . . . . . . . . . . . .  	L NEAR	1BC3	CODESEG
??00DF . . . . . . . . . . . . .  	L NEAR	1BD4	CODESEG
??00E0 . . . . . . . . . . . . .  	L NEAR	1BD8	CODESEG
??00E1 . . . . . . . . . . . . .  	L NEAR	1C14	CODESEG
??00E2 . . . . . . . . . . . . .  	L NEAR	1C05	CODESEG
??00E3 . . . . . . . . . . . . .  	L NEAR	1C79	CODESEG
??00E4 . . . . . . . . . . . . .  	L NEAR	1C7B	CODESEG
??00E5 . . . . . . . . . . . . .  	L NEAR	1CA2	CODESEG
??00E6 . . . . . . . . . . . . .  	L NEAR	1CA6	CODESEG
??00E7 . . . . . . . . . . . . .  	L NEAR	1CD1	CODESEG
??00E8 . . . . . . . . . . . . .  	L NEAR	1CD5	CODESEG
??00E9 . . . . . . . . . . . . .  	L NEAR	1D17	CODESEG
??00EA . . . . . . . . . . . . .  	L NEAR	1D1B	CODESEG
??00EB . . . . . . . . . . . . .  	L NEAR	1D4C	CODESEG
??00EC . . . . . . . . . . . . .  	L NEAR	1D50	CODESEG
??00ED . . . . . . . . . . . . .  	L NEAR	1DC9	CODESEG
??00EE . . . . . . . . . . . . .  	L NEAR	1DCD	CODESEG
??00EF . . . . . . . . . . . . .  	L NEAR	1EAF	CODESEG
??00F0 . . . . . . . . . . . . .  	L NEAR	1EB3	CODESEG
??00F1 . . . . . . . . . . . . .  	L NEAR	1EEA	CODESEG
??00F2 . . . . . . . . . . . . .  	L NEAR	1EEE	CODESEG
??00F3 . . . . . . . . . . . . .  	L NEAR	1F01	CODESEG
??00F4 . . . . . . . . . . . . .  	L NEAR	1F05	CODESEG
??00F5 . . . . . . . . . . . . .  	L NEAR	1F4E	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-20


??00F6 . . . . . . . . . . . . .  	L NEAR	1F52	CODESEG
??00F7 . . . . . . . . . . . . .  	L NEAR	1FA3	CODESEG
??00F8 . . . . . . . . . . . . .  	L NEAR	1FA7	CODESEG
??00F9 . . . . . . . . . . . . .  	L NEAR	1FFC	CODESEG
??00FA . . . . . . . . . . . . .  	L NEAR	201F	CODESEG
??00FB . . . . . . . . . . . . .  	L NEAR	20FF	CODESEG
??00FC . . . . . . . . . . . . .  	L NEAR	2103	CODESEG
??00FD . . . . . . . . . . . . .  	L NEAR	2120	CODESEG
??00FE . . . . . . . . . . . . .  	L NEAR	2124	CODESEG
??00FF . . . . . . . . . . . . .  	L NEAR	21E9	CODESEG
??0100 . . . . . . . . . . . . .  	L NEAR	221D	CODESEG
??0101 . . . . . . . . . . . . .  	L NEAR	2257	CODESEG
??0102 . . . . . . . . . . . . .  	L NEAR	2298	CODESEG
??0103 . . . . . . . . . . . . .  	L NEAR	22DF	CODESEG
??0104 . . . . . . . . . . . . .  	L NEAR	230B	CODESEG
??0105 . . . . . . . . . . . . .  	L NEAR	231E	CODESEG
??0106 . . . . . . . . . . . . .  	L NEAR	231F	CODESEG
??0107 . . . . . . . . . . . . .  	L NEAR	233E	CODESEG
??0108 . . . . . . . . . . . . .  	L NEAR	2361	CODESEG
??0109 . . . . . . . . . . . . .  	L NEAR	2379	CODESEG
??010A . . . . . . . . . . . . .  	L NEAR	237D	CODESEG
??010B . . . . . . . . . . . . .  	L NEAR	2394	CODESEG
??010C . . . . . . . . . . . . .  	L NEAR	23AA	CODESEG
??010D . . . . . . . . . . . . .  	L NEAR	23AE	CODESEG
??010E . . . . . . . . . . . . .  	L NEAR	23C5	CODESEG
??010F . . . . . . . . . . . . .  	L NEAR	24AB	CODESEG
??0110 . . . . . . . . . . . . .  	L NEAR	24AF	CODESEG
??0111 . . . . . . . . . . . . .  	L NEAR	2529	CODESEG
??0112 . . . . . . . . . . . . .  	L NEAR	252D	CODESEG
??0113 . . . . . . . . . . . . .  	L NEAR	2556	CODESEG
??0114 . . . . . . . . . . . . .  	L NEAR	2547	CODESEG
??0115 . . . . . . . . . . . . .  	L NEAR	2594	CODESEG
??0116 . . . . . . . . . . . . .  	L NEAR	2598	CODESEG
??0117 . . . . . . . . . . . . .  	L NEAR	25DB	CODESEG
??0118 . . . . . . . . . . . . .  	L NEAR	25DF	CODESEG
??0119 . . . . . . . . . . . . .  	L NEAR	2609	CODESEG
??011A . . . . . . . . . . . . .  	L NEAR	260D	CODESEG
??011B . . . . . . . . . . . . .  	L NEAR	26E1	CODESEG
??011C . . . . . . . . . . . . .  	L NEAR	26D2	CODESEG
??011D . . . . . . . . . . . . .  	L NEAR	2706	CODESEG
??011E . . . . . . . . . . . . .  	L NEAR	26F7	CODESEG
??011F . . . . . . . . . . . . .  	L NEAR	271B	CODESEG
??0120 . . . . . . . . . . . . .  	L NEAR	2729	CODESEG
??0121 . . . . . . . . . . . . .  	L NEAR	273B	CODESEG
??0122 . . . . . . . . . . . . .  	L NEAR	2749	CODESEG
??0123 . . . . . . . . . . . . .  	L NEAR	27CB	CODESEG
??0124 . . . . . . . . . . . . .  	L NEAR	27D9	CODESEG
??0125 . . . . . . . . . . . . .  	L NEAR	29D7	CODESEG
??0126 . . . . . . . . . . . . .  	L NEAR	29D9	CODESEG
??0127 . . . . . . . . . . . . .  	L NEAR	29EC	CODESEG
??0128 . . . . . . . . . . . . .  	L NEAR	29EE	CODESEG
??0129 . . . . . . . . . . . . .  	L NEAR	2A37	CODESEG
??012A . . . . . . . . . . . . .  	L NEAR	2A39	CODESEG
??012B . . . . . . . . . . . . .  	L NEAR	2A4C	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-21


??012C . . . . . . . . . . . . .  	L NEAR	2A4F	CODESEG
??012D . . . . . . . . . . . . .  	L NEAR	2AAB	CODESEG
??012E . . . . . . . . . . . . .  	L NEAR	2AAC	CODESEG
??012F . . . . . . . . . . . . .  	L NEAR	2ABF	CODESEG
??0130 . . . . . . . . . . . . .  	L NEAR	2AC0	CODESEG
??0131 . . . . . . . . . . . . .  	L NEAR	2AD7	CODESEG
??0132 . . . . . . . . . . . . .  	L NEAR	2ADA	CODESEG
??0133 . . . . . . . . . . . . .  	L NEAR	2AF1	CODESEG
??0134 . . . . . . . . . . . . .  	L NEAR	2AF4	CODESEG
??0135 . . . . . . . . . . . . .  	L NEAR	2B52	CODESEG
??0136 . . . . . . . . . . . . .  	L NEAR	2B7E	CODESEG
??0137 . . . . . . . . . . . . .  	L NEAR	2B7A	CODESEG
??0138 . . . . . . . . . . . . .  	L NEAR	2B7D	CODESEG
??0139 . . . . . . . . . . . . .  	L NEAR	2B91	CODESEG
??013A . . . . . . . . . . . . .  	L NEAR	2B94	CODESEG
??013B . . . . . . . . . . . . .  	L NEAR	2BAD	CODESEG
??013C . . . . . . . . . . . . .  	L NEAR	2BD9	CODESEG
??013D . . . . . . . . . . . . .  	L NEAR	2BD5	CODESEG
??013E . . . . . . . . . . . . .  	L NEAR	2BD8	CODESEG
??013F . . . . . . . . . . . . .  	L NEAR	2BEC	CODESEG
??0140 . . . . . . . . . . . . .  	L NEAR	2BEF	CODESEG
??0141 . . . . . . . . . . . . .  	L NEAR	2C08	CODESEG
??0142 . . . . . . . . . . . . .  	L NEAR	2C34	CODESEG
??0143 . . . . . . . . . . . . .  	L NEAR	2C30	CODESEG
??0144 . . . . . . . . . . . . .  	L NEAR	2C33	CODESEG
??0145 . . . . . . . . . . . . .  	L NEAR	2C47	CODESEG
??0146 . . . . . . . . . . . . .  	L NEAR	2C4A	CODESEG
??0147 . . . . . . . . . . . . .  	L NEAR	2C63	CODESEG
??0148 . . . . . . . . . . . . .  	L NEAR	2C8F	CODESEG
??0149 . . . . . . . . . . . . .  	L NEAR	2C8B	CODESEG
??014A . . . . . . . . . . . . .  	L NEAR	2C8E	CODESEG
??014B . . . . . . . . . . . . .  	L NEAR	2CA2	CODESEG
??014C . . . . . . . . . . . . .  	L NEAR	2CA5	CODESEG
??014D . . . . . . . . . . . . .  	L NEAR	2CBE	CODESEG
??014E . . . . . . . . . . . . .  	L NEAR	2CEA	CODESEG
??014F . . . . . . . . . . . . .  	L NEAR	2CE6	CODESEG
??0150 . . . . . . . . . . . . .  	L NEAR	2CE9	CODESEG
??0151 . . . . . . . . . . . . .  	L NEAR	2CFD	CODESEG
??0152 . . . . . . . . . . . . .  	L NEAR	2D00	CODESEG
??0153 . . . . . . . . . . . . .  	L NEAR	2D19	CODESEG
??0154 . . . . . . . . . . . . .  	L NEAR	2D45	CODESEG
??0155 . . . . . . . . . . . . .  	L NEAR	2D41	CODESEG
??0156 . . . . . . . . . . . . .  	L NEAR	2D44	CODESEG
??0157 . . . . . . . . . . . . .  	L NEAR	2D58	CODESEG
??0158 . . . . . . . . . . . . .  	L NEAR	2D5B	CODESEG
??0159 . . . . . . . . . . . . .  	L NEAR	2D74	CODESEG
??015A . . . . . . . . . . . . .  	L NEAR	2DA0	CODESEG
??015B . . . . . . . . . . . . .  	L NEAR	2D9C	CODESEG
??015C . . . . . . . . . . . . .  	L NEAR	2D9F	CODESEG
??015D . . . . . . . . . . . . .  	L NEAR	2DB3	CODESEG
??015E . . . . . . . . . . . . .  	L NEAR	2DB6	CODESEG
??015F . . . . . . . . . . . . .  	L NEAR	2DCF	CODESEG
??0160 . . . . . . . . . . . . .  	L NEAR	2DFB	CODESEG
??0161 . . . . . . . . . . . . .  	L NEAR	2DF7	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-22


??0162 . . . . . . . . . . . . .  	L NEAR	2DFA	CODESEG
??0163 . . . . . . . . . . . . .  	L NEAR	2E0E	CODESEG
??0164 . . . . . . . . . . . . .  	L NEAR	2E11	CODESEG
??0165 . . . . . . . . . . . . .  	L NEAR	2EE6	CODESEG
??0166 . . . . . . . . . . . . .  	L NEAR	2EEA	CODESEG
??0167 . . . . . . . . . . . . .  	L NEAR	2F0F	CODESEG
??0168 . . . . . . . . . . . . .  	L NEAR	2F13	CODESEG
??0169 . . . . . . . . . . . . .  	L NEAR	2F26	CODESEG
??016A . . . . . . . . . . . . .  	L NEAR	2F27	CODESEG
??016B . . . . . . . . . . . . .  	L NEAR	2F3F	CODESEG
??016C . . . . . . . . . . . . .  	L NEAR	2F65	CODESEG
??016D . . . . . . . . . . . . .  	L NEAR	3318	CODESEG
??016E . . . . . . . . . . . . .  	L NEAR	331C	CODESEG
??016F . . . . . . . . . . . . .  	L NEAR	3343	CODESEG
??0170 . . . . . . . . . . . . .  	L NEAR	3347	CODESEG
??0171 . . . . . . . . . . . . .  	L NEAR	3360	CODESEG
??0172 . . . . . . . . . . . . .  	L NEAR	336E	CODESEG
??0173 . . . . . . . . . . . . .  	L NEAR	33C0	CODESEG
??0174 . . . . . . . . . . . . .  	L NEAR	33C4	CODESEG
??0175 . . . . . . . . . . . . .  	L NEAR	33E3	CODESEG
??0176 . . . . . . . . . . . . .  	L NEAR	33E7	CODESEG
??0177 . . . . . . . . . . . . .  	L NEAR	3401	CODESEG
??0178 . . . . . . . . . . . . .  	L NEAR	340F	CODESEG
??0179 . . . . . . . . . . . . .  	L NEAR	3420	CODESEG
??017A . . . . . . . . . . . . .  	L NEAR	3424	CODESEG
??017B . . . . . . . . . . . . .  	L NEAR	34BC	CODESEG
??017C . . . . . . . . . . . . .  	L NEAR	34BF	CODESEG
??017D . . . . . . . . . . . . .  	L NEAR	357D	CODESEG
??017E . . . . . . . . . . . . .  	L NEAR	357E	CODESEG
??017F . . . . . . . . . . . . .  	L NEAR	35A6	CODESEG
??0180 . . . . . . . . . . . . .  	L NEAR	35C9	CODESEG
??0181 . . . . . . . . . . . . .  	L NEAR	3616	CODESEG
??0182 . . . . . . . . . . . . .  	L NEAR	3619	CODESEG
??0183 . . . . . . . . . . . . .  	L NEAR	364B	CODESEG
??0184 . . . . . . . . . . . . .  	L NEAR	364E	CODESEG
??0185 . . . . . . . . . . . . .  	L NEAR	3663	CODESEG
??0186 . . . . . . . . . . . . .  	L NEAR	3665	CODESEG
??0187 . . . . . . . . . . . . .  	L NEAR	3679	CODESEG
??0188 . . . . . . . . . . . . .  	L NEAR	367B	CODESEG
??0189 . . . . . . . . . . . . .  	L NEAR	368F	CODESEG
??018A . . . . . . . . . . . . .  	L NEAR	3691	CODESEG
??018B . . . . . . . . . . . . .  	L NEAR	3735	CODESEG
??018C . . . . . . . . . . . . .  	L NEAR	3736	CODESEG
??018D . . . . . . . . . . . . .  	L NEAR	381C	CODESEG
??018E . . . . . . . . . . . . .  	L NEAR	3820	CODESEG
??018F . . . . . . . . . . . . .  	L NEAR	3842	CODESEG
??0190 . . . . . . . . . . . . .  	L NEAR	3843	CODESEG
??0191 . . . . . . . . . . . . .  	L NEAR	386E	CODESEG
??0192 . . . . . . . . . . . . .  	L NEAR	3871	CODESEG
??0193 . . . . . . . . . . . . .  	L NEAR	3884	CODESEG
??0194 . . . . . . . . . . . . .  	L NEAR	3886	CODESEG
??0195 . . . . . . . . . . . . .  	L NEAR	3899	CODESEG
??0196 . . . . . . . . . . . . .  	L NEAR	389A	CODESEG
??0197 . . . . . . . . . . . . .  	L NEAR	38BF	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-23


??0198 . . . . . . . . . . . . .  	L NEAR	38D7	CODESEG
??0199 . . . . . . . . . . . . .  	L NEAR	38DB	CODESEG
??019A . . . . . . . . . . . . .  	L NEAR	38FE	CODESEG
??019B . . . . . . . . . . . . .  	L NEAR	3902	CODESEG
??019C . . . . . . . . . . . . .  	L NEAR	3980	CODESEG
??019D . . . . . . . . . . . . .  	L NEAR	3984	CODESEG
??019E . . . . . . . . . . . . .  	L NEAR	39CB	CODESEG
??019F . . . . . . . . . . . . .  	L NEAR	39CF	CODESEG
??01A0 . . . . . . . . . . . . .  	L NEAR	3A42	CODESEG
??01A1 . . . . . . . . . . . . .  	L NEAR	3A45	CODESEG
??01A2 . . . . . . . . . . . . .  	L NEAR	3A5C	CODESEG
??01A3 . . . . . . . . . . . . .  	L NEAR	3A5F	CODESEG
??01A4 . . . . . . . . . . . . .  	L NEAR	3A76	CODESEG
??01A5 . . . . . . . . . . . . .  	L NEAR	3A79	CODESEG
??01A6 . . . . . . . . . . . . .  	L NEAR	3A8D	CODESEG
??01A7 . . . . . . . . . . . . .  	L NEAR	3AA1	CODESEG
??01A8 . . . . . . . . . . . . .  	L NEAR	3AA5	CODESEG
??01A9 . . . . . . . . . . . . .  	L NEAR	3AB9	CODESEG
??01AA . . . . . . . . . . . . .  	L NEAR	3ACD	CODESEG
??01AB . . . . . . . . . . . . .  	L NEAR	3AD1	CODESEG
??01AC . . . . . . . . . . . . .  	L NEAR	3AE5	CODESEG
??01AD . . . . . . . . . . . . .  	L NEAR	3AF9	CODESEG
??01AE . . . . . . . . . . . . .  	L NEAR	3AFD	CODESEG
??01AF . . . . . . . . . . . . .  	L NEAR	3B11	CODESEG
??01B0 . . . . . . . . . . . . .  	L NEAR	3B2C	CODESEG
??01B1 . . . . . . . . . . . . .  	L NEAR	3B2F	CODESEG
??01B2 . . . . . . . . . . . . .  	L NEAR	3B46	CODESEG
??01B3 . . . . . . . . . . . . .  	L NEAR	3B69	CODESEG
??01B4 . . . . . . . . . . . . .  	L NEAR	3BC2	CODESEG
??01B5 . . . . . . . . . . . . .  	L NEAR	3BC3	CODESEG
??01B6 . . . . . . . . . . . . .  	L NEAR	3BEA	CODESEG
??01B7 . . . . . . . . . . . . .  	L NEAR	3BEC	CODESEG
??01B8 . . . . . . . . . . . . .  	L NEAR	3BFF	CODESEG
??01B9 . . . . . . . . . . . . .  	L NEAR	3C00	CODESEG
??01BA . . . . . . . . . . . . .  	L NEAR	3C31	CODESEG
??01BB . . . . . . . . . . . . .  	L NEAR	3C33	CODESEG
??01BC . . . . . . . . . . . . .  	L NEAR	3C46	CODESEG
??01BD . . . . . . . . . . . . .  	L NEAR	3C47	CODESEG
??01BE . . . . . . . . . . . . .  	L NEAR	3C8A	CODESEG
??01BF . . . . . . . . . . . . .  	L NEAR	3C8E	CODESEG
??01C0 . . . . . . . . . . . . .  	L NEAR	3CBB	CODESEG
??01C1 . . . . . . . . . . . . .  	L NEAR	3CBF	CODESEG
??01C2 . . . . . . . . . . . . .  	L NEAR	3CDF	CODESEG
??01C3 . . . . . . . . . . . . .  	L NEAR	3CE3	CODESEG
??01C4 . . . . . . . . . . . . .  	L NEAR	3D0B	CODESEG
??01C5 . . . . . . . . . . . . .  	L NEAR	3D0E	CODESEG
??01C6 . . . . . . . . . . . . .  	L NEAR	3D23	CODESEG
??01C7 . . . . . . . . . . . . .  	L NEAR	3D27	CODESEG
??01C8 . . . . . . . . . . . . .  	L NEAR	3D62	CODESEG
??01C9 . . . . . . . . . . . . .  	L NEAR	3D83	CODESEG
??01CA . . . . . . . . . . . . .  	L NEAR	3D85	CODESEG
??01CB . . . . . . . . . . . . .  	L NEAR	41FF	CODESEG
??01CC . . . . . . . . . . . . .  	L NEAR	4203	CODESEG
??01CD . . . . . . . . . . . . .  	L NEAR	4218	CODESEG
Microsoft (R) Macro Assembler Version 5.10                  8/9/3
                                                             Symbols-24


??01CE . . . . . . . . . . . . .  	L NEAR	4226	CODESEG
??01CF . . . . . . . . . . . . .  	L NEAR	4238	CODESEG
??01D0 . . . . . . . . . . . . .  	L NEAR	4246	CODESEG
??01D1 . . . . . . . . . . . . .  	L NEAR	425E	CODESEG
??01D2 . . . . . . . . . . . . .  	L NEAR	4262	CODESEG
??01D3 . . . . . . . . . . . . .  	L NEAR	427F	CODESEG
??01D4 . . . . . . . . . . . . .  	L NEAR	4283	CODESEG
??01D5 . . . . . . . . . . . . .  	L NEAR	429D	CODESEG
??01D6 . . . . . . . . . . . . .  	L NEAR	42AB	CODESEG
??01D7 . . . . . . . . . . . . .  	L NEAR	42D6	CODESEG
??01D8 . . . . . . . . . . . . .  	L NEAR	42E4	CODESEG
??01D9 . . . . . . . . . . . . .  	L NEAR	4302	CODESEG
??01DA . . . . . . . . . . . . .  	L NEAR	4310	CODESEG
??01DB . . . . . . . . . . . . .  	L NEAR	4346	CODESEG
??01DC . . . . . . . . . . . . .  	L NEAR	4354	CODESEG
@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@FILENAME  . . . . . . . . . . .  	TEXT  nokolisp		
@VERSION . . . . . . . . . . . .  	TEXT  510		


   6185 Source  Lines
  15915 Total   Lines
   1225 Symbols

  45956 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
